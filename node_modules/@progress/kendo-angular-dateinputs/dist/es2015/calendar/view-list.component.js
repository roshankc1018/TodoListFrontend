/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, EventEmitter, HostBinding, Input, Output, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { cloneDate, isEqual } from '@progress/kendo-date-math';
import { IntlService } from '@progress/kendo-angular-intl';
import { VirtualizationComponent } from '../virtualization/virtualization.component';
import { BusViewService } from './services/bus-view.service';
import { CalendarDOMService } from './services/dom.service';
import { CalendarViewEnum } from './models/view.enum';
import { MIN_DATE, MAX_DATE } from '../defaults';
import { dateInRange, hasChange, shiftWeekNames } from '../util';
const VIEWS_COUNT = 5;
const isEqualMonthYear = (date1, date2) => (date1 && date2 &&
    date1.getFullYear() === date2.getFullYear() &&
    date1.getMonth() === date2.getMonth());
const ɵ0 = isEqualMonthYear;
/**
 * @hidden
 */
let ViewListComponent = class ViewListComponent {
    constructor(bus, cdr, intl, dom, renderer) {
        this.bus = bus;
        this.cdr = cdr;
        this.intl = intl;
        this.dom = dom;
        this.renderer = renderer;
        this.isActive = true;
        this.min = new Date(MIN_DATE);
        this.max = new Date(MAX_DATE);
        this.selectedDates = [];
        this.cellClick = new EventEmitter();
        this.weekNumberCellClick = new EventEmitter();
        this.activeDateChange = new EventEmitter();
        this.todayButtonClick = new EventEmitter();
        this.pageChange = new EventEmitter();
        this.getComponentClass = true;
        this.dates = [];
        this.cols = [];
        this.weekNames = [];
        this.take = VIEWS_COUNT;
        this.animateToIndex = true;
        this.indexToScroll = -1;
        this.minViewsToRender = 1;
    }
    get weekNumber() {
        return this.showWeekNumbers && this.isMonthView();
    }
    set weekNumber(showWeekNumbers) {
        this.showWeekNumbers = showWeekNumbers;
    }
    get getComponentMonthClass() {
        return this.activeView === CalendarViewEnum.month;
    }
    get getComponentYearClass() {
        return this.activeView === CalendarViewEnum.year;
    }
    get getComponentDecadeClass() {
        return this.activeView === CalendarViewEnum.decade;
    }
    get getComponentCenturyClass() {
        return this.activeView === CalendarViewEnum.century;
    }
    ngOnInit() {
        this.weekNames = this.getWeekNames();
        this.bottomOffset = this.getBottomOffset();
        this.viewOffset = -1 * this.dom.headerHeight;
        this.viewHeight = this.dom.viewHeight(this.activeView);
        this.intlSubscription = this.intl.changes.subscribe(this.intlChange.bind(this));
    }
    ngOnChanges(changes) {
        this.service = this.bus.service(this.activeView);
        if (!this.service) {
            return;
        }
        this.cols = new Array(this.service.rowLength({ prependCell: this.weekNumber })).fill('');
        this.colWidth = Math.round(100 / this.cols.length);
        this.weekNames = hasChange(changes, 'weekNumber') && this.weekNumber ? this.getWeekNames() : this.weekNames;
        const activeViewChanged = hasChange(changes, 'activeView');
        const focusedDate = this.focusedDate;
        const viewDate = dateInRange(this.service.viewDate(focusedDate, this.max, this.minViewsToRender), this.min, this.max);
        const total = this.service.total(this.min, this.max);
        const totalChanged = this.total && this.total !== total;
        const generateDates = totalChanged || !this.service.isInArray(focusedDate, this.dates);
        this.skip = this.service.skip(viewDate, this.min);
        this.total = total;
        this.animateToIndex = !activeViewChanged;
        this.bottomOffset = this.getBottomOffset();
        this.viewHeight = this.dom.viewHeight(this.activeView);
        if (generateDates) {
            this.dates = this.service.datesList(viewDate, this.getTake(this.skip));
        }
        if (!isEqualMonthYear(this.activeDate, focusedDate)) {
            this.activeDate = cloneDate(focusedDate);
        }
        const updateIndex = hasChange(changes, 'focusedDate') || activeViewChanged;
        if (generateDates || updateIndex || this.virtualization.isIndexVisible(this.skip)) {
            this.indexToScroll = this.service.skip(focusedDate, this.min);
        }
    }
    ngOnDestroy() {
        if (this.intlSubscription) {
            this.intlSubscription.unsubscribe();
        }
    }
    ngAfterViewInit() {
        if (this.indexToScroll === -1) {
            return;
        }
        this.virtualization.scrollToIndex(this.indexToScroll);
        this.indexToScroll = -1;
    }
    ngAfterViewChecked() {
        if (this.indexToScroll === -1) {
            return;
        }
        this.virtualization[this.animateToIndex ? 'animateToIndex' : 'scrollToIndex'](this.indexToScroll);
        this.animateToIndex = true;
        this.indexToScroll = -1;
    }
    onPageChange({ skip }) {
        this.dates = this.service.datesList(this.service.addToDate(this.min, skip), this.getTake(skip));
        this.pageChange.emit();
    }
    scrollChange({ offset }) {
        const el = this.list.nativeElement;
        const translate = `translateY(${offset}px)`;
        this.renderer.setStyle(el, 'transform', translate);
        this.renderer.setStyle(el, '-ms-transform', translate);
    }
    setActiveDate(index) {
        const candidate = this.service.addToDate(this.min, index);
        if (isEqual(this.activeDate, candidate)) {
            return;
        }
        this.activeDate = candidate;
        this.activeDateChange.emit(candidate);
        this.cdr.detectChanges();
    }
    isMonthView() {
        return this.activeView === CalendarViewEnum.month;
    }
    isScrolled() {
        return this.virtualization.isListScrolled(this.service.skip(this.focusedDate, this.min));
    }
    getBottomOffset() {
        return this.getScrollableHeight() - this.dom.viewHeight(this.activeView);
    }
    getScrollableHeight() {
        return this.activeView === CalendarViewEnum.month ?
            this.dom.scrollableContentHeight :
            this.dom.scrollableYearContentHeight;
    }
    getTake(skip) {
        return Math.min(this.total - skip, this.take);
    }
    getWeekNames() {
        const weekNames = shiftWeekNames(this.intl.dateFormatNames({ nameType: 'short', type: 'days' }), this.intl.firstDay());
        return this.weekNumber ? [''].concat(weekNames) : weekNames;
    }
    intlChange() {
        this.weekNames = this.getWeekNames();
        if (this.isMonthView()) {
            this.cdr.markForCheck();
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TemplateRef)
], ViewListComponent.prototype, "cellTemplateRef", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TemplateRef)
], ViewListComponent.prototype, "weekNumberTemplateRef", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TemplateRef)
], ViewListComponent.prototype, "headerTitleTemplateRef", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], ViewListComponent.prototype, "activeView", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ViewListComponent.prototype, "cellUID", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Date)
], ViewListComponent.prototype, "focusedDate", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ViewListComponent.prototype, "isActive", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Date)
], ViewListComponent.prototype, "min", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Date)
], ViewListComponent.prototype, "max", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], ViewListComponent.prototype, "selectedDates", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], ViewListComponent.prototype, "weekNumber", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ViewListComponent.prototype, "cellClick", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ViewListComponent.prototype, "weekNumberCellClick", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ViewListComponent.prototype, "activeDateChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ViewListComponent.prototype, "todayButtonClick", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ViewListComponent.prototype, "pageChange", void 0);
tslib_1.__decorate([
    ViewChild(VirtualizationComponent, { static: false }),
    tslib_1.__metadata("design:type", VirtualizationComponent)
], ViewListComponent.prototype, "virtualization", void 0);
tslib_1.__decorate([
    ViewChild('list', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], ViewListComponent.prototype, "list", void 0);
tslib_1.__decorate([
    HostBinding("class.k-vstack"),
    HostBinding("class.k-calendar-view"),
    tslib_1.__metadata("design:type", Boolean)
], ViewListComponent.prototype, "getComponentClass", void 0);
tslib_1.__decorate([
    HostBinding("class.k-calendar-monthview"),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ViewListComponent.prototype, "getComponentMonthClass", null);
tslib_1.__decorate([
    HostBinding("class.k-calendar-yearview"),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ViewListComponent.prototype, "getComponentYearClass", null);
tslib_1.__decorate([
    HostBinding("class.k-calendar-decadeview"),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ViewListComponent.prototype, "getComponentDecadeClass", null);
tslib_1.__decorate([
    HostBinding("class.k-calendar-centuryview"),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ViewListComponent.prototype, "getComponentCenturyClass", null);
ViewListComponent = tslib_1.__decorate([
    Component({
        changeDetection: ChangeDetectionStrategy.OnPush,
        selector: 'kendo-calendar-viewlist',
        template: `
    <kendo-calendar-header
        [currentDate]="activeDate"
        [min]="min"
        [max]="max"
        [activeView]="activeView"
        [templateRef]="headerTitleTemplateRef"
        (todayButtonClick)="todayButtonClick.emit($event)"
    >
    </kendo-calendar-header>
    <table class="k-calendar-weekdays k-calendar-table" style="table-layout: auto;" *ngIf="isMonthView()">
        <thead class="k-calendar-thead">
            <tr class="k-calendar-tr">
                <th class="k-calendar-th" *ngFor="let name of weekNames" [style.width.%]="colWidth">{{name}}</th>
            </tr>
        </thead>
    </table>
    <kendo-virtualization
        [tabindex]="-1"
        [skip]="skip"
        [take]="take"
        [total]="total"
        [itemHeight]="viewHeight"
        [topOffset]="viewOffset"
        [bottomOffset]="bottomOffset"
        [scrollOffsetSize]="viewOffset"
        [maxScrollDifference]="viewHeight"
        (pageChange)="onPageChange($event)"
        (scrollChange)="scrollChange($event)"
        (activeIndexChange)="setActiveDate($event)"
        >
        <table class="k-calendar-table" #list>
            <colgroup><col *ngFor="let _ of cols" /></colgroup>

            <tbody class="k-calendar-tbody"
                   *kFor="let date of dates"
                   kendoCalendarView
                   role="rowgroup"
                   [activeView]="activeView"
                   [isActive]="isActive"
                   [min]="min" [max]="max"
                   [cellUID]="cellUID"
                   [focusedDate]="focusedDate"
                   [selectedDates]="selectedDates"
                   [weekNumber]="weekNumber"
                   [templateRef]="cellTemplateRef"
                   [weekNumberTemplateRef]="weekNumberTemplateRef"
                   [viewDate]="date"
                   (cellClick)="cellClick.emit($event)"
                   (weekNumberCellClick)="weekNumberCellClick.emit($event)"
            ></tbody>
        </table>
    </kendo-virtualization>
  `
    }),
    tslib_1.__metadata("design:paramtypes", [BusViewService,
        ChangeDetectorRef,
        IntlService,
        CalendarDOMService,
        Renderer2])
], ViewListComponent);
export { ViewListComponent };
export { ɵ0 };
