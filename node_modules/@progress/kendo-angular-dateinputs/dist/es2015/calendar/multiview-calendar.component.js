/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
/* tslint:disable:no-forward-ref */
import { Component, ChangeDetectorRef, ChangeDetectionStrategy, ContentChild, EventEmitter, ElementRef, Renderer2, isDevMode, forwardRef, HostBinding, HostListener, Input, Output, ViewChild, NgZone } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';
import { cloneDate, isEqual } from '@progress/kendo-date-math';
import { hasObservers, guid, Keys } from '@progress/kendo-angular-common';
import { HorizontalViewListComponent } from './horizontal-view-list.component';
import { BusViewService } from './services/bus-view.service';
import { NavigationService } from './services/navigation.service';
import { SelectionService } from './services/selection.service';
import { DisabledDatesService } from './services/disabled-dates.service';
import { CellTemplateDirective } from './templates/cell-template.directive';
import { MonthCellTemplateDirective } from './templates/month-cell-template.directive';
import { YearCellTemplateDirective } from './templates/year-cell-template.directive';
import { DecadeCellTemplateDirective } from './templates/decade-cell-template.directive';
import { CenturyCellTemplateDirective } from './templates/century-cell-template.directive';
import { WeekNumberCellTemplateDirective } from './templates/weeknumber-cell-template.directive';
import { HeaderTitleTemplateDirective } from './templates/header-title-template.directive';
import { Action } from './models/navigation-action.enum';
import { CalendarViewEnum } from './models/view.enum';
import { minValidator } from '../validators/min.validator';
import { maxValidator } from '../validators/max.validator';
import { disabledDatesRangeValidator } from '../validators/disabled-dates-range.validator';
import { MIN_DATE, MAX_DATE } from '../defaults';
import { areDatesEqual, dateInRange, getToday, hasExistingValue, last, noop } from '../util';
import { Subscription } from 'rxjs';
import { isPresent } from '../common/utils';
const BOTTOM_VIEW_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-bottomview';
const TOP_VIEW_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-topview';
const MIN_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-min';
const MAX_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-max';
const VALUE_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/calendar/#toc-using-with-json';
/**
 * @hidden
 */
export const RANGE_CALENDAR_VALUE_ACCESSOR = {
    multi: true,
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => MultiViewCalendarComponent) //tslint:disable-line:no-use-before-declare
};
/**
 * @hidden
 */
export const RANGE_CALENDAR_RANGE_VALIDATORS = {
    multi: true,
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => MultiViewCalendarComponent) //tslint:disable-line:no-use-before-declare
};
/**
 * Represents the Kendo UI MultiViewCalendar component for Angular.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-multiviewcalendar></kendo-multiviewcalendar>
 * `
 * })
 * export class AppComponent { }
 * ```
 */
let MultiViewCalendarComponent = class MultiViewCalendarComponent {
    constructor(bus, element, navigator, renderer, cdr, zone, disabledDatesService, selectionService) {
        this.bus = bus;
        this.element = element;
        this.navigator = navigator;
        this.renderer = renderer;
        this.cdr = cdr;
        this.zone = zone;
        this.disabledDatesService = disabledDatesService;
        this.selectionService = selectionService;
        /**
         * @hidden
         */
        this.id = guid();
        /**
         * Determines whether the built-in min or max validators are enforced when validating a form.
         */
        this.rangeValidation = false;
        /**
         * Determines whether the built-in validator for disabled
         * date ranges is enforced when validating a form
         * ([see example]({% slug disabled_dates_multiviewcalendar %}#toc-validation)).
         */
        this.disabledDatesRangeValidation = false;
        /**
         * Sets the Calendar selection mode
         * ([see example]({% slug multiple_selection_multiviewcalendar %})).
         *
         * The available values are:
         * * `single` (default)
         * * `multiple`
         */
        this.selection = 'single';
        /**
         * Sets or gets the `disabled` property of the Calendar and
         * determines whether the component is active
         * ([see example]({% slug disabled_multiviewcalendar %})).
         */
        this.disabled = false;
        /**
         * Sets or gets the `tabindex` property of the Calendar. Based on the
         * [HTML `tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) behavior,
         * it determines whether the component is focusable.
         */
        this.tabindex = 0;
        /**
         * @hidden
         */
        this.isActive = false;
        /**
         * Defines the active view that the Calendar initially renders
         * ([see example]({% slug activeview_multiviewcalendar %})).
         * By default, the active view is `month`.
         *
         * > You have to set `activeView` within the `topView`-`bottomView` range.
         */
        this.activeView = CalendarViewEnum[CalendarViewEnum.month];
        /**
         * Defines the bottommost view, to which the user can navigate
         * ([see example]({% slug dates_multiviewcalendar %}#toc-partial-dates)).
         */
        this.bottomView = CalendarViewEnum[CalendarViewEnum.month];
        /**
         * Defines the topmost view, to which the user can navigate.
         */
        this.topView = CalendarViewEnum[CalendarViewEnum.century];
        /**
         * Determines whether to display a header for every view (for example the month name).
         */
        this.showViewHeader = false;
        /**
         * Determines whether to enable animation when navigating to previous/next view.
         *
         * > This feature uses the [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API). In order to run the animation in browsers that do not support it, you need the `web-animations-js` polyfill.
         *
         * @default false
         */
        this.animateNavigation = false;
        /**
         * Determines whether to display a week number column in the `month` view
         * ([see example]({% slug weeknumcolumn_multiviewcalendar %})).
         */
        this.weekNumber = false;
        /**
         * Sets or gets the `views` property of the Calendar and
         * defines the number of rendered months.
         */
        this.views = 2;
        /**
         * Fires when the active view is changed
         * ([more information and example]({% slug overview_multiviewcalendar %}#toc-events)).
         */
        this.activeViewChange = new EventEmitter();
        /**
         * Fires when a view cell is entered
         * ([more information and example]({% slug overview_multiviewcalendar %}#toc-events)).
         */
        this.cellEnter = new EventEmitter();
        /**
         * Fires when a view cell is leaved
         * ([more information and example]({% slug overview_multiviewcalendar %}#toc-events)).
         */
        this.cellLeave = new EventEmitter();
        /**
         * Fires when the value is changed
         * ([more information and example]({% slug overview_multiviewcalendar %}#toc-events)).
         */
        this.valueChange = new EventEmitter();
        this.cellUID = guid();
        this.isHovered = false;
        this.isPrevDisabled = true;
        this.isNextDisabled = true;
        this.prevView = Action.PrevView;
        this.nextView = Action.NextView;
        this.selectedDates = [];
        this._min = new Date(MIN_DATE);
        this._max = new Date(MAX_DATE);
        this._focusedDate = getToday();
        this.resolvedPromise = Promise.resolve();
        this.onControlChange = noop;
        this.onControlTouched = noop;
        this.onValidatorChange = noop;
        this.minValidateFn = noop;
        this.maxValidateFn = noop;
        this.disabledDatesRangeValidateFn = noop;
        this.subscriptions = new Subscription(() => { });
        this.setClasses(element.nativeElement);
    }
    /**
     * Sets or gets the `focusedDate` property of the Calendar and
     * defines the focused date of the component
     * ([see example]({% slug dates_multiviewcalendar %}#toc-focused-dates)).
     *
     * > If the Calendar is out of the min or max range, it normalizes the defined `focusedDate`.
     */
    set focusedDate(focusedDate) {
        this._focusedDate = focusedDate || getToday();
    }
    get focusedDate() {
        return this._focusedDate;
    }
    /**
     * Sets or gets the `min` property of the Calendar and
     * defines the minimum allowed date value.
     * By default, the `min` value is `1900-1-1`.
     */
    set min(min) {
        this._min = min || new Date(MIN_DATE);
    }
    get min() {
        return this._min;
    }
    /**
     * Sets or gets the `max` property of the Calendar and
     * defines the maximum allowed date value.
     * By default, the `max` value is `2099-12-31`.
     */
    set max(max) {
        this._max = max || new Date(MAX_DATE);
    }
    get max() {
        return this._max;
    }
    /**
     * Sets or gets the `value` property of the Calendar and defines the selected value of the component.
     *
     * > The `value` has to be a valid
     * [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date)
     * instance when in `single` selection mode or an array of valid JavaScript Date instances when in `multiple` selection mode.
     */
    get value() {
        return this._value;
    }
    set value(candidate) {
        this.verifyValue(candidate);
        this._value = Array.isArray(candidate) ?
            candidate.filter(date => isPresent(date)).map(element => cloneDate(element)) :
            cloneDate(candidate);
        const selection = [].concat(candidate).filter(date => isPresent(date)).map(date => cloneDate(date));
        if (!areDatesEqual(selection, this.selectedDates)) {
            const lastSelected = last(selection);
            this.rangePivot = cloneDate(lastSelected);
            this.focusedDate = cloneDate(lastSelected) || this.focusedDate;
            this.selectedDates = selection;
        }
    }
    /**
     * @hidden
     */
    set tabIndex(tabIndex) {
        this.tabindex = tabIndex;
    }
    get tabIndex() {
        return this.tabindex;
    }
    /**
     * Sets the dates of the MultiViewCalendar that will be disabled
     * ([see example]({% slug disabled_dates_multiviewcalendar %})).
     */
    set disabledDates(value) {
        this.disabledDatesService.initialize(value);
    }
    /**
     * Sets or gets the `selectionRange` property of the Calendar and
     * defines the selection range of the component
     * ([see example]({% slug dates_multiviewcalendar %}#toc-selection-range)).
     */
    set selectionRange(range) {
        this._selectionRange = range;
        if (this.disabledDatesRangeValidation) {
            this.onValidatorChange();
        }
    }
    get selectionRange() {
        return this._selectionRange;
    }
    /**
     * @hidden
     */
    set cellTemplateRef(template) {
        this.cellTemplate = template;
    }
    /**
     * @hidden
     */
    set monthCellTemplateRef(template) {
        this.monthCellTemplate = template;
    }
    /**
     * @hidden
     */
    set yearCellTemplateRef(template) {
        this.yearCellTemplate = template;
    }
    /**
     * @hidden
     */
    set decadeCellTemplateRef(template) {
        this.decadeCellTemplate = template;
    }
    /**
     * @hidden
     */
    set centuryCellTemplateRef(template) {
        this.centuryCellTemplate = template;
    }
    /**
     * @hidden
     */
    set weekNumberTemplateRef(template) {
        this.weekNumberTemplate = template;
    }
    /**
     * @hidden
     */
    set headerTitleTemplateRef(template) {
        this.headerTitleTemplate = template;
    }
    get activeViewEnum() {
        const activeView = CalendarViewEnum[this.activeView];
        return activeView < this.bottomViewEnum ? this.bottomViewEnum : activeView;
    }
    get bottomViewEnum() {
        return CalendarViewEnum[this.bottomView];
    }
    get topViewEnum() {
        return CalendarViewEnum[this.topView];
    }
    get widgetId() {
        return this.id;
    }
    get widgetRole() {
        return 'grid';
    }
    get calendarTabIndex() {
        return this.disabled ? undefined : this.tabIndex;
    }
    get ariaDisabled() {
        return this.disabled;
    }
    get ariaActivedescendant() {
        return this.cellUID + this.focusedDate.getTime();
    }
    /**
     * @hidden
     */
    handleBlur() {
        this.onControlTouched();
        this.isActive = false;
        this.isHovered = false; //ensure that hovered is also not active
    }
    /**
     * @hidden
     */
    handleFocus() {
        this.isActive = true;
    }
    /**
     * @hidden
     */
    handleMouseEnter() {
        this.isHovered = true;
    }
    /**
     * @hidden
     */
    handleMouseLeave() {
        this.isHovered = false;
    }
    /**
     * @hidden
     */
    handleMousedown(event) {
        event.preventDefault();
    }
    /**
     * @hidden
     */
    handleClick() {
        if (this.isActive) {
            return;
        }
        this.focus();
    }
    /**
     * @hidden
     */
    keydown(event) {
        if (event.keyCode === Keys.Enter) {
            this.performSelection(this.focusedDate, event);
        }
        const candidate = dateInRange(this.navigator.move(this.focusedDate, this.navigator.action(event), this.activeViewEnum), this.min, this.max);
        if (isEqual(this.focusedDate, candidate)) {
            return;
        }
        this.focusedDate = candidate;
        event.preventDefault();
    }
    ngOnInit() {
        this.subscriptions.add(this.bus.viewChanged.subscribe(({ view }) => {
            this.activeView = CalendarViewEnum[view];
            this.activeViewChange.emit(this.activeView);
            this.cdr.detectChanges();
            this.updateButtonState();
        }));
    }
    ngOnChanges(changes) {
        this.verifyChanges();
        this.bus.configure(this.bottomViewEnum, this.topViewEnum);
        if (hasExistingValue(changes, 'focusedDate')) {
            const focusedDate = changes.focusedDate.currentValue;
            this.focusedDate = dateInRange(focusedDate, this.min, this.max);
        }
        if (changes.min || changes.max || changes.rangeValidation || changes.disabledDates || changes.disabledDatesRangeValidation) {
            this.minValidateFn = this.rangeValidation ? minValidator(this.min) : noop;
            this.maxValidateFn = this.rangeValidation ? maxValidator(this.max) : noop;
            this.disabledDatesRangeValidateFn = this.disabledDatesRangeValidation ? disabledDatesRangeValidator(this.disabledDatesService.isDateDisabled) : noop;
            this.onValidatorChange();
        }
        if (changes.min || changes.max || changes.focusedDate || changes.activeView) {
            this.updateButtonState();
        }
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    ngAfterViewInit() {
        this.updateButtonState();
    }
    /**
     * Focuses the host element of the Calendar.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="multiviewcalendar.focus()">Focus calendar</button>
     *  <kendo-multiviewcalendar #multiviewcalendar></kendo-multiviewcalendar>
     * `
     * })
     * export class AppComponent { }
     * ```
     */
    focus() {
        if (!this.element) {
            return;
        }
        this.element.nativeElement.focus();
    }
    /**
     * Blurs the Calendar component.
     */
    blur() {
        if (!this.element) {
            return;
        }
        this.element.nativeElement.blur();
    }
    /**
     * @hidden
     */
    handleDateChange(args) {
        const canNavigateDown = this.bus.canMoveDown(this.activeViewEnum);
        const availableDates = args.selectedDates.filter(date => !this.disabledDatesService.isDateDisabled(date));
        this.focusedDate = args.focusedDate || this.focusedDate;
        const sameDates = !canNavigateDown && areDatesEqual(availableDates, this.selectedDates);
        if (this.disabled || sameDates) {
            return;
        }
        if (canNavigateDown) {
            this.bus.moveDown(this.activeViewEnum);
            return;
        }
        if (this.disabledDatesService.isDateDisabled(this.focusedDate)) {
            return;
        }
        this.selectedDates = availableDates.map(date => cloneDate(date));
        this.value = this.parseSelectionToValue(availableDates);
        this.onControlChange(this.parseSelectionToValue(availableDates));
        this.valueChange.emit(this.parseSelectionToValue(availableDates));
    }
    /**
     * @hidden
     */
    setActiveDate(date) {
        this.activeDate = cloneDate(date);
        this.cdr.detectChanges();
    }
    /**
     * @hidden
     */
    writeValue(candidate) {
        this.verifyValue(candidate);
        this.value = candidate;
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onControlChange = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onControlTouched = fn;
    }
    /**
     * @hidden
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     */
    validate(control) {
        return this.minValidateFn(control) || this.maxValidateFn(control) || this.disabledDatesRangeValidateFn(this.selectionRange);
    }
    /**
     * @hidden
     */
    registerOnValidatorChange(fn) {
        this.onValidatorChange = fn;
    }
    /**
     * @hidden
     */
    activeCellTemplate() {
        switch (this.activeViewEnum) {
            case CalendarViewEnum.month:
                return this.monthCellTemplate || this.cellTemplate;
            case CalendarViewEnum.year:
                return this.yearCellTemplate;
            case CalendarViewEnum.decade:
                return this.decadeCellTemplate;
            case CalendarViewEnum.century:
                return this.centuryCellTemplate;
            default:
                return null;
        }
    }
    /**
     * @hidden
     */
    navigate(action) {
        this.focusedDate = this.viewList.navigate(action);
        this.updateButtonState();
    }
    /**
     * @hidden
     */
    emitCellEvent(emitter, args) {
        if (hasObservers(emitter)) {
            this.zone.run(() => {
                emitter.emit(args);
            });
        }
    }
    /**
     * @hidden
     */
    handleCellClick({ date, modifiers }) {
        this.performSelection(date, modifiers);
    }
    /**
     * @hidden
     */
    handleWeekNumberClick(dates) {
        if (this.selection === 'single') {
            return;
        }
        this.zone.run(() => {
            this.handleDateChange({
                selectedDates: dates,
                focusedDate: last(dates)
            });
        });
    }
    setClasses(element) {
        this.renderer.addClass(element, 'k-widget');
        this.renderer.addClass(element, 'k-calendar');
        this.renderer.addClass(element, 'k-calendar-range');
    }
    verifyChanges() {
        if (!isDevMode()) {
            return;
        }
        if (this.min > this.max) {
            throw new Error(`The max value should be bigger than the min. See ${MIN_DOC_LINK} and ${MAX_DOC_LINK}.`);
        }
        if (this.bottomViewEnum > this.topViewEnum) {
            throw new Error(`The topView should be greater than bottomView. See ${BOTTOM_VIEW_DOC_LINK} and ${TOP_VIEW_DOC_LINK}.`);
        }
    }
    verifyValue(candidate) {
        if (!isDevMode()) {
            return;
        }
        if (this.selection === 'single' && candidate && !(candidate instanceof Date)) {
            throw new Error(`The 'value' should be a valid JavaScript Date instance. Check ${VALUE_DOC_LINK} for possible resolution.`);
        }
        else if (this.selection === 'multiple' && candidate && Array.isArray(candidate)) {
            const onlyDates = candidate.every(value => value instanceof Date);
            if (!onlyDates) {
                throw new Error(`The 'value' should be an array of valid JavaScript Date instances. Check ${VALUE_DOC_LINK} for possible resolution.`);
            }
        }
    }
    updateButtonState() {
        this.resolvedPromise.then(() => {
            this.isPrevDisabled = !this.viewList.canNavigate(this.prevView);
            this.isNextDisabled = !this.viewList.canNavigate(this.nextView);
            this.cdr.markForCheck();
        });
    }
    parseSelectionToValue(selection) {
        selection = selection || [];
        return this.selection === 'single' ? cloneDate(last(selection)) : selection.map(date => cloneDate(date));
    }
    performSelection(date, selectionModifiers) {
        const selection = this.selectionService.performSelection({
            date: date,
            modifiers: selectionModifiers,
            selectionMode: this.selection,
            activeViewEnum: this.activeViewEnum,
            rangePivot: this.rangePivot,
            selectedDates: this.selectedDates
        });
        this.rangePivot = selection.rangePivot;
        this.handleDateChange({
            selectedDates: selection.selectedDates,
            focusedDate: date
        });
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], MultiViewCalendarComponent.prototype, "id", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Date),
    tslib_1.__metadata("design:paramtypes", [Date])
], MultiViewCalendarComponent.prototype, "focusedDate", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Date),
    tslib_1.__metadata("design:paramtypes", [Date])
], MultiViewCalendarComponent.prototype, "min", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Date),
    tslib_1.__metadata("design:paramtypes", [Date])
], MultiViewCalendarComponent.prototype, "max", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], MultiViewCalendarComponent.prototype, "rangeValidation", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], MultiViewCalendarComponent.prototype, "disabledDatesRangeValidation", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], MultiViewCalendarComponent.prototype, "selection", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], MultiViewCalendarComponent.prototype, "value", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], MultiViewCalendarComponent.prototype, "disabled", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], MultiViewCalendarComponent.prototype, "tabindex", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], MultiViewCalendarComponent.prototype, "tabIndex", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], MultiViewCalendarComponent.prototype, "isActive", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], MultiViewCalendarComponent.prototype, "disabledDates", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], MultiViewCalendarComponent.prototype, "activeView", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], MultiViewCalendarComponent.prototype, "bottomView", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], MultiViewCalendarComponent.prototype, "topView", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], MultiViewCalendarComponent.prototype, "showViewHeader", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], MultiViewCalendarComponent.prototype, "animateNavigation", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], MultiViewCalendarComponent.prototype, "weekNumber", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], MultiViewCalendarComponent.prototype, "activeRangeEnd", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], MultiViewCalendarComponent.prototype, "selectionRange", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], MultiViewCalendarComponent.prototype, "views", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], MultiViewCalendarComponent.prototype, "activeViewChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], MultiViewCalendarComponent.prototype, "cellEnter", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], MultiViewCalendarComponent.prototype, "cellLeave", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], MultiViewCalendarComponent.prototype, "valueChange", void 0);
tslib_1.__decorate([
    ContentChild(CellTemplateDirective, { static: true }),
    tslib_1.__metadata("design:type", CellTemplateDirective)
], MultiViewCalendarComponent.prototype, "cellTemplate", void 0);
tslib_1.__decorate([
    Input('cellTemplate'),
    tslib_1.__metadata("design:type", CellTemplateDirective),
    tslib_1.__metadata("design:paramtypes", [CellTemplateDirective])
], MultiViewCalendarComponent.prototype, "cellTemplateRef", null);
tslib_1.__decorate([
    ContentChild(MonthCellTemplateDirective, { static: true }),
    tslib_1.__metadata("design:type", MonthCellTemplateDirective)
], MultiViewCalendarComponent.prototype, "monthCellTemplate", void 0);
tslib_1.__decorate([
    Input('monthCellTemplate'),
    tslib_1.__metadata("design:type", MonthCellTemplateDirective),
    tslib_1.__metadata("design:paramtypes", [MonthCellTemplateDirective])
], MultiViewCalendarComponent.prototype, "monthCellTemplateRef", null);
tslib_1.__decorate([
    ContentChild(YearCellTemplateDirective, { static: true }),
    tslib_1.__metadata("design:type", YearCellTemplateDirective)
], MultiViewCalendarComponent.prototype, "yearCellTemplate", void 0);
tslib_1.__decorate([
    Input('yearCellTemplate'),
    tslib_1.__metadata("design:type", YearCellTemplateDirective),
    tslib_1.__metadata("design:paramtypes", [YearCellTemplateDirective])
], MultiViewCalendarComponent.prototype, "yearCellTemplateRef", null);
tslib_1.__decorate([
    ContentChild(DecadeCellTemplateDirective, { static: true }),
    tslib_1.__metadata("design:type", DecadeCellTemplateDirective)
], MultiViewCalendarComponent.prototype, "decadeCellTemplate", void 0);
tslib_1.__decorate([
    Input('decadeCellTemplate'),
    tslib_1.__metadata("design:type", DecadeCellTemplateDirective),
    tslib_1.__metadata("design:paramtypes", [DecadeCellTemplateDirective])
], MultiViewCalendarComponent.prototype, "decadeCellTemplateRef", null);
tslib_1.__decorate([
    ContentChild(CenturyCellTemplateDirective, { static: true }),
    tslib_1.__metadata("design:type", CenturyCellTemplateDirective)
], MultiViewCalendarComponent.prototype, "centuryCellTemplate", void 0);
tslib_1.__decorate([
    Input('centuryCellTemplate'),
    tslib_1.__metadata("design:type", CenturyCellTemplateDirective),
    tslib_1.__metadata("design:paramtypes", [CenturyCellTemplateDirective])
], MultiViewCalendarComponent.prototype, "centuryCellTemplateRef", null);
tslib_1.__decorate([
    ContentChild(WeekNumberCellTemplateDirective, { static: true }),
    tslib_1.__metadata("design:type", WeekNumberCellTemplateDirective)
], MultiViewCalendarComponent.prototype, "weekNumberTemplate", void 0);
tslib_1.__decorate([
    Input('weekNumberTemplate'),
    tslib_1.__metadata("design:type", WeekNumberCellTemplateDirective),
    tslib_1.__metadata("design:paramtypes", [WeekNumberCellTemplateDirective])
], MultiViewCalendarComponent.prototype, "weekNumberTemplateRef", null);
tslib_1.__decorate([
    ContentChild(HeaderTitleTemplateDirective, { static: true }),
    tslib_1.__metadata("design:type", HeaderTitleTemplateDirective)
], MultiViewCalendarComponent.prototype, "headerTitleTemplate", void 0);
tslib_1.__decorate([
    Input('headerTitleTemplate'),
    tslib_1.__metadata("design:type", HeaderTitleTemplateDirective),
    tslib_1.__metadata("design:paramtypes", [HeaderTitleTemplateDirective])
], MultiViewCalendarComponent.prototype, "headerTitleTemplateRef", null);
tslib_1.__decorate([
    ViewChild(HorizontalViewListComponent, { static: false }),
    tslib_1.__metadata("design:type", HorizontalViewListComponent)
], MultiViewCalendarComponent.prototype, "viewList", void 0);
tslib_1.__decorate([
    HostBinding('attr.id'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [])
], MultiViewCalendarComponent.prototype, "widgetId", null);
tslib_1.__decorate([
    HostBinding('attr.role'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [])
], MultiViewCalendarComponent.prototype, "widgetRole", null);
tslib_1.__decorate([
    HostBinding('attr.tabindex'),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [])
], MultiViewCalendarComponent.prototype, "calendarTabIndex", null);
tslib_1.__decorate([
    HostBinding('attr.aria-disabled'),
    HostBinding('class.k-state-disabled'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], MultiViewCalendarComponent.prototype, "ariaDisabled", null);
tslib_1.__decorate([
    HostBinding('attr.aria-activedescendant'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [])
], MultiViewCalendarComponent.prototype, "ariaActivedescendant", null);
tslib_1.__decorate([
    HostListener("blur"),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], MultiViewCalendarComponent.prototype, "handleBlur", null);
tslib_1.__decorate([
    HostListener("focus"),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], MultiViewCalendarComponent.prototype, "handleFocus", null);
tslib_1.__decorate([
    HostListener("mouseenter"),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], MultiViewCalendarComponent.prototype, "handleMouseEnter", null);
tslib_1.__decorate([
    HostListener("mouseleave"),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], MultiViewCalendarComponent.prototype, "handleMouseLeave", null);
tslib_1.__decorate([
    HostListener("mousedown", ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], MultiViewCalendarComponent.prototype, "handleMousedown", null);
tslib_1.__decorate([
    HostListener("click"),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], MultiViewCalendarComponent.prototype, "handleClick", null);
tslib_1.__decorate([
    HostListener("keydown", ["$event"]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], MultiViewCalendarComponent.prototype, "keydown", null);
MultiViewCalendarComponent = tslib_1.__decorate([
    Component({
        changeDetection: ChangeDetectionStrategy.OnPush,
        exportAs: 'kendo-multiviewcalendar',
        providers: [
            BusViewService,
            RANGE_CALENDAR_VALUE_ACCESSOR,
            RANGE_CALENDAR_RANGE_VALIDATORS,
            LocalizationService,
            DisabledDatesService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.multiviewcalendar'
            },
            NavigationService,
            SelectionService
        ],
        selector: 'kendo-multiviewcalendar',
        template: `
    <ng-container kendoMultiViewCalendarLocalizedMessages
        i18n-today="kendo.multiviewcalendar.today|The label for the today button in the calendar header"
        today="Today"

        i18n-prevButtonTitle="kendo.multiviewcalendar.prevButtonTitle|The label for the previous button in the Multiview calendar"
        prevButtonTitle="Navigate to previous view"

        i18n-nextButtonTitle="kendo.multiviewcalendar.nextButtonTitle|The label for the next button in the Multiview calendar"
        nextButtonTitle="Navigate to next view"
    >
    </ng-container>
    <kendo-calendar-header
        [activeView]="activeViewEnum"
        [currentDate]="activeDate"
        [min]="min"
        [max]="max"
        [rangeLength]="views"
        [templateRef]="headerTitleTemplate?.templateRef"
        [isPrevDisabled]="isPrevDisabled"
        [isNextDisabled]="isNextDisabled"
        [showNavigationButtons]="true"
        (todayButtonClick)="handleDateChange({ selectedDates: [$event], focusedDate: $event })"
        (prevButtonClick)="navigate(prevView)"
        (nextButtonClick)="navigate(nextView)"
    >
    </kendo-calendar-header>
    <kendo-calendar-horizontal
        [activeView]="activeViewEnum"
        [isActive]="isActive || isHovered"
        [cellTemplateRef]="activeCellTemplate()?.templateRef"
        [weekNumberTemplateRef]="weekNumberTemplate?.templateRef"
        [cellUID]="cellUID"
        [views]="views"
        [min]="min"
        [max]="max"
        [focusedDate]="focusedDate"
        [animateNavigation]="animateNavigation"
        [showViewHeader]="showViewHeader"
        [weekNumber]="weekNumber"
        [activeRangeEnd]="activeRangeEnd"
        [selectionRange]="selectionRange"
        [selectedDates]="selectedDates"
        (valueChange)="handleDateChange($event)"
        (cellClick)="handleCellClick($event)"
        (weekNumberCellClick)="handleWeekNumberClick($event)"
        (cellEnter)="emitCellEvent(cellEnter, $event)"
        (cellLeave)="emitCellEvent(cellLeave, $event)"
        (activeDateChange)="setActiveDate($event)"
    >
    </kendo-calendar-horizontal>
  `
    }),
    tslib_1.__metadata("design:paramtypes", [BusViewService,
        ElementRef,
        NavigationService,
        Renderer2,
        ChangeDetectorRef,
        NgZone,
        DisabledDatesService,
        SelectionService])
], MultiViewCalendarComponent);
export { MultiViewCalendarComponent };
