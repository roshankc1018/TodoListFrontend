/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/* tslint:disable:no-forward-ref */
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var kendo_date_math_1 = require("@progress/kendo-date-math");
var kendo_angular_common_1 = require("@progress/kendo-angular-common");
var horizontal_view_list_component_1 = require("./horizontal-view-list.component");
var bus_view_service_1 = require("./services/bus-view.service");
var navigation_service_1 = require("./services/navigation.service");
var selection_service_1 = require("./services/selection.service");
var disabled_dates_service_1 = require("./services/disabled-dates.service");
var cell_template_directive_1 = require("./templates/cell-template.directive");
var month_cell_template_directive_1 = require("./templates/month-cell-template.directive");
var year_cell_template_directive_1 = require("./templates/year-cell-template.directive");
var decade_cell_template_directive_1 = require("./templates/decade-cell-template.directive");
var century_cell_template_directive_1 = require("./templates/century-cell-template.directive");
var weeknumber_cell_template_directive_1 = require("./templates/weeknumber-cell-template.directive");
var header_title_template_directive_1 = require("./templates/header-title-template.directive");
var navigation_action_enum_1 = require("./models/navigation-action.enum");
var view_enum_1 = require("./models/view.enum");
var min_validator_1 = require("../validators/min.validator");
var max_validator_1 = require("../validators/max.validator");
var disabled_dates_range_validator_1 = require("../validators/disabled-dates-range.validator");
var defaults_1 = require("../defaults");
var util_1 = require("../util");
var rxjs_1 = require("rxjs");
var utils_1 = require("../common/utils");
var BOTTOM_VIEW_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-bottomview';
var TOP_VIEW_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-topview';
var MIN_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-min';
var MAX_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-max';
var VALUE_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/calendar/#toc-using-with-json';
/**
 * @hidden
 */
exports.RANGE_CALENDAR_VALUE_ACCESSOR = {
    multi: true,
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return MultiViewCalendarComponent; }) //tslint:disable-line:no-use-before-declare
};
/**
 * @hidden
 */
exports.RANGE_CALENDAR_RANGE_VALIDATORS = {
    multi: true,
    provide: forms_1.NG_VALIDATORS,
    useExisting: core_1.forwardRef(function () { return MultiViewCalendarComponent; }) //tslint:disable-line:no-use-before-declare
};
/**
 * Represents the Kendo UI MultiViewCalendar component for Angular.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-multiviewcalendar></kendo-multiviewcalendar>
 * `
 * })
 * export class AppComponent { }
 * ```
 */
var MultiViewCalendarComponent = /** @class */ (function () {
    function MultiViewCalendarComponent(bus, element, navigator, renderer, cdr, zone, disabledDatesService, selectionService) {
        this.bus = bus;
        this.element = element;
        this.navigator = navigator;
        this.renderer = renderer;
        this.cdr = cdr;
        this.zone = zone;
        this.disabledDatesService = disabledDatesService;
        this.selectionService = selectionService;
        /**
         * @hidden
         */
        this.id = kendo_angular_common_1.guid();
        /**
         * Determines whether the built-in min or max validators are enforced when validating a form.
         */
        this.rangeValidation = false;
        /**
         * Determines whether the built-in validator for disabled
         * date ranges is enforced when validating a form
         * ([see example]({% slug disabled_dates_multiviewcalendar %}#toc-validation)).
         */
        this.disabledDatesRangeValidation = false;
        /**
         * Sets the Calendar selection mode
         * ([see example]({% slug multiple_selection_multiviewcalendar %})).
         *
         * The available values are:
         * * `single` (default)
         * * `multiple`
         */
        this.selection = 'single';
        /**
         * Sets or gets the `disabled` property of the Calendar and
         * determines whether the component is active
         * ([see example]({% slug disabled_multiviewcalendar %})).
         */
        this.disabled = false;
        /**
         * Sets or gets the `tabindex` property of the Calendar. Based on the
         * [HTML `tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) behavior,
         * it determines whether the component is focusable.
         */
        this.tabindex = 0;
        /**
         * @hidden
         */
        this.isActive = false;
        /**
         * Defines the active view that the Calendar initially renders
         * ([see example]({% slug activeview_multiviewcalendar %})).
         * By default, the active view is `month`.
         *
         * > You have to set `activeView` within the `topView`-`bottomView` range.
         */
        this.activeView = view_enum_1.CalendarViewEnum[view_enum_1.CalendarViewEnum.month];
        /**
         * Defines the bottommost view, to which the user can navigate
         * ([see example]({% slug dates_multiviewcalendar %}#toc-partial-dates)).
         */
        this.bottomView = view_enum_1.CalendarViewEnum[view_enum_1.CalendarViewEnum.month];
        /**
         * Defines the topmost view, to which the user can navigate.
         */
        this.topView = view_enum_1.CalendarViewEnum[view_enum_1.CalendarViewEnum.century];
        /**
         * Determines whether to display a header for every view (for example the month name).
         */
        this.showViewHeader = false;
        /**
         * Determines whether to enable animation when navigating to previous/next view.
         *
         * > This feature uses the [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API). In order to run the animation in browsers that do not support it, you need the `web-animations-js` polyfill.
         *
         * @default false
         */
        this.animateNavigation = false;
        /**
         * Determines whether to display a week number column in the `month` view
         * ([see example]({% slug weeknumcolumn_multiviewcalendar %})).
         */
        this.weekNumber = false;
        /**
         * Sets or gets the `views` property of the Calendar and
         * defines the number of rendered months.
         */
        this.views = 2;
        /**
         * Fires when the active view is changed
         * ([more information and example]({% slug overview_multiviewcalendar %}#toc-events)).
         */
        this.activeViewChange = new core_1.EventEmitter();
        /**
         * Fires when a view cell is entered
         * ([more information and example]({% slug overview_multiviewcalendar %}#toc-events)).
         */
        this.cellEnter = new core_1.EventEmitter();
        /**
         * Fires when a view cell is leaved
         * ([more information and example]({% slug overview_multiviewcalendar %}#toc-events)).
         */
        this.cellLeave = new core_1.EventEmitter();
        /**
         * Fires when the value is changed
         * ([more information and example]({% slug overview_multiviewcalendar %}#toc-events)).
         */
        this.valueChange = new core_1.EventEmitter();
        this.cellUID = kendo_angular_common_1.guid();
        this.isHovered = false;
        this.isPrevDisabled = true;
        this.isNextDisabled = true;
        this.prevView = navigation_action_enum_1.Action.PrevView;
        this.nextView = navigation_action_enum_1.Action.NextView;
        this.selectedDates = [];
        this._min = new Date(defaults_1.MIN_DATE);
        this._max = new Date(defaults_1.MAX_DATE);
        this._focusedDate = util_1.getToday();
        this.resolvedPromise = Promise.resolve();
        this.onControlChange = util_1.noop;
        this.onControlTouched = util_1.noop;
        this.onValidatorChange = util_1.noop;
        this.minValidateFn = util_1.noop;
        this.maxValidateFn = util_1.noop;
        this.disabledDatesRangeValidateFn = util_1.noop;
        this.subscriptions = new rxjs_1.Subscription(function () { });
        this.setClasses(element.nativeElement);
    }
    Object.defineProperty(MultiViewCalendarComponent.prototype, "focusedDate", {
        get: function () {
            return this._focusedDate;
        },
        /**
         * Sets or gets the `focusedDate` property of the Calendar and
         * defines the focused date of the component
         * ([see example]({% slug dates_multiviewcalendar %}#toc-focused-dates)).
         *
         * > If the Calendar is out of the min or max range, it normalizes the defined `focusedDate`.
         */
        set: function (focusedDate) {
            this._focusedDate = focusedDate || util_1.getToday();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "min", {
        get: function () {
            return this._min;
        },
        /**
         * Sets or gets the `min` property of the Calendar and
         * defines the minimum allowed date value.
         * By default, the `min` value is `1900-1-1`.
         */
        set: function (min) {
            this._min = min || new Date(defaults_1.MIN_DATE);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "max", {
        get: function () {
            return this._max;
        },
        /**
         * Sets or gets the `max` property of the Calendar and
         * defines the maximum allowed date value.
         * By default, the `max` value is `2099-12-31`.
         */
        set: function (max) {
            this._max = max || new Date(defaults_1.MAX_DATE);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "value", {
        /**
         * Sets or gets the `value` property of the Calendar and defines the selected value of the component.
         *
         * > The `value` has to be a valid
         * [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date)
         * instance when in `single` selection mode or an array of valid JavaScript Date instances when in `multiple` selection mode.
         */
        get: function () {
            return this._value;
        },
        set: function (candidate) {
            this.verifyValue(candidate);
            this._value = Array.isArray(candidate) ?
                candidate.filter(function (date) { return utils_1.isPresent(date); }).map(function (element) { return kendo_date_math_1.cloneDate(element); }) :
                kendo_date_math_1.cloneDate(candidate);
            var selection = [].concat(candidate).filter(function (date) { return utils_1.isPresent(date); }).map(function (date) { return kendo_date_math_1.cloneDate(date); });
            if (!util_1.areDatesEqual(selection, this.selectedDates)) {
                var lastSelected = util_1.last(selection);
                this.rangePivot = kendo_date_math_1.cloneDate(lastSelected);
                this.focusedDate = kendo_date_math_1.cloneDate(lastSelected) || this.focusedDate;
                this.selectedDates = selection;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "tabIndex", {
        get: function () {
            return this.tabindex;
        },
        /**
         * @hidden
         */
        set: function (tabIndex) {
            this.tabindex = tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "disabledDates", {
        /**
         * Sets the dates of the MultiViewCalendar that will be disabled
         * ([see example]({% slug disabled_dates_multiviewcalendar %})).
         */
        set: function (value) {
            this.disabledDatesService.initialize(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "selectionRange", {
        get: function () {
            return this._selectionRange;
        },
        /**
         * Sets or gets the `selectionRange` property of the Calendar and
         * defines the selection range of the component
         * ([see example]({% slug dates_multiviewcalendar %}#toc-selection-range)).
         */
        set: function (range) {
            this._selectionRange = range;
            if (this.disabledDatesRangeValidation) {
                this.onValidatorChange();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "cellTemplateRef", {
        /**
         * @hidden
         */
        set: function (template) {
            this.cellTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "monthCellTemplateRef", {
        /**
         * @hidden
         */
        set: function (template) {
            this.monthCellTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "yearCellTemplateRef", {
        /**
         * @hidden
         */
        set: function (template) {
            this.yearCellTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "decadeCellTemplateRef", {
        /**
         * @hidden
         */
        set: function (template) {
            this.decadeCellTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "centuryCellTemplateRef", {
        /**
         * @hidden
         */
        set: function (template) {
            this.centuryCellTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "weekNumberTemplateRef", {
        /**
         * @hidden
         */
        set: function (template) {
            this.weekNumberTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "headerTitleTemplateRef", {
        /**
         * @hidden
         */
        set: function (template) {
            this.headerTitleTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "activeViewEnum", {
        get: function () {
            var activeView = view_enum_1.CalendarViewEnum[this.activeView];
            return activeView < this.bottomViewEnum ? this.bottomViewEnum : activeView;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "bottomViewEnum", {
        get: function () {
            return view_enum_1.CalendarViewEnum[this.bottomView];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "topViewEnum", {
        get: function () {
            return view_enum_1.CalendarViewEnum[this.topView];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "widgetId", {
        get: function () {
            return this.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "widgetRole", {
        get: function () {
            return 'grid';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "calendarTabIndex", {
        get: function () {
            return this.disabled ? undefined : this.tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "ariaDisabled", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiViewCalendarComponent.prototype, "ariaActivedescendant", {
        get: function () {
            return this.cellUID + this.focusedDate.getTime();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.handleBlur = function () {
        this.onControlTouched();
        this.isActive = false;
        this.isHovered = false; //ensure that hovered is also not active
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.handleFocus = function () {
        this.isActive = true;
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.handleMouseEnter = function () {
        this.isHovered = true;
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.handleMouseLeave = function () {
        this.isHovered = false;
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.handleMousedown = function (event) {
        event.preventDefault();
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.handleClick = function () {
        if (this.isActive) {
            return;
        }
        this.focus();
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.keydown = function (event) {
        if (event.keyCode === kendo_angular_common_1.Keys.Enter) {
            this.performSelection(this.focusedDate, event);
        }
        var candidate = util_1.dateInRange(this.navigator.move(this.focusedDate, this.navigator.action(event), this.activeViewEnum), this.min, this.max);
        if (kendo_date_math_1.isEqual(this.focusedDate, candidate)) {
            return;
        }
        this.focusedDate = candidate;
        event.preventDefault();
    };
    MultiViewCalendarComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriptions.add(this.bus.viewChanged.subscribe(function (_a) {
            var view = _a.view;
            _this.activeView = view_enum_1.CalendarViewEnum[view];
            _this.activeViewChange.emit(_this.activeView);
            _this.cdr.detectChanges();
            _this.updateButtonState();
        }));
    };
    MultiViewCalendarComponent.prototype.ngOnChanges = function (changes) {
        this.verifyChanges();
        this.bus.configure(this.bottomViewEnum, this.topViewEnum);
        if (util_1.hasExistingValue(changes, 'focusedDate')) {
            var focusedDate = changes.focusedDate.currentValue;
            this.focusedDate = util_1.dateInRange(focusedDate, this.min, this.max);
        }
        if (changes.min || changes.max || changes.rangeValidation || changes.disabledDates || changes.disabledDatesRangeValidation) {
            this.minValidateFn = this.rangeValidation ? min_validator_1.minValidator(this.min) : util_1.noop;
            this.maxValidateFn = this.rangeValidation ? max_validator_1.maxValidator(this.max) : util_1.noop;
            this.disabledDatesRangeValidateFn = this.disabledDatesRangeValidation ? disabled_dates_range_validator_1.disabledDatesRangeValidator(this.disabledDatesService.isDateDisabled) : util_1.noop;
            this.onValidatorChange();
        }
        if (changes.min || changes.max || changes.focusedDate || changes.activeView) {
            this.updateButtonState();
        }
    };
    MultiViewCalendarComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    MultiViewCalendarComponent.prototype.ngAfterViewInit = function () {
        this.updateButtonState();
    };
    /**
     * Focuses the host element of the Calendar.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="multiviewcalendar.focus()">Focus calendar</button>
     *  <kendo-multiviewcalendar #multiviewcalendar></kendo-multiviewcalendar>
     * `
     * })
     * export class AppComponent { }
     * ```
     */
    MultiViewCalendarComponent.prototype.focus = function () {
        if (!this.element) {
            return;
        }
        this.element.nativeElement.focus();
    };
    /**
     * Blurs the Calendar component.
     */
    MultiViewCalendarComponent.prototype.blur = function () {
        if (!this.element) {
            return;
        }
        this.element.nativeElement.blur();
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.handleDateChange = function (args) {
        var _this = this;
        var canNavigateDown = this.bus.canMoveDown(this.activeViewEnum);
        var availableDates = args.selectedDates.filter(function (date) { return !_this.disabledDatesService.isDateDisabled(date); });
        this.focusedDate = args.focusedDate || this.focusedDate;
        var sameDates = !canNavigateDown && util_1.areDatesEqual(availableDates, this.selectedDates);
        if (this.disabled || sameDates) {
            return;
        }
        if (canNavigateDown) {
            this.bus.moveDown(this.activeViewEnum);
            return;
        }
        if (this.disabledDatesService.isDateDisabled(this.focusedDate)) {
            return;
        }
        this.selectedDates = availableDates.map(function (date) { return kendo_date_math_1.cloneDate(date); });
        this.value = this.parseSelectionToValue(availableDates);
        this.onControlChange(this.parseSelectionToValue(availableDates));
        this.valueChange.emit(this.parseSelectionToValue(availableDates));
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.setActiveDate = function (date) {
        this.activeDate = kendo_date_math_1.cloneDate(date);
        this.cdr.detectChanges();
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.writeValue = function (candidate) {
        this.verifyValue(candidate);
        this.value = candidate;
        this.cdr.markForCheck();
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.registerOnChange = function (fn) {
        this.onControlChange = fn;
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.registerOnTouched = function (fn) {
        this.onControlTouched = fn;
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.validate = function (control) {
        return this.minValidateFn(control) || this.maxValidateFn(control) || this.disabledDatesRangeValidateFn(this.selectionRange);
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.registerOnValidatorChange = function (fn) {
        this.onValidatorChange = fn;
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.activeCellTemplate = function () {
        switch (this.activeViewEnum) {
            case view_enum_1.CalendarViewEnum.month:
                return this.monthCellTemplate || this.cellTemplate;
            case view_enum_1.CalendarViewEnum.year:
                return this.yearCellTemplate;
            case view_enum_1.CalendarViewEnum.decade:
                return this.decadeCellTemplate;
            case view_enum_1.CalendarViewEnum.century:
                return this.centuryCellTemplate;
            default:
                return null;
        }
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.navigate = function (action) {
        this.focusedDate = this.viewList.navigate(action);
        this.updateButtonState();
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.emitCellEvent = function (emitter, args) {
        if (kendo_angular_common_1.hasObservers(emitter)) {
            this.zone.run(function () {
                emitter.emit(args);
            });
        }
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.handleCellClick = function (_a) {
        var date = _a.date, modifiers = _a.modifiers;
        this.performSelection(date, modifiers);
    };
    /**
     * @hidden
     */
    MultiViewCalendarComponent.prototype.handleWeekNumberClick = function (dates) {
        var _this = this;
        if (this.selection === 'single') {
            return;
        }
        this.zone.run(function () {
            _this.handleDateChange({
                selectedDates: dates,
                focusedDate: util_1.last(dates)
            });
        });
    };
    MultiViewCalendarComponent.prototype.setClasses = function (element) {
        this.renderer.addClass(element, 'k-widget');
        this.renderer.addClass(element, 'k-calendar');
        this.renderer.addClass(element, 'k-calendar-range');
    };
    MultiViewCalendarComponent.prototype.verifyChanges = function () {
        if (!core_1.isDevMode()) {
            return;
        }
        if (this.min > this.max) {
            throw new Error("The max value should be bigger than the min. See " + MIN_DOC_LINK + " and " + MAX_DOC_LINK + ".");
        }
        if (this.bottomViewEnum > this.topViewEnum) {
            throw new Error("The topView should be greater than bottomView. See " + BOTTOM_VIEW_DOC_LINK + " and " + TOP_VIEW_DOC_LINK + ".");
        }
    };
    MultiViewCalendarComponent.prototype.verifyValue = function (candidate) {
        if (!core_1.isDevMode()) {
            return;
        }
        if (this.selection === 'single' && candidate && !(candidate instanceof Date)) {
            throw new Error("The 'value' should be a valid JavaScript Date instance. Check " + VALUE_DOC_LINK + " for possible resolution.");
        }
        else if (this.selection === 'multiple' && candidate && Array.isArray(candidate)) {
            var onlyDates = candidate.every(function (value) { return value instanceof Date; });
            if (!onlyDates) {
                throw new Error("The 'value' should be an array of valid JavaScript Date instances. Check " + VALUE_DOC_LINK + " for possible resolution.");
            }
        }
    };
    MultiViewCalendarComponent.prototype.updateButtonState = function () {
        var _this = this;
        this.resolvedPromise.then(function () {
            _this.isPrevDisabled = !_this.viewList.canNavigate(_this.prevView);
            _this.isNextDisabled = !_this.viewList.canNavigate(_this.nextView);
            _this.cdr.markForCheck();
        });
    };
    MultiViewCalendarComponent.prototype.parseSelectionToValue = function (selection) {
        selection = selection || [];
        return this.selection === 'single' ? kendo_date_math_1.cloneDate(util_1.last(selection)) : selection.map(function (date) { return kendo_date_math_1.cloneDate(date); });
    };
    MultiViewCalendarComponent.prototype.performSelection = function (date, selectionModifiers) {
        var selection = this.selectionService.performSelection({
            date: date,
            modifiers: selectionModifiers,
            selectionMode: this.selection,
            activeViewEnum: this.activeViewEnum,
            rangePivot: this.rangePivot,
            selectedDates: this.selectedDates
        });
        this.rangePivot = selection.rangePivot;
        this.handleDateChange({
            selectedDates: selection.selectedDates,
            focusedDate: date
        });
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], MultiViewCalendarComponent.prototype, "id", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Date),
        tslib_1.__metadata("design:paramtypes", [Date])
    ], MultiViewCalendarComponent.prototype, "focusedDate", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Date),
        tslib_1.__metadata("design:paramtypes", [Date])
    ], MultiViewCalendarComponent.prototype, "min", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Date),
        tslib_1.__metadata("design:paramtypes", [Date])
    ], MultiViewCalendarComponent.prototype, "max", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], MultiViewCalendarComponent.prototype, "rangeValidation", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], MultiViewCalendarComponent.prototype, "disabledDatesRangeValidation", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], MultiViewCalendarComponent.prototype, "selection", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], MultiViewCalendarComponent.prototype, "value", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], MultiViewCalendarComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number)
    ], MultiViewCalendarComponent.prototype, "tabindex", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], MultiViewCalendarComponent.prototype, "tabIndex", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], MultiViewCalendarComponent.prototype, "isActive", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], MultiViewCalendarComponent.prototype, "disabledDates", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], MultiViewCalendarComponent.prototype, "activeView", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], MultiViewCalendarComponent.prototype, "bottomView", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], MultiViewCalendarComponent.prototype, "topView", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], MultiViewCalendarComponent.prototype, "showViewHeader", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], MultiViewCalendarComponent.prototype, "animateNavigation", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], MultiViewCalendarComponent.prototype, "weekNumber", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], MultiViewCalendarComponent.prototype, "activeRangeEnd", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], MultiViewCalendarComponent.prototype, "selectionRange", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number)
    ], MultiViewCalendarComponent.prototype, "views", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], MultiViewCalendarComponent.prototype, "activeViewChange", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], MultiViewCalendarComponent.prototype, "cellEnter", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], MultiViewCalendarComponent.prototype, "cellLeave", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], MultiViewCalendarComponent.prototype, "valueChange", void 0);
    tslib_1.__decorate([
        core_1.ContentChild(cell_template_directive_1.CellTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", cell_template_directive_1.CellTemplateDirective)
    ], MultiViewCalendarComponent.prototype, "cellTemplate", void 0);
    tslib_1.__decorate([
        core_1.Input('cellTemplate'),
        tslib_1.__metadata("design:type", cell_template_directive_1.CellTemplateDirective),
        tslib_1.__metadata("design:paramtypes", [cell_template_directive_1.CellTemplateDirective])
    ], MultiViewCalendarComponent.prototype, "cellTemplateRef", null);
    tslib_1.__decorate([
        core_1.ContentChild(month_cell_template_directive_1.MonthCellTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", month_cell_template_directive_1.MonthCellTemplateDirective)
    ], MultiViewCalendarComponent.prototype, "monthCellTemplate", void 0);
    tslib_1.__decorate([
        core_1.Input('monthCellTemplate'),
        tslib_1.__metadata("design:type", month_cell_template_directive_1.MonthCellTemplateDirective),
        tslib_1.__metadata("design:paramtypes", [month_cell_template_directive_1.MonthCellTemplateDirective])
    ], MultiViewCalendarComponent.prototype, "monthCellTemplateRef", null);
    tslib_1.__decorate([
        core_1.ContentChild(year_cell_template_directive_1.YearCellTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", year_cell_template_directive_1.YearCellTemplateDirective)
    ], MultiViewCalendarComponent.prototype, "yearCellTemplate", void 0);
    tslib_1.__decorate([
        core_1.Input('yearCellTemplate'),
        tslib_1.__metadata("design:type", year_cell_template_directive_1.YearCellTemplateDirective),
        tslib_1.__metadata("design:paramtypes", [year_cell_template_directive_1.YearCellTemplateDirective])
    ], MultiViewCalendarComponent.prototype, "yearCellTemplateRef", null);
    tslib_1.__decorate([
        core_1.ContentChild(decade_cell_template_directive_1.DecadeCellTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", decade_cell_template_directive_1.DecadeCellTemplateDirective)
    ], MultiViewCalendarComponent.prototype, "decadeCellTemplate", void 0);
    tslib_1.__decorate([
        core_1.Input('decadeCellTemplate'),
        tslib_1.__metadata("design:type", decade_cell_template_directive_1.DecadeCellTemplateDirective),
        tslib_1.__metadata("design:paramtypes", [decade_cell_template_directive_1.DecadeCellTemplateDirective])
    ], MultiViewCalendarComponent.prototype, "decadeCellTemplateRef", null);
    tslib_1.__decorate([
        core_1.ContentChild(century_cell_template_directive_1.CenturyCellTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", century_cell_template_directive_1.CenturyCellTemplateDirective)
    ], MultiViewCalendarComponent.prototype, "centuryCellTemplate", void 0);
    tslib_1.__decorate([
        core_1.Input('centuryCellTemplate'),
        tslib_1.__metadata("design:type", century_cell_template_directive_1.CenturyCellTemplateDirective),
        tslib_1.__metadata("design:paramtypes", [century_cell_template_directive_1.CenturyCellTemplateDirective])
    ], MultiViewCalendarComponent.prototype, "centuryCellTemplateRef", null);
    tslib_1.__decorate([
        core_1.ContentChild(weeknumber_cell_template_directive_1.WeekNumberCellTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", weeknumber_cell_template_directive_1.WeekNumberCellTemplateDirective)
    ], MultiViewCalendarComponent.prototype, "weekNumberTemplate", void 0);
    tslib_1.__decorate([
        core_1.Input('weekNumberTemplate'),
        tslib_1.__metadata("design:type", weeknumber_cell_template_directive_1.WeekNumberCellTemplateDirective),
        tslib_1.__metadata("design:paramtypes", [weeknumber_cell_template_directive_1.WeekNumberCellTemplateDirective])
    ], MultiViewCalendarComponent.prototype, "weekNumberTemplateRef", null);
    tslib_1.__decorate([
        core_1.ContentChild(header_title_template_directive_1.HeaderTitleTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", header_title_template_directive_1.HeaderTitleTemplateDirective)
    ], MultiViewCalendarComponent.prototype, "headerTitleTemplate", void 0);
    tslib_1.__decorate([
        core_1.Input('headerTitleTemplate'),
        tslib_1.__metadata("design:type", header_title_template_directive_1.HeaderTitleTemplateDirective),
        tslib_1.__metadata("design:paramtypes", [header_title_template_directive_1.HeaderTitleTemplateDirective])
    ], MultiViewCalendarComponent.prototype, "headerTitleTemplateRef", null);
    tslib_1.__decorate([
        core_1.ViewChild(horizontal_view_list_component_1.HorizontalViewListComponent, { static: false }),
        tslib_1.__metadata("design:type", horizontal_view_list_component_1.HorizontalViewListComponent)
    ], MultiViewCalendarComponent.prototype, "viewList", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('attr.id'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [])
    ], MultiViewCalendarComponent.prototype, "widgetId", null);
    tslib_1.__decorate([
        core_1.HostBinding('attr.role'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [])
    ], MultiViewCalendarComponent.prototype, "widgetRole", null);
    tslib_1.__decorate([
        core_1.HostBinding('attr.tabindex'),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], MultiViewCalendarComponent.prototype, "calendarTabIndex", null);
    tslib_1.__decorate([
        core_1.HostBinding('attr.aria-disabled'),
        core_1.HostBinding('class.k-state-disabled'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], MultiViewCalendarComponent.prototype, "ariaDisabled", null);
    tslib_1.__decorate([
        core_1.HostBinding('attr.aria-activedescendant'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [])
    ], MultiViewCalendarComponent.prototype, "ariaActivedescendant", null);
    tslib_1.__decorate([
        core_1.HostListener("blur"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], MultiViewCalendarComponent.prototype, "handleBlur", null);
    tslib_1.__decorate([
        core_1.HostListener("focus"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], MultiViewCalendarComponent.prototype, "handleFocus", null);
    tslib_1.__decorate([
        core_1.HostListener("mouseenter"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], MultiViewCalendarComponent.prototype, "handleMouseEnter", null);
    tslib_1.__decorate([
        core_1.HostListener("mouseleave"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], MultiViewCalendarComponent.prototype, "handleMouseLeave", null);
    tslib_1.__decorate([
        core_1.HostListener("mousedown", ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], MultiViewCalendarComponent.prototype, "handleMousedown", null);
    tslib_1.__decorate([
        core_1.HostListener("click"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], MultiViewCalendarComponent.prototype, "handleClick", null);
    tslib_1.__decorate([
        core_1.HostListener("keydown", ["$event"]),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], MultiViewCalendarComponent.prototype, "keydown", null);
    MultiViewCalendarComponent = tslib_1.__decorate([
        core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            exportAs: 'kendo-multiviewcalendar',
            providers: [
                bus_view_service_1.BusViewService,
                exports.RANGE_CALENDAR_VALUE_ACCESSOR,
                exports.RANGE_CALENDAR_RANGE_VALIDATORS,
                kendo_angular_l10n_1.LocalizationService,
                disabled_dates_service_1.DisabledDatesService,
                {
                    provide: kendo_angular_l10n_1.L10N_PREFIX,
                    useValue: 'kendo.multiviewcalendar'
                },
                navigation_service_1.NavigationService,
                selection_service_1.SelectionService
            ],
            selector: 'kendo-multiviewcalendar',
            template: "\n    <ng-container kendoMultiViewCalendarLocalizedMessages\n        i18n-today=\"kendo.multiviewcalendar.today|The label for the today button in the calendar header\"\n        today=\"Today\"\n\n        i18n-prevButtonTitle=\"kendo.multiviewcalendar.prevButtonTitle|The label for the previous button in the Multiview calendar\"\n        prevButtonTitle=\"Navigate to previous view\"\n\n        i18n-nextButtonTitle=\"kendo.multiviewcalendar.nextButtonTitle|The label for the next button in the Multiview calendar\"\n        nextButtonTitle=\"Navigate to next view\"\n    >\n    </ng-container>\n    <kendo-calendar-header\n        [activeView]=\"activeViewEnum\"\n        [currentDate]=\"activeDate\"\n        [min]=\"min\"\n        [max]=\"max\"\n        [rangeLength]=\"views\"\n        [templateRef]=\"headerTitleTemplate?.templateRef\"\n        [isPrevDisabled]=\"isPrevDisabled\"\n        [isNextDisabled]=\"isNextDisabled\"\n        [showNavigationButtons]=\"true\"\n        (todayButtonClick)=\"handleDateChange({ selectedDates: [$event], focusedDate: $event })\"\n        (prevButtonClick)=\"navigate(prevView)\"\n        (nextButtonClick)=\"navigate(nextView)\"\n    >\n    </kendo-calendar-header>\n    <kendo-calendar-horizontal\n        [activeView]=\"activeViewEnum\"\n        [isActive]=\"isActive || isHovered\"\n        [cellTemplateRef]=\"activeCellTemplate()?.templateRef\"\n        [weekNumberTemplateRef]=\"weekNumberTemplate?.templateRef\"\n        [cellUID]=\"cellUID\"\n        [views]=\"views\"\n        [min]=\"min\"\n        [max]=\"max\"\n        [focusedDate]=\"focusedDate\"\n        [animateNavigation]=\"animateNavigation\"\n        [showViewHeader]=\"showViewHeader\"\n        [weekNumber]=\"weekNumber\"\n        [activeRangeEnd]=\"activeRangeEnd\"\n        [selectionRange]=\"selectionRange\"\n        [selectedDates]=\"selectedDates\"\n        (valueChange)=\"handleDateChange($event)\"\n        (cellClick)=\"handleCellClick($event)\"\n        (weekNumberCellClick)=\"handleWeekNumberClick($event)\"\n        (cellEnter)=\"emitCellEvent(cellEnter, $event)\"\n        (cellLeave)=\"emitCellEvent(cellLeave, $event)\"\n        (activeDateChange)=\"setActiveDate($event)\"\n    >\n    </kendo-calendar-horizontal>\n  "
        }),
        tslib_1.__metadata("design:paramtypes", [bus_view_service_1.BusViewService,
            core_1.ElementRef,
            navigation_service_1.NavigationService,
            core_1.Renderer2,
            core_1.ChangeDetectorRef,
            core_1.NgZone,
            disabled_dates_service_1.DisabledDatesService,
            selection_service_1.SelectionService])
    ], MultiViewCalendarComponent);
    return MultiViewCalendarComponent;
}());
exports.MultiViewCalendarComponent = MultiViewCalendarComponent;
