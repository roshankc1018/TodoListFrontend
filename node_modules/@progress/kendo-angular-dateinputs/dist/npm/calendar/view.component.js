/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
var view_enum_1 = require("./models/view.enum");
var bus_view_service_1 = require("./services/bus-view.service");
var disabled_dates_service_1 = require("./services/disabled-dates.service");
var kendo_angular_intl_1 = require("@progress/kendo-angular-intl");
var kendo_date_math_1 = require("@progress/kendo-date-math");
var util_1 = require("../util");
var dom_queries_1 = require("../common/dom-queries");
var utils_1 = require("../common/utils");
/**
 * @hidden
 */
var ViewComponent = /** @class */ (function () {
    function ViewComponent(bus, intl, cdr, element, zone, renderer, disabledDatesService) {
        this.bus = bus;
        this.intl = intl;
        this.cdr = cdr;
        this.element = element;
        this.zone = zone;
        this.renderer = renderer;
        this.disabledDatesService = disabledDatesService;
        this.direction = 'vertical';
        this.isActive = true;
        this.selectedDates = [];
        this.cellClick = new core_1.EventEmitter();
        this.weekNumberCellClick = new core_1.EventEmitter();
        this.cellEnter = new core_1.EventEmitter();
        this.cellLeave = new core_1.EventEmitter();
        this.colSpan = 0;
        this.subscriptions = new rxjs_1.Subscription();
        this.domEvents = [];
        this.subscriptions.add(this.intl.changes.subscribe(this.intlChange.bind(this)));
        this.subscriptions.add(this.disabledDatesService.changes.subscribe(this.disabledDatesChange.bind(this)));
    }
    Object.defineProperty(ViewComponent.prototype, "weekNumber", {
        get: function () {
            return this.showWeekNumbers && this.activeView === view_enum_1.CalendarViewEnum.month;
        },
        set: function (showWeekNumbers) {
            this.showWeekNumbers = showWeekNumbers;
        },
        enumerable: true,
        configurable: true
    });
    ViewComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.element) {
            this.zone.runOutsideAngular(function () {
                _this.bindEvents();
            });
        }
    };
    ViewComponent.prototype.ngOnChanges = function (changes) {
        this.service = this.bus.service(this.activeView);
        if (!this.service) {
            return;
        }
        this.colSpan = this.service.rowLength({ prependCell: this.weekNumber });
        this.title = this.service.title(this.viewDate);
        this.updateData();
        if (changes.activeView) {
            this.currentCellIndex = null;
        }
    };
    ViewComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
        this.domEvents.forEach(function (unsubscribeCallback) { return unsubscribeCallback(); });
    };
    ViewComponent.prototype.isHorizontal = function () {
        return this.direction === 'horizontal';
    };
    ViewComponent.prototype.isMonthView = function () {
        return this.activeView === view_enum_1.CalendarViewEnum.month;
    };
    ViewComponent.prototype.shouldRenderCellContent = function (cellCtx) {
        return utils_1.isPresent(cellCtx) && !(!this.isHorizontal() && cellCtx.isOtherMonth);
    };
    ViewComponent.prototype.firstDate = function (rowCtx) {
        var ctx = this.firstWeekDateContext(rowCtx);
        return ctx ? ctx.value : null;
    };
    ViewComponent.prototype.getWeekNumber = function (date) {
        if (!this.weekNumber) {
            return null;
        }
        return kendo_date_math_1.weekInYear(date, this.intl.firstDay());
    };
    ViewComponent.prototype.getWeekNumberContext = function (rowCtx) {
        var ctx = this.firstWeekDateContext(rowCtx);
        if (!this.weekNumber || !ctx) {
            return null;
        }
        var weekNumber = kendo_date_math_1.weekInYear(ctx.value, this.intl.firstDay()).toString();
        return {
            formattedValue: weekNumber,
            id: null,
            isFocused: false,
            isSelected: false,
            isWeekend: false,
            title: weekNumber,
            value: kendo_date_math_1.cloneDate(ctx.value)
        };
    };
    ViewComponent.prototype.getStyles = function (context) {
        var isRangeEnd = context.isRangeEnd, isRangeStart = context.isRangeStart;
        var isEndActive = this.activeRangeEnd === 'end' && isRangeEnd;
        var isStartActive = this.activeRangeEnd === 'start' && isRangeStart;
        return util_1.stringifyClassObject({
            'k-range-end': !context.isOtherMonth && isRangeEnd,
            'k-range-mid': !context.isOtherMonth && context.isRangeMid,
            'k-range-split-end': !context.isOtherMonth && context.isRangeSplitEnd,
            'k-range-split-start': !context.isOtherMonth && context.isRangeSplitStart,
            'k-range-start': !context.isOtherMonth && isRangeStart,
            'k-state-active': isStartActive || isEndActive,
            'k-state-focused': !context.isOtherMonth && this.isActive && context.isFocused,
            'k-state-selected': !context.isOtherMonth && (context.isSelected || isRangeStart || isRangeEnd),
            'k-today': !context.isOtherMonth && context.isToday,
            'k-weekend': context.isWeekend,
            'k-state-disabled': context.isDisabled,
            'k-other-month': context.isOtherMonth
        });
    };
    ViewComponent.prototype.tableCellIndex = function (rowIndex, cellIndex) {
        return rowIndex + ":" + cellIndex;
    };
    ViewComponent.prototype.handleWeekNumberClick = function (week) {
        var _this = this;
        var availableDates = week.map(function (item) { return item.value; }).filter(function (date) { return !_this.disabledDatesService.isDateDisabled(date); });
        this.weekNumberCellClick.emit(availableDates);
    };
    ViewComponent.prototype.firstWeekDateContext = function (rowCtx) {
        if (!this.weekNumber) {
            return null;
        }
        var idx = 0;
        var ctx = this.shouldRenderCellContent(rowCtx[idx]) ? rowCtx[idx] : null;
        while (!ctx && idx < rowCtx.length) {
            var cellCtx = rowCtx[++idx];
            ctx = this.shouldRenderCellContent(cellCtx) ? cellCtx : null;
        }
        return ctx;
    };
    ViewComponent.prototype.updateData = function () {
        var time = util_1.last(this.selectedDates) || util_1.getToday();
        var viewDate = util_1.setTime(this.viewDate, time);
        this.data = this.service.data({
            cellUID: this.cellUID,
            focusedDate: this.focusedDate,
            isActiveView: !this.bus.canMoveDown(this.activeView),
            max: this.max,
            min: this.min,
            selectedDates: this.selectedDates,
            selectionRange: this.selectionRange,
            viewDate: viewDate,
            isDateDisabled: this.disabledDatesService.isDateDisabled,
            direction: this.direction
        });
    };
    ViewComponent.prototype.intlChange = function () {
        this.updateData();
        this.cdr.markForCheck();
    };
    ViewComponent.prototype.disabledDatesChange = function () {
        this.updateData();
        this.cdr.markForCheck();
    };
    ViewComponent.prototype.bindEvents = function () {
        var element = this.element.nativeElement;
        this.domEvents.push(this.renderer.listen(element, 'mouseover', this.cellMouseoverHandler.bind(this)), this.renderer.listen(element, 'mouseleave', this.mouseLeaveHandler.bind(this)), this.renderer.listen(element, 'click', this.clickHandler.bind(this)));
    };
    ViewComponent.prototype.clickHandler = function (args) {
        var cell = this.closestCell(args);
        if (!cell) {
            return;
        }
        var index = cell.getAttribute('data-cell-index');
        var cellContext = this.cellByIndex(index);
        if (!cellContext.isDisabled) {
            var ctrlKey = args.ctrlKey, metaKey = args.metaKey, shiftKey = args.shiftKey;
            this.cellClick.emit({
                date: cellContext.value,
                modifiers: { ctrlKey: ctrlKey, metaKey: metaKey, shiftKey: shiftKey }
            });
        }
    };
    ViewComponent.prototype.mouseLeaveHandler = function () {
        if (this.currentCellIndex) {
            this.emitCellLeave();
        }
    };
    ViewComponent.prototype.cellMouseoverHandler = function (args) {
        var cell = this.closestCell(args);
        if (cell) {
            var index = cell.getAttribute('data-cell-index');
            if (this.currentCellIndex && this.currentCellIndex !== index) {
                this.emitCellLeave();
            }
            var value = this.cellByIndex(index).value;
            this.cellEnter.emit(value);
            this.currentCellIndex = index;
        }
        else if (this.currentCellIndex) {
            this.emitCellLeave();
        }
    };
    ViewComponent.prototype.closestCell = function (eventArgs) {
        return dom_queries_1.closestInScope(eventArgs.target, function (node) { return node.hasAttribute('data-cell-index'); }, this.element.nativeElement);
    };
    ViewComponent.prototype.emitCellLeave = function () {
        var item = this.cellByIndex(this.currentCellIndex);
        if (item) {
            this.cellLeave.emit(item.value);
        }
        this.currentCellIndex = null;
    };
    ViewComponent.prototype.cellByIndex = function (index) {
        var _a = index.split(':'), rowIndex = _a[0], cellIndex = _a[1];
        return this.data[rowIndex][cellIndex];
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], ViewComponent.prototype, "direction", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], ViewComponent.prototype, "isActive", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number)
    ], ViewComponent.prototype, "activeView", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], ViewComponent.prototype, "cellUID", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Date)
    ], ViewComponent.prototype, "focusedDate", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Date)
    ], ViewComponent.prototype, "viewDate", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], ViewComponent.prototype, "activeRangeEnd", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], ViewComponent.prototype, "selectionRange", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Date)
    ], ViewComponent.prototype, "min", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Date)
    ], ViewComponent.prototype, "max", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array)
    ], ViewComponent.prototype, "selectedDates", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], ViewComponent.prototype, "weekNumber", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number)
    ], ViewComponent.prototype, "viewIndex", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", core_1.TemplateRef)
    ], ViewComponent.prototype, "templateRef", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", core_1.TemplateRef)
    ], ViewComponent.prototype, "weekNumberTemplateRef", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], ViewComponent.prototype, "cellClick", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], ViewComponent.prototype, "weekNumberCellClick", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], ViewComponent.prototype, "cellEnter", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], ViewComponent.prototype, "cellLeave", void 0);
    ViewComponent = tslib_1.__decorate([
        core_1.Component({
            selector: '[kendoCalendarView]',
            template: "\n    <ng-template #emptyCell><td class=\"k-empty k-calendar-td\">&nbsp;</td></ng-template>\n    <tr *ngIf=\"!isHorizontal()\" class=\"k-calendar-tr\" role=\"row\"><th class=\"k-calendar-caption\" scope=\"col\" [colSpan]=\"colSpan\">{{title}}</th></tr>\n    <tr *kFor=\"let row of data; let rowIndex = index\" class=\"k-calendar-tr\" role=\"row\">\n        <ng-template [ngIf]=\"weekNumber\">\n            <td\n                class=\"k-alt k-calendar-td\"\n                *ngIf=\"firstDate(row); else emptyCell\"\n                [kendoEventsOutsideAngular]=\"{\n                    click: handleWeekNumberClick.bind(this, row)\n                }\"\n            >\n                <ng-template [ngIf]=\"!weekNumberTemplateRef\">\n                    {{getWeekNumber(firstDate(row))}}\n                </ng-template>\n                <ng-template\n                    [ngIf]=\"weekNumberTemplateRef\"\n                    [ngTemplateOutlet]=\"weekNumberTemplateRef\"\n                    [ngTemplateOutletContext]=\"{\n                        $implicit: firstDate(row),\n                        cellContext: getWeekNumberContext(row)\n                    }\"\n                ></ng-template>\n            </td>\n        </ng-template>\n        <ng-container *kFor=\"let cell of row; let cellIndex = index\">\n            <td class=\"k-calendar-td\"\n                *ngIf=\"shouldRenderCellContent(cell); else emptyCell\"\n                role=\"gridcell\"\n                [attr.id]=\"cell.id\"\n                [attr.data-cell-index]=\"tableCellIndex(rowIndex, cellIndex)\"\n                [attr.aria-selected]=\"cell.isSelected || cell.isRangeStart || cell.isRangeMid || cell.isRangeEnd\"\n                [attr.aria-disabled]=\"cell.isDisabled\"\n                [ngClass]=\"getStyles(cell)\"\n                [title]=\"cell.title\"\n            >\n                <span class=\"k-link\">\n                    <ng-template [ngIf]=\"!templateRef\">{{cell.formattedValue}}</ng-template>\n                    <ng-template\n                        *ngIf=\"templateRef\"\n                        [ngTemplateOutlet]=\"templateRef\"\n                        [ngTemplateOutletContext]=\"{ $implicit: cell.value, cellContext: cell }\"\n                    ></ng-template>\n                </span>\n            </td>\n        </ng-container>\n    </tr>\n  "
        }),
        tslib_1.__metadata("design:paramtypes", [bus_view_service_1.BusViewService,
            kendo_angular_intl_1.IntlService,
            core_1.ChangeDetectorRef,
            core_1.ElementRef,
            core_1.NgZone,
            core_1.Renderer2,
            disabled_dates_service_1.DisabledDatesService])
    ], ViewComponent);
    return ViewComponent;
}());
exports.ViewComponent = ViewComponent;
