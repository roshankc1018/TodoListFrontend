/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/* tslint:disable:component-selector-name  component-selector-type */
var core_1 = require("@angular/core");
var kendo_date_math_1 = require("@progress/kendo-date-math");
var bus_view_service_1 = require("./services/bus-view.service");
var weeknames_service_1 = require("./services/weeknames.service");
var kendo_angular_intl_1 = require("@progress/kendo-angular-intl");
var navigation_action_enum_1 = require("./models/navigation-action.enum");
var view_enum_1 = require("./models/view.enum");
var defaults_1 = require("../defaults");
var util_1 = require("../util");
var kendo_angular_common_1 = require("@progress/kendo-angular-common");
var utils_1 = require("../common/utils");
var DEFAULT_VIEWS_LENGTH = 2;
/**
 * @hidden
 */
var HorizontalViewListComponent = /** @class */ (function () {
    function HorizontalViewListComponent(bus, intl, weekService, cdr, element, renderer) {
        this.bus = bus;
        this.intl = intl;
        this.weekService = weekService;
        this.cdr = cdr;
        this.element = element;
        this.renderer = renderer;
        this.activeView = view_enum_1.CalendarViewEnum.month;
        this.isActive = true;
        this.min = new Date(defaults_1.MIN_DATE);
        this.max = new Date(defaults_1.MAX_DATE);
        this.selectedDates = [];
        this.views = DEFAULT_VIEWS_LENGTH;
        this.showViewHeader = false;
        this.animateNavigation = false;
        this.cellClick = new core_1.EventEmitter();
        this.weekNumberCellClick = new core_1.EventEmitter();
        this.cellEnter = new core_1.EventEmitter();
        this.cellLeave = new core_1.EventEmitter();
        this.activeDateChange = new core_1.EventEmitter();
        this.getComponentClass = true;
        this.weekNames = [];
        this.dates = [];
        this.intlSubscription = this.intl.changes.subscribe(this.intlChange.bind(this));
    }
    Object.defineProperty(HorizontalViewListComponent.prototype, "weekNumber", {
        get: function () {
            return this.showWeekNumbers && this.isMonthView();
        },
        set: function (showWeekNumbers) {
            this.showWeekNumbers = showWeekNumbers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HorizontalViewListComponent.prototype, "getComponentMonthClass", {
        get: function () {
            return this.activeView === view_enum_1.CalendarViewEnum.month;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HorizontalViewListComponent.prototype, "getComponentYearClass", {
        get: function () {
            return this.activeView === view_enum_1.CalendarViewEnum.year;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HorizontalViewListComponent.prototype, "getComponentDecadeClass", {
        get: function () {
            return this.activeView === view_enum_1.CalendarViewEnum.decade;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HorizontalViewListComponent.prototype, "getComponentCenturyClass", {
        get: function () {
            return this.activeView === view_enum_1.CalendarViewEnum.century;
        },
        enumerable: true,
        configurable: true
    });
    HorizontalViewListComponent.prototype.ngOnChanges = function (changes) {
        this.initService();
        if (this.weekNames.length === 0 || changes.weekNumber) {
            this.weekNames = this.weekService.getWeekNames(this.weekNumber);
        }
        if (!this.service) {
            return;
        }
        this.views = this.views || DEFAULT_VIEWS_LENGTH;
        var focusedDate = this.focusedDate;
        var viewDate = this.clampDate(this.service.viewDate(focusedDate, this.max, this.views));
        this.skip = this.service.skip(viewDate, this.min);
        this.total = this.service.total(this.min, this.max);
        var activeViewChanged = util_1.hasChange(changes, 'activeView');
        var viewsHasChanged = this.views > 0 && util_1.hasChange(changes, 'views');
        if (activeViewChanged || !this.isInDates(focusedDate) || viewsHasChanged || !this.activeDate) {
            this.dates = this.service.datesList(viewDate, this.getTake(this.skip));
            this.activeDate = kendo_date_math_1.cloneDate(this.dates[0]);
            this.activeDateChange.emit(this.activeDate);
        }
    };
    HorizontalViewListComponent.prototype.ngAfterViewInit = function () {
        // make the calendar look the same in the different browsers
        // which also smoothens the navigation animation
        if (this.views === 1) {
            this.setTableMinWidth();
        }
    };
    HorizontalViewListComponent.prototype.ngOnDestroy = function () {
        this.intlSubscription.unsubscribe();
    };
    HorizontalViewListComponent.prototype.initService = function () {
        this.service = this.bus.service(this.activeView);
    };
    HorizontalViewListComponent.prototype.isMonthView = function () {
        return this.activeView === view_enum_1.CalendarViewEnum.month;
    };
    HorizontalViewListComponent.prototype.getCaptionTitle = function (date) {
        return this.service.title(date);
    };
    HorizontalViewListComponent.prototype.getCaptionClass = function () {
        return this.isMonthView() ? 'k-month-header' : 'k-meta-header';
    };
    HorizontalViewListComponent.prototype.animateView = function (action) {
        var _this = this;
        var container = this.element.nativeElement;
        var table = container.querySelector('table');
        // the whole width excluding padding/margin
        var initialContainerWidth = parseFloat(getComputedStyle(container).width);
        // table width
        var tableWidth = parseFloat(getComputedStyle(table).width);
        this.renderer.setStyle(container, 'width', initialContainerWidth + "px");
        this.renderer.setStyle(container, 'overflow', 'visible');
        // initialize an additional view for the animation
        if (action === navigation_action_enum_1.Action.NextView) {
            // animating Action.NextView requires adding an additional view before the rendered views
            this.nextAnimationDate = kendo_date_math_1.cloneDate(this.dates[0]);
        }
        else {
            // animating Action.PrevView requires adding an additional view after the rendered views
            this.prevAnimationDate = kendo_date_math_1.cloneDate(this.dates[this.dates.length - 1]);
        }
        // run cdr to render the additional view
        this.cdr.detectChanges();
        container.querySelectorAll('table').forEach(function (table) {
            _this.renderer.setStyle(table, 'width', tableWidth + "px");
            if (_this.views === 1) {
                _this.renderer.setStyle(table, 'min-width', initialContainerWidth + "px");
            }
        });
        // we always slide by the width of 1 table
        // cross-browser compatibility is ensured by measuring the client rectangle and substracting the gap
        var tabRect = table.getBoundingClientRect();
        var containerGap = parseFloat(getComputedStyle(container).columnGap);
        var start = action === navigation_action_enum_1.Action.NextView ? 'translateX(0)' : "translateX(-" + (tabRect.width + containerGap) + "px)";
        var end = action === navigation_action_enum_1.Action.NextView ? "translateX(-" + (tabRect.width + containerGap) + "px)" : 'translateX(0)';
        if (!this.animation) {
            this.animation = container.animate([
                { transform: start },
                { transform: end }
            ], {
                duration: 500,
                easing: 'ease-out'
            });
            this.animation.oncancel = this.animation.onfinish = function () {
                // clear all inline styles
                _this.renderer.removeStyle(container, 'width');
                _this.renderer.removeStyle(container, 'overflow');
                container.querySelectorAll('table').forEach(function (table) {
                    _this.renderer.removeStyle(table, 'width');
                });
                // clear the animation and the animation view
                _this.animation = null;
                _this.nextAnimationDate = null;
                _this.prevAnimationDate = null;
                // run cdr to remove additional animation view from the markup
                _this.cdr.detectChanges();
            };
        }
        else {
            // if animation is already running, cancel it and show the end navigation result on multiple prev/next button clicks
            this.animation.cancel();
        }
    };
    HorizontalViewListComponent.prototype.navigate = function (action) {
        if (this.animateNavigation && kendo_angular_common_1.isDocumentAvailable() && utils_1.isPresent(this.element.nativeElement.animate)) {
            this.animateView(action);
        }
        var candidate = this.move(action);
        var list = this.service.datesList(candidate, this.getTake(this.skip));
        if (this.isListInRange(list)) {
            this.dates = list;
        }
        this.activeDate = kendo_date_math_1.cloneDate(this.dates[0]);
        this.focusedDate = kendo_date_math_1.cloneDate(candidate);
        this.cdr.markForCheck();
        this.activeDateChange.emit(this.activeDate);
        return kendo_date_math_1.cloneDate(candidate);
    };
    HorizontalViewListComponent.prototype.canNavigate = function (action) {
        if (!this.service) {
            return false;
        }
        return this.isListInRange(this.service.datesList(this.move(action), this.getTake(this.skip)));
    };
    HorizontalViewListComponent.prototype.setTableMinWidth = function () {
        var container = this.element.nativeElement;
        var table = container.querySelector('table');
        if (table) {
            var containerWidth = parseFloat(getComputedStyle(container).width);
            this.renderer.setStyle(table, 'min-width', containerWidth + "px");
        }
    };
    HorizontalViewListComponent.prototype.intlChange = function () {
        this.weekNames = this.weekService.getWeekNames(this.weekNumber);
        this.cdr.markForCheck();
    };
    HorizontalViewListComponent.prototype.clampDate = function (value) {
        return util_1.dateInRange(value, this.min, this.max);
    };
    HorizontalViewListComponent.prototype.move = function (action) {
        return this.service.move(this.dates[0] || this.focusedDate, action);
    };
    HorizontalViewListComponent.prototype.isListInRange = function (list) {
        var lowerBound = this.service.beginningOfPeriod(this.min);
        var upperBound = this.service.beginningOfPeriod(this.service.addToDate(this.max, 1));
        return lowerBound <= list[0] && list[list.length - 1] < upperBound;
    };
    HorizontalViewListComponent.prototype.isInDates = function (value) {
        return this.service.isInArray(value, this.dates);
    };
    HorizontalViewListComponent.prototype.getTake = function (skip) {
        return Math.min(this.total - skip, this.views);
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", core_1.TemplateRef)
    ], HorizontalViewListComponent.prototype, "cellTemplateRef", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", core_1.TemplateRef)
    ], HorizontalViewListComponent.prototype, "weekNumberTemplateRef", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], HorizontalViewListComponent.prototype, "activeRangeEnd", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number)
    ], HorizontalViewListComponent.prototype, "activeView", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], HorizontalViewListComponent.prototype, "cellUID", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Date)
    ], HorizontalViewListComponent.prototype, "focusedDate", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], HorizontalViewListComponent.prototype, "isActive", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Date)
    ], HorizontalViewListComponent.prototype, "min", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Date)
    ], HorizontalViewListComponent.prototype, "max", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], HorizontalViewListComponent.prototype, "selectionRange", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array)
    ], HorizontalViewListComponent.prototype, "selectedDates", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number)
    ], HorizontalViewListComponent.prototype, "views", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], HorizontalViewListComponent.prototype, "showViewHeader", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], HorizontalViewListComponent.prototype, "animateNavigation", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], HorizontalViewListComponent.prototype, "weekNumber", null);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], HorizontalViewListComponent.prototype, "cellClick", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], HorizontalViewListComponent.prototype, "weekNumberCellClick", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], HorizontalViewListComponent.prototype, "cellEnter", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], HorizontalViewListComponent.prototype, "cellLeave", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], HorizontalViewListComponent.prototype, "activeDateChange", void 0);
    tslib_1.__decorate([
        core_1.HostBinding("class.k-calendar-view"),
        core_1.HostBinding("class.k-justify-align-start"),
        tslib_1.__metadata("design:type", Boolean)
    ], HorizontalViewListComponent.prototype, "getComponentClass", void 0);
    tslib_1.__decorate([
        core_1.HostBinding("class.k-calendar-monthview"),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], HorizontalViewListComponent.prototype, "getComponentMonthClass", null);
    tslib_1.__decorate([
        core_1.HostBinding("class.k-calendar-yearview"),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], HorizontalViewListComponent.prototype, "getComponentYearClass", null);
    tslib_1.__decorate([
        core_1.HostBinding("class.k-calendar-decadeview"),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], HorizontalViewListComponent.prototype, "getComponentDecadeClass", null);
    tslib_1.__decorate([
        core_1.HostBinding("class.k-calendar-centuryview"),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], HorizontalViewListComponent.prototype, "getComponentCenturyClass", null);
    HorizontalViewListComponent = tslib_1.__decorate([
        core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: 'kendo-calendar-horizontal',
            template: "\n        <ng-template #tableTemplate let-date=\"date\" let-class=\"className\">\n            <table\n                class=\"k-content k-calendar-content k-calendar-table\"\n                [ngClass]=\"class\"\n            >\n                <caption *ngIf=\"showViewHeader\" [ngClass]=\"getCaptionClass()\">{{ getCaptionTitle(date) }}</caption>\n                <thead *ngIf=\"isMonthView()\" class=\"k-calendar-thead\">\n                    <tr class=\"k-calendar-tr\" role=\"row\">\n                        <th *ngFor=\"let name of weekNames\" class=\"k-calendar-th\">{{name}}</th>\n                    </tr>\n                </thead>\n                <tbody\n                    class=\"k-calendar-tbody\"\n                    kendoCalendarView\n                    role=\"rowgroup\"\n                    direction=\"horizontal\"\n                    [activeView]=\"activeView\"\n                    [isActive]=\"isActive\"\n                    [min]=\"min\"\n                    [max]=\"max\"\n                    [cellUID]=\"cellUID\"\n                    [focusedDate]=\"focusedDate\"\n                    [selectedDates]=\"selectedDates\"\n                    [selectionRange]=\"selectionRange\"\n                    [activeRangeEnd]=\"activeRangeEnd\"\n                    [weekNumber]=\"weekNumber\"\n                    [templateRef]=\"cellTemplateRef\"\n                    [weekNumberTemplateRef]=\"weekNumberTemplateRef\"\n                    [viewDate]=\"date\"\n                    (cellClick)=\"cellClick.emit($event)\"\n                    (weekNumberCellClick)=\"weekNumberCellClick.emit($event)\"\n                    (cellEnter)=\"cellEnter.emit($event)\"\n                    (cellLeave)=\"cellLeave.emit($event)\"\n                >\n                </tbody>\n            </table>\n        </ng-template>\n\n        <!-- When Next is clicked a placeholder table is rendered before the Main Table -->\n        <ng-template\n            *ngIf=\"nextAnimationDate\"\n            [ngTemplateOutlet]=\"tableTemplate\"\n            [ngTemplateOutletContext]=\"{\n                date: nextAnimationDate,\n                className: 'k-pointer-events-none'\n            }\"\n        >\n        </ng-template>\n\n        <ng-template\n            *kFor=\"let date of dates\"\n            [ngTemplateOutlet]=\"tableTemplate\"\n            [ngTemplateOutletContext]=\"{\n                date: date\n            }\"\n        >\n        </ng-template>\n\n        <!-- When Prev is clicked a placeholder table is rendered after the Main Table -->\n        <ng-template\n            *ngIf=\"prevAnimationDate\"\n            [ngTemplateOutlet]=\"tableTemplate\"\n            [ngTemplateOutletContext]=\"{\n                date: prevAnimationDate,\n                className: 'k-pointer-events-none'\n            }\"\n        >\n        </ng-template>\n    "
        }),
        tslib_1.__metadata("design:paramtypes", [bus_view_service_1.BusViewService,
            kendo_angular_intl_1.IntlService,
            weeknames_service_1.WeekNamesService,
            core_1.ChangeDetectorRef,
            core_1.ElementRef,
            core_1.Renderer2])
    ], HorizontalViewListComponent);
    return HorizontalViewListComponent;
}());
exports.HorizontalViewListComponent = HorizontalViewListComponent;
