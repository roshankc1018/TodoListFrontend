/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
/* tslint:disable:no-forward-ref */
import { Component, ChangeDetectorRef, ChangeDetectionStrategy, ContentChild, EventEmitter, ElementRef, Renderer2, isDevMode, forwardRef, HostBinding, Input, Output, ViewChild, Optional, NgZone, Injector } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, NgControl } from '@angular/forms';
import { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';
import { cloneDate, isEqual } from '@progress/kendo-date-math';
import { hasObservers, KendoInput, guid, Keys } from '@progress/kendo-angular-common';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from '../package-metadata';
import { NavigationComponent } from './navigation.component';
import { ViewListComponent } from './view-list.component';
import { CalendarDOMService } from './services/dom.service';
import { BusViewService } from './services/bus-view.service';
import { NavigationService } from './services/navigation.service';
import { DisabledDatesService } from './services/disabled-dates.service';
import { SelectionService } from './services/selection.service';
import { ScrollSyncService } from './services/scroll-sync.service';
import { CellTemplateDirective } from './templates/cell-template.directive';
import { MonthCellTemplateDirective } from './templates/month-cell-template.directive';
import { YearCellTemplateDirective } from './templates/year-cell-template.directive';
import { DecadeCellTemplateDirective } from './templates/decade-cell-template.directive';
import { CenturyCellTemplateDirective } from './templates/century-cell-template.directive';
import { WeekNumberCellTemplateDirective } from './templates/weeknumber-cell-template.directive';
import { HeaderTitleTemplateDirective } from './templates/header-title-template.directive';
import { NavigationItemTemplateDirective } from './templates/navigation-item-template.directive';
import { PickerService } from '../common/picker.service';
import { CalendarViewEnum } from './models/view.enum';
import { minValidator } from '../validators/min.validator';
import { maxValidator } from '../validators/max.validator';
import { MIN_DATE, MAX_DATE } from '../defaults';
import { areDatesEqual, dateInRange, getToday, hasExistingValue, last, noop } from '../util';
import { closest } from '../common/dom-queries';
import { requiresZoneOnBlur, preventDefault, isPresent } from '../common/utils';
import { from as fromPromise } from 'rxjs';
var BOTTOM_VIEW_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-bottomview';
var TOP_VIEW_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-topview';
var MIN_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-min';
var MAX_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-max';
var VALUE_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/calendar/#toc-using-with-json';
var virtualizationProp = function (x) { return x ? x.virtualization : null; };
var ɵ0 = virtualizationProp;
/**
 * @hidden
 */
export var CALENDAR_VALUE_ACCESSOR = {
    multi: true,
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return CalendarComponent; }) //tslint:disable-line:no-use-before-declare
};
/**
 * @hidden
 */
export var CALENDAR_RANGE_VALIDATORS = {
    multi: true,
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return CalendarComponent; }) //tslint:disable-line:no-use-before-declare
};
/**
 * @hidden
 */
export var KENDO_INPUT_PROVIDER = {
    provide: KendoInput,
    useExisting: forwardRef(function () { return CalendarComponent; }) //tslint:disable-line:no-use-before-declare
};
/**
 * Represents the [Kendo UI Calendar component for Angular]({% slug overview_calendar %}#toc-basic-usage).
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-calendar></kendo-calendar>
 * `
 * })
 * export class AppComponent { }
 * ```
 */
var CalendarComponent = /** @class */ (function () {
    function CalendarComponent(bus, dom, element, navigator, renderer, cdr, ngZone, injector, scrollSyncService, disabledDatesService, localization, selectionService, pickerService) {
        this.bus = bus;
        this.dom = dom;
        this.element = element;
        this.navigator = navigator;
        this.renderer = renderer;
        this.cdr = cdr;
        this.ngZone = ngZone;
        this.injector = injector;
        this.scrollSyncService = scrollSyncService;
        this.disabledDatesService = disabledDatesService;
        this.localization = localization;
        this.selectionService = selectionService;
        this.pickerService = pickerService;
        /**
         * @hidden
         */
        this.id = guid();
        /**
         * Determines whether the built-in min or max validators are enforced when validating a form.
         */
        this.rangeValidation = false;
        /**
         * Sets the Calendar selection mode
         * ([see example]({% slug multiple_selection_calendar %})).
         *
         * The available values are:
         * * `single` (default)
         * * `multiple`
         */
        this.selection = 'single';
        /**
         * Sets or gets the `disabled` property of the Calendar and
         * determines whether the component is active
         * ([see example]({% slug disabled_calendar %})).
         */
        this.disabled = false;
        /**
         * Sets or gets the `tabindex` property of the Calendar. Based on the
         * [HTML `tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) behavior,
         * it determines whether the component is focusable.
         */
        this.tabindex = 0;
        /**
         * Sets or gets the `navigation` property of the Calendar
         * and determines whether the navigation side-bar will be displayed
         * ([see example]({% slug sidebar_calendar %})).
         * Applies to the [`infinite`]({% slug api_dateinputs_calendarcomponent %}#toc-type) Calendar only.
         */
        this.navigation = true;
        /**
         * Defines the active view that the Calendar initially renders
         * ([see example]({% slug activeview_calendar %})).
         * By default, the active view is `month`.
         *
         * > You have to set `activeView` within the `topView`-`bottomView` range.
         */
        this.activeView = CalendarViewEnum[CalendarViewEnum.month];
        /**
         * Defines the bottommost view to which the user can navigate
         * ([see example]({% slug dates_calendar %}#toc-partial-dates)).
         */
        this.bottomView = CalendarViewEnum[CalendarViewEnum.month];
        /**
         * Defines the topmost view to which the user can navigate
         * ([see example]({% slug sidebar_calendar %}#toc-partial-dates)).
         */
        this.topView = CalendarViewEnum[CalendarViewEnum.century];
        /**
         * Determines whether to enable animation when navigating to previous/next view.
         * Applies to the [`classic`]({% slug api_dateinputs_calendarcomponent %}#toc-type) Calendar only.
         *
         * > This feature uses the [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API). In order to run the animation in browsers that do not support it, you need the `web-animations-js` polyfill.
         *
         * @default false
         */
        this.animateNavigation = false;
        /**
         * Determines whether to display a week number column in the `month` view
         * ([see example]({% slug weeknumcolumn_calendar %})).
         */
        this.weekNumber = false;
        /**
         * Fires when the active view is changed
         * ([more information and example]({% slug overview_calendar %}#toc-events)).
         */
        this.activeViewChange = new EventEmitter();
        /**
         * Fires when the active view date is changed
         * ([more information and example]({% slug overview_calendar %}#toc-events)).
         * Applies to the [`infinite`]({% slug api_dateinputs_calendarcomponent %}#toc-type) Calendar only.
         */
        this.activeViewDateChange = new EventEmitter();
        /**
         * Fires when the value is changed
         * ([more information and example]({% slug overview_calendar %}#toc-events)).
         */
        this.valueChange = new EventEmitter();
        this.isActive = false;
        this.cellUID = guid();
        this.selectedDates = [];
        this._min = new Date(MIN_DATE);
        this._max = new Date(MAX_DATE);
        this._focusedDate = getToday();
        this.onControlChange = noop;
        this.onControlTouched = noop;
        this.onValidatorChange = noop;
        this.minValidateFn = noop;
        this.maxValidateFn = noop;
        this.syncNavigation = true;
        this._type = 'infinite';
        this.domEvents = [];
        this.resolvedPromise = Promise.resolve(null);
        this.destroyed = false;
        validatePackage(packageMetadata);
        this.setClasses(element.nativeElement);
        if (this.pickerService) {
            this.pickerService.calendar = this;
        }
    }
    Object.defineProperty(CalendarComponent.prototype, "focusedDate", {
        get: function () {
            return this._focusedDate;
        },
        /**
         * Sets or gets the `focusedDate` property of the Calendar and
         * defines the focused date of the component
         * ([see example]({% slug dates_calendar %}#toc-focused-dates)).
         *
         * > If the Calendar is out of the min or max range, it normalizes the defined `focusedDate`.
         */
        set: function (focusedDate) {
            this._focusedDate = focusedDate || getToday();
            this.setAriaActivedescendant();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "min", {
        get: function () {
            return this._min;
        },
        /**
         * Sets or gets the `min` property of the Calendar and
         * defines the minimum allowed date value
         * ([see example]({% slug dateranges_calendar %})).
         * By default, the `min` value is `1900-1-1`.
         */
        set: function (min) {
            this._min = min || new Date(MIN_DATE);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "max", {
        get: function () {
            return this._max;
        },
        /**
         * Sets or gets the `max` property of the Calendar and
         * defines the maximum allowed date value
         * ([see example]({% slug dateranges_calendar %})).
         * By default, the `max` value is `2099-12-31`.
         */
        set: function (max) {
            this._max = max || new Date(MAX_DATE);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "value", {
        /**
         * Sets or gets the `value` property of the Calendar and defines the selected value of the component.
         *
         * > The `value` has to be a valid
         * [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date)
         * instance when in `single` selection mode or an array of valid JavaScript Date instances when in `multiple` selection mode.
         */
        get: function () {
            return this._value;
        },
        set: function (candidate) {
            this.verifyValue(candidate);
            this._value = Array.isArray(candidate) ?
                candidate.filter(function (date) { return isPresent(date); }).map(function (element) { return cloneDate(element); }) :
                cloneDate(candidate);
            var selection = [].concat(candidate).filter(function (date) { return isPresent(date); }).map(function (date) { return cloneDate(date); });
            if (!areDatesEqual(selection, this.selectedDates)) {
                var lastSelected = last(selection);
                this.rangePivot = cloneDate(lastSelected);
                this.focusedDate = cloneDate(lastSelected) || this.focusedDate;
                this.selectedDates = selection;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "tabIndex", {
        get: function () {
            return this.tabindex;
        },
        /**
         * @hidden
         */
        set: function (tabIndex) {
            this.tabindex = tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "disabledDates", {
        /**
         * Sets the dates of the Calendar that will be disabled
         * ([see example]({% slug disabled_dates_calendar %})).
         */
        set: function (value) {
            this.disabledDatesService.initialize(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "type", {
        get: function () {
            return this._type;
        },
        /**
         * Specifies the Calendar type.
         *
         * The possible values are:
         * - `infinite` (default)
         * - `classic`
         *
         */
        set: function (type) {
            this.renderer.removeClass(this.element.nativeElement, "k-calendar-" + this.type);
            this.renderer.addClass(this.element.nativeElement, "k-calendar-" + type);
            this._type = type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "cellTemplateRef", {
        /**
         * @hidden
         */
        set: function (template) {
            this.cellTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "monthCellTemplateRef", {
        /**
         * @hidden
         */
        set: function (template) {
            this.monthCellTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "yearCellTemplateRef", {
        /**
         * @hidden
         */
        set: function (template) {
            this.yearCellTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "decadeCellTemplateRef", {
        /**
         * @hidden
         */
        set: function (template) {
            this.decadeCellTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "centuryCellTemplateRef", {
        /**
         * @hidden
         */
        set: function (template) {
            this.centuryCellTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "weekNumberTemplateRef", {
        /**
         * @hidden
         */
        set: function (template) {
            this.weekNumberTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "headerTitleTemplateRef", {
        /**
         * @hidden
         */
        set: function (template) {
            this.headerTitleTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "navigationItemTemplateRef", {
        /**
         * @hidden
         */
        set: function (template) {
            this.navigationItemTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "activeViewEnum", {
        get: function () {
            var activeView = CalendarViewEnum[this.activeView];
            return activeView < this.bottomViewEnum ? this.bottomViewEnum : activeView;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "bottomViewEnum", {
        get: function () {
            return CalendarViewEnum[this.bottomView];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "topViewEnum", {
        get: function () {
            return CalendarViewEnum[this.topView];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "widgetId", {
        get: function () {
            return this.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "widgetRole", {
        get: function () {
            return 'grid';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "calendarTabIndex", {
        get: function () {
            return this.disabled ? undefined : this.tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "ariaDisabled", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    CalendarComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dom.calculateHeights(this.element.nativeElement);
        this.scrollSyncService.configure(this.activeViewEnum);
        this.localizationChangeSubscription = this.localization.changes.subscribe(function () { return _this.cdr.markForCheck(); });
        this.viewChangeSubscription = this.bus.viewChanged.subscribe(function (_a) {
            var view = _a.view;
            return _this.handleActiveViewChange(CalendarViewEnum[view]);
        });
        this.control = this.injector.get(NgControl, null);
        if (this.element) {
            this.ngZone.runOutsideAngular(function () {
                _this.bindEvents();
            });
        }
    };
    CalendarComponent.prototype.ngOnChanges = function (changes) {
        this.verifyChanges();
        this.bus.configure(this.bottomViewEnum, this.topViewEnum);
        this.scrollSyncService.configure(this.activeViewEnum);
        if (hasExistingValue(changes, 'focusedDate')) {
            var focusedDate = changes.focusedDate.currentValue;
            this.focusedDate = dateInRange(focusedDate, this.min, this.max);
        }
        if (changes.navigation) {
            this.syncNavigation = true;
        }
        if (changes.min || changes.max || changes.rangeValidation) {
            this.minValidateFn = this.rangeValidation ? minValidator(this.min) : noop;
            this.maxValidateFn = this.rangeValidation ? maxValidator(this.max) : noop;
            this.onValidatorChange();
        }
    };
    CalendarComponent.prototype.ngAfterViewInit = function () {
        this.setAriaActivedescendant();
    };
    CalendarComponent.prototype.ngAfterViewChecked = function () {
        if (!this.syncNavigation) {
            return;
        }
        this.syncNavigation = false;
        this.scrollSyncService.sync(virtualizationProp(this.navigationView), virtualizationProp(this.monthView));
    };
    CalendarComponent.prototype.ngOnDestroy = function () {
        this.scrollSyncService.destroy();
        this.viewChangeSubscription.unsubscribe();
        this.domEvents.forEach(function (unbindCallback) { return unbindCallback(); });
        if (this.pickerService) {
            this.pickerService.calendar = null;
        }
        if (this.pageChangeSubscription) {
            this.pageChangeSubscription.unsubscribe();
        }
        if (this.localizationChangeSubscription) {
            this.localizationChangeSubscription.unsubscribe();
        }
        this.destroyed = true;
    };
    /**
     * @hidden
     */
    CalendarComponent.prototype.onResize = function () {
        this.focusedDate = new Date(this.focusedDate);
        this.cdr.detectChanges();
    };
    /**
     * Focuses the host element of the Calendar.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="calendar.focus()">Focus calendar</button>
     *  <kendo-calendar #calendar></kendo-calendar>
     * `
     * })
     * export class AppComponent { }
     * ```
     */
    CalendarComponent.prototype.focus = function () {
        if (!this.element) {
            return;
        }
        this.element.nativeElement.focus();
    };
    /**
     * Blurs the Calendar component.
     */
    CalendarComponent.prototype.blur = function () {
        if (!this.element) {
            return;
        }
        this.element.nativeElement.blur();
    };
    /**
     * @hidden
     */
    CalendarComponent.prototype.containsElement = function (element) {
        var _this = this;
        return Boolean(closest(element, function (node) { return node === _this.element.nativeElement; }));
    };
    /**
     * @hidden
     */
    CalendarComponent.prototype.handleNavigation = function (candidate) {
        if (this.disabled) {
            return;
        }
        var focusTarget = candidate ? new Date(cloneDate(candidate).setDate(1)) : this.focusedDate;
        this.focusedDate = dateInRange(focusTarget, this.min, this.max);
        this.detectChanges();
    };
    /**
     * @hidden
     */
    CalendarComponent.prototype.onPageChange = function () {
        var _this = this;
        if (!NgZone.isInAngularZone()) {
            if (this.pageChangeSubscription) {
                this.pageChangeSubscription.unsubscribe();
            }
            this.pageChangeSubscription = fromPromise(this.resolvedPromise)
                .subscribe(function () {
                _this.detectChanges(); // requires zone if templates
            });
        }
    };
    /**
     * @hidden
     */
    CalendarComponent.prototype.handleMultiViewCalendarValueChange = function (date, focusedDate) {
        var selectedDates = Array.isArray(date) ? date : [date];
        this.handleDateChange({ selectedDates: selectedDates, focusedDate: focusedDate });
    };
    /**
     * @hidden
     */
    CalendarComponent.prototype.handleDateChange = function (args) {
        var _this = this;
        var selectedDates = Array.isArray(args.selectedDates) ? args.selectedDates : [args.selectedDates];
        var canNavigateDown = this.bus.canMoveDown(this.activeViewEnum);
        var availableDates = selectedDates.filter(function (date) { return !_this.disabledDatesService.isDateDisabled(date); });
        this.focusedDate = args.focusedDate || this.focusedDate;
        if (this.disabled) {
            return;
        }
        if (!canNavigateDown && areDatesEqual(availableDates, this.selectedDates)) {
            this.emitSameDate();
            return;
        }
        if (canNavigateDown) {
            this.bus.moveDown(this.activeViewEnum);
            return;
        }
        if (this.disabledDatesService.isDateDisabled(this.focusedDate)) {
            return;
        }
        this.ngZone.run(function () {
            _this.selectedDates = availableDates.map(function (date) { return cloneDate(date); });
            _this.value = _this.parseSelectionToValue(availableDates);
            _this.onControlChange(_this.parseSelectionToValue(availableDates));
            _this.valueChange.emit(_this.parseSelectionToValue(availableDates));
            _this.cdr.markForCheck();
        });
    };
    /**
     * @hidden
     */
    CalendarComponent.prototype.writeValue = function (candidate) {
        this.verifyValue(candidate);
        this.value = candidate;
        this.cdr.markForCheck();
    };
    /**
     * @hidden
     */
    CalendarComponent.prototype.registerOnChange = function (fn) {
        this.onControlChange = fn;
    };
    /**
     * @hidden
     */
    CalendarComponent.prototype.registerOnTouched = function (fn) {
        this.onControlTouched = fn;
    };
    /**
     * @hidden
     */
    CalendarComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    };
    /**
     * @hidden
     */
    CalendarComponent.prototype.validate = function (control) {
        return this.minValidateFn(control) || this.maxValidateFn(control);
    };
    /**
     * @hidden
     */
    CalendarComponent.prototype.registerOnValidatorChange = function (fn) {
        this.onValidatorChange = fn;
    };
    /**
     * @hidden
     */
    CalendarComponent.prototype.activeCellTemplate = function () {
        switch (this.activeViewEnum) {
            case CalendarViewEnum.month:
                return this.monthCellTemplate || this.cellTemplate;
            case CalendarViewEnum.year:
                return this.yearCellTemplate;
            case CalendarViewEnum.decade:
                return this.decadeCellTemplate;
            case CalendarViewEnum.century:
                return this.centuryCellTemplate;
            default:
                return null;
        }
    };
    /**
     * @hidden
     */
    CalendarComponent.prototype.emitEvent = function (emitter, args) {
        if (hasObservers(emitter)) {
            this.ngZone.run(function () {
                emitter.emit(args);
            });
        }
    };
    /**
     * @hidden
     */
    CalendarComponent.prototype.handleActiveViewChange = function (view) {
        this.activeView = view;
        this.emitEvent(this.activeViewChange, view);
        if (this.type === 'infinite') {
            this.scrollSyncService.configure(this.activeViewEnum);
        }
        this.detectChanges(); // requires zone if templates
    };
    CalendarComponent.prototype.handleCellClick = function (_a) {
        var date = _a.date, modifiers = _a.modifiers;
        this.performSelection(date, modifiers);
    };
    /**
     * @hidden
     */
    CalendarComponent.prototype.handleWeekNumberClick = function (dates) {
        var _this = this;
        if (this.selection === 'single') {
            return;
        }
        this.ngZone.run(function () {
            _this.handleDateChange({
                selectedDates: dates,
                focusedDate: last(dates)
            });
        });
    };
    CalendarComponent.prototype.setClasses = function (element) {
        this.renderer.addClass(element, 'k-widget');
        this.renderer.addClass(element, 'k-calendar');
        this.renderer.addClass(element, "k-calendar-" + this.type);
    };
    CalendarComponent.prototype.verifyChanges = function () {
        if (!isDevMode()) {
            return;
        }
        if (this.min > this.max) {
            throw new Error("The max value should be bigger than the min. See " + MIN_DOC_LINK + " and " + MAX_DOC_LINK + ".");
        }
        if (this.bottomViewEnum > this.topViewEnum) {
            throw new Error("The topView should be greater than bottomView. See " + BOTTOM_VIEW_DOC_LINK + " and " + TOP_VIEW_DOC_LINK + ".");
        }
    };
    CalendarComponent.prototype.verifyValue = function (candidate) {
        if (!isDevMode()) {
            return;
        }
        if (this.selection === 'single' && candidate && !(candidate instanceof Date)) {
            throw new Error("The 'value' should be a valid JavaScript Date instance. Check " + VALUE_DOC_LINK + " for possible resolution.");
        }
        else if (this.selection === 'multiple' && candidate && Array.isArray(candidate)) {
            var onlyDates = candidate.every(function (value) { return value instanceof Date; });
            if (!onlyDates) {
                throw new Error("The 'value' should be an array of valid JavaScript Date instances. Check " + VALUE_DOC_LINK + " for possible resolution.");
            }
        }
    };
    CalendarComponent.prototype.bindEvents = function () {
        var element = this.element.nativeElement;
        this.domEvents.push(this.renderer.listen(element, 'blur', this.handleBlur.bind(this)), this.renderer.listen(element, 'focus', this.handleFocus.bind(this)), this.renderer.listen(element, 'mousedown', preventDefault), this.renderer.listen(element, 'click', this.handleComponentClick.bind(this)), this.renderer.listen(element, 'keydown', this.handleKeydown.bind(this)));
    };
    CalendarComponent.prototype.emitBlur = function (args) {
        if (this.pickerService) {
            this.pickerService.onBlur.emit(args);
        }
    };
    CalendarComponent.prototype.emitFocus = function () {
        if (this.pickerService) {
            this.pickerService.onFocus.emit();
        }
    };
    CalendarComponent.prototype.handleBlur = function (args) {
        var _this = this;
        this.isActive = false;
        // the injector can get the NgControl instance of the parent component (for example, the DateTimePicker)
        // and enters the zone for no reason because the parent component is still untouched
        if (!this.pickerService && requiresZoneOnBlur(this.control)) {
            this.ngZone.run(function () {
                _this.onControlTouched();
                _this.emitBlur(args);
                _this.cdr.markForCheck();
            });
        }
        else {
            this.emitBlur(args);
            this.detectChanges();
        }
    };
    CalendarComponent.prototype.handleFocus = function () {
        this.isActive = true;
        if (!NgZone.isInAngularZone()) {
            this.detectChanges();
        }
        this.emitFocus();
    };
    CalendarComponent.prototype.handleComponentClick = function () {
        if (!this.isActive) {
            if (this.type === 'infinite' && this.monthView.isScrolled()) {
                this.focusedDate = cloneDate(this.focusedDate); //XXX: forces change detect
                this.detectChanges();
            }
            this.focus();
        }
    };
    CalendarComponent.prototype.handleKeydown = function (args) {
        // reserve the alt + arrow key commands for the picker
        var arrowKeyPressed = [Keys.ArrowUp, Keys.ArrowRight, Keys.ArrowDown, Keys.ArrowLeft].indexOf(args.keyCode) !== -1;
        if (isPresent(this.pickerService) && arrowKeyPressed && args.altKey) {
            return;
        }
        var candidate = dateInRange(this.navigator.move(this.focusedDate, this.navigator.action(args), this.activeViewEnum), this.min, this.max);
        if (!isEqual(this.focusedDate, candidate)) {
            this.focusedDate = candidate;
            this.detectChanges();
            args.preventDefault();
        }
        if (args.keyCode === Keys.Enter) {
            this.performSelection(this.focusedDate, args);
        }
    };
    CalendarComponent.prototype.detectChanges = function () {
        if (!this.destroyed) {
            this.cdr.detectChanges();
        }
    };
    CalendarComponent.prototype.emitSameDate = function () {
        if (this.pickerService) {
            this.pickerService.sameDateSelected.emit();
        }
    };
    CalendarComponent.prototype.setAriaActivedescendant = function () {
        if (!isPresent(this.element)) {
            return;
        }
        var focusedCellId = this.cellUID + this.focusedDate.getTime();
        this.renderer.setAttribute(this.element.nativeElement, 'aria-activedescendant', focusedCellId);
    };
    CalendarComponent.prototype.parseSelectionToValue = function (selection) {
        selection = selection || [];
        return this.selection === 'single' ? cloneDate(last(selection)) : selection.map(function (date) { return cloneDate(date); });
    };
    CalendarComponent.prototype.performSelection = function (date, selectionModifiers) {
        var selection = this.selectionService.performSelection({
            date: date,
            modifiers: selectionModifiers,
            selectionMode: this.selection,
            activeViewEnum: this.activeViewEnum,
            rangePivot: this.rangePivot,
            selectedDates: this.selectedDates
        });
        this.rangePivot = selection.rangePivot;
        this.handleDateChange({
            selectedDates: selection.selectedDates,
            focusedDate: date
        });
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CalendarComponent.prototype, "id", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Date),
        tslib_1.__metadata("design:paramtypes", [Date])
    ], CalendarComponent.prototype, "focusedDate", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Date),
        tslib_1.__metadata("design:paramtypes", [Date])
    ], CalendarComponent.prototype, "min", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Date),
        tslib_1.__metadata("design:paramtypes", [Date])
    ], CalendarComponent.prototype, "max", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CalendarComponent.prototype, "rangeValidation", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CalendarComponent.prototype, "selection", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], CalendarComponent.prototype, "value", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CalendarComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], CalendarComponent.prototype, "tabindex", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], CalendarComponent.prototype, "tabIndex", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], CalendarComponent.prototype, "disabledDates", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CalendarComponent.prototype, "navigation", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CalendarComponent.prototype, "activeView", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CalendarComponent.prototype, "bottomView", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CalendarComponent.prototype, "topView", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], CalendarComponent.prototype, "type", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], CalendarComponent.prototype, "animateNavigation", void 0);
    tslib_1.__decorate([
        Input(),
        HostBinding('class.k-week-number'),
        tslib_1.__metadata("design:type", Boolean)
    ], CalendarComponent.prototype, "weekNumber", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], CalendarComponent.prototype, "activeViewChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], CalendarComponent.prototype, "activeViewDateChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], CalendarComponent.prototype, "valueChange", void 0);
    tslib_1.__decorate([
        ContentChild(CellTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", CellTemplateDirective)
    ], CalendarComponent.prototype, "cellTemplate", void 0);
    tslib_1.__decorate([
        Input('cellTemplate'),
        tslib_1.__metadata("design:type", CellTemplateDirective),
        tslib_1.__metadata("design:paramtypes", [CellTemplateDirective])
    ], CalendarComponent.prototype, "cellTemplateRef", null);
    tslib_1.__decorate([
        ContentChild(MonthCellTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", MonthCellTemplateDirective)
    ], CalendarComponent.prototype, "monthCellTemplate", void 0);
    tslib_1.__decorate([
        Input('monthCellTemplate'),
        tslib_1.__metadata("design:type", MonthCellTemplateDirective),
        tslib_1.__metadata("design:paramtypes", [MonthCellTemplateDirective])
    ], CalendarComponent.prototype, "monthCellTemplateRef", null);
    tslib_1.__decorate([
        ContentChild(YearCellTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", YearCellTemplateDirective)
    ], CalendarComponent.prototype, "yearCellTemplate", void 0);
    tslib_1.__decorate([
        Input('yearCellTemplate'),
        tslib_1.__metadata("design:type", YearCellTemplateDirective),
        tslib_1.__metadata("design:paramtypes", [YearCellTemplateDirective])
    ], CalendarComponent.prototype, "yearCellTemplateRef", null);
    tslib_1.__decorate([
        ContentChild(DecadeCellTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", DecadeCellTemplateDirective)
    ], CalendarComponent.prototype, "decadeCellTemplate", void 0);
    tslib_1.__decorate([
        Input('decadeCellTemplate'),
        tslib_1.__metadata("design:type", DecadeCellTemplateDirective),
        tslib_1.__metadata("design:paramtypes", [DecadeCellTemplateDirective])
    ], CalendarComponent.prototype, "decadeCellTemplateRef", null);
    tslib_1.__decorate([
        ContentChild(CenturyCellTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", CenturyCellTemplateDirective)
    ], CalendarComponent.prototype, "centuryCellTemplate", void 0);
    tslib_1.__decorate([
        Input('centuryCellTemplate'),
        tslib_1.__metadata("design:type", CenturyCellTemplateDirective),
        tslib_1.__metadata("design:paramtypes", [CenturyCellTemplateDirective])
    ], CalendarComponent.prototype, "centuryCellTemplateRef", null);
    tslib_1.__decorate([
        ContentChild(WeekNumberCellTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", WeekNumberCellTemplateDirective)
    ], CalendarComponent.prototype, "weekNumberTemplate", void 0);
    tslib_1.__decorate([
        Input('weekNumberTemplate'),
        tslib_1.__metadata("design:type", WeekNumberCellTemplateDirective),
        tslib_1.__metadata("design:paramtypes", [WeekNumberCellTemplateDirective])
    ], CalendarComponent.prototype, "weekNumberTemplateRef", null);
    tslib_1.__decorate([
        ContentChild(HeaderTitleTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", HeaderTitleTemplateDirective)
    ], CalendarComponent.prototype, "headerTitleTemplate", void 0);
    tslib_1.__decorate([
        Input('headerTitleTemplate'),
        tslib_1.__metadata("design:type", HeaderTitleTemplateDirective),
        tslib_1.__metadata("design:paramtypes", [HeaderTitleTemplateDirective])
    ], CalendarComponent.prototype, "headerTitleTemplateRef", null);
    tslib_1.__decorate([
        ContentChild(NavigationItemTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", NavigationItemTemplateDirective)
    ], CalendarComponent.prototype, "navigationItemTemplate", void 0);
    tslib_1.__decorate([
        Input('navigationItemTemplate'),
        tslib_1.__metadata("design:type", NavigationItemTemplateDirective),
        tslib_1.__metadata("design:paramtypes", [NavigationItemTemplateDirective])
    ], CalendarComponent.prototype, "navigationItemTemplateRef", null);
    tslib_1.__decorate([
        ViewChild(NavigationComponent, { static: false }),
        tslib_1.__metadata("design:type", NavigationComponent)
    ], CalendarComponent.prototype, "navigationView", void 0);
    tslib_1.__decorate([
        ViewChild(ViewListComponent, { static: false }),
        tslib_1.__metadata("design:type", ViewListComponent)
    ], CalendarComponent.prototype, "monthView", void 0);
    tslib_1.__decorate([
        HostBinding('attr.id'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [])
    ], CalendarComponent.prototype, "widgetId", null);
    tslib_1.__decorate([
        HostBinding('attr.role'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [])
    ], CalendarComponent.prototype, "widgetRole", null);
    tslib_1.__decorate([
        HostBinding('attr.tabindex'),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], CalendarComponent.prototype, "calendarTabIndex", null);
    tslib_1.__decorate([
        HostBinding('attr.aria-disabled'),
        HostBinding('class.k-state-disabled'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], CalendarComponent.prototype, "ariaDisabled", null);
    CalendarComponent = tslib_1.__decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            exportAs: 'kendo-calendar',
            providers: [
                BusViewService,
                CALENDAR_VALUE_ACCESSOR,
                CALENDAR_RANGE_VALIDATORS,
                KENDO_INPUT_PROVIDER,
                LocalizationService,
                DisabledDatesService,
                {
                    provide: L10N_PREFIX,
                    useValue: 'kendo.calendar'
                },
                NavigationService,
                ScrollSyncService,
                SelectionService
            ],
            selector: 'kendo-calendar',
            template: "\n    <ng-container kendoCalendarLocalizedMessages\n        i18n-today=\"kendo.calendar.today|The label for the today button in the calendar header\"\n        today=\"Today\"\n\n        i18n-prevButtonTitle=\"kendo.calendar.prevButtonTitle|The title of the previous button in the Classic calendar\"\n        prevButtonTitle=\"Navigate to previous view\"\n\n        i18n-nextButtonTitle=\"kendo.calendar.nextButtonTitle|The title of the next button in the Classic calendar\"\n        nextButtonTitle=\"Navigate to next view\"\n    >\n    </ng-container>\n    <ng-container *ngIf=\"type === 'infinite'\">\n        <kendo-calendar-navigation\n            *ngIf=\"navigation\"\n            [activeView]=\"activeViewEnum\"\n            [focusedDate]=\"focusedDate\"\n            [min]=\"min\"\n            [max]=\"max\"\n            [templateRef]=\"navigationItemTemplate?.templateRef\"\n            (valueChange)=\"handleNavigation($event)\"\n            (pageChange)=\"onPageChange()\"\n        >\n        </kendo-calendar-navigation>\n        <kendo-calendar-viewlist\n            [activeView]=\"activeViewEnum\"\n            [isActive]=\"isActive\"\n            [cellTemplateRef]=\"activeCellTemplate()?.templateRef\"\n            [headerTitleTemplateRef]=\"headerTitleTemplate?.templateRef\"\n            [weekNumberTemplateRef]=\"weekNumberTemplate?.templateRef\"\n            [cellUID]=\"cellUID\"\n            [min]=\"min\"\n            [max]=\"max\"\n            [focusedDate]=\"focusedDate\"\n            [weekNumber]=\"weekNumber\"\n            [selectedDates]=\"selectedDates\"\n            (todayButtonClick)=\"handleDateChange({\n                selectedDates: [$event],\n                focusedDate: $event\n            })\"\n            (cellClick)=\"handleCellClick($event)\"\n            (weekNumberCellClick)=\"handleWeekNumberClick($event)\"\n            (activeDateChange)=\"emitEvent(activeViewDateChange, $event)\"\n            (pageChange)=\"onPageChange()\"\n        >\n        </kendo-calendar-viewlist>\n        <kendo-resize-sensor (resize)=\"onResize()\"></kendo-resize-sensor>\n    </ng-container>\n    <ng-container *ngIf=\"type === 'classic'\">\n        <kendo-multiviewcalendar\n            #multiviewcalendar\n            [views]=\"1\"\n            [min]=\"min\"\n            [max]=\"max\"\n            [isActive]=\"isActive\"\n            [activeView]=\"activeView\"\n            [bottomView]=\"bottomView\"\n            [topView]=\"topView\"\n            [weekNumber]=\"weekNumber\"\n            [animateNavigation]=\"animateNavigation\"\n            [cellTemplate]=\"activeCellTemplate()\"\n            [monthCellTemplate]=\"monthCellTemplate\"\n            [yearCellTemplate]=\"yearCellTemplate\"\n            [decadeCellTemplate]=\"decadeCellTemplate\"\n            [centuryCellTemplate]=\"centuryCellTemplate\"\n            [headerTitleTemplate]=\"headerTitleTemplate\"\n            [weekNumberTemplate]=\"weekNumberTemplate\"\n            [focusedDate]=\"focusedDate\"\n            [selection]=\"selection\"\n            [value]=\"value\"\n            [disabledDates]=\"disabledDates\"\n            (activeViewChange)=\"handleActiveViewChange($event)\"\n            (valueChange)=\"handleMultiViewCalendarValueChange($event, multiviewcalendar.focusedDate)\"\n        >\n            <kendo-multiviewcalendar-messages\n                [today]=\"localization.get('today')\"\n                [prevButtonTitle]=\"localization.get('prevButtonTitle')\"\n                [nextButtonTitle]=\"localization.get('nextButtonTitle')\"\n            >\n            </kendo-multiviewcalendar-messages>\n        </kendo-multiviewcalendar>\n    </ng-container>\n  "
        }),
        tslib_1.__param(12, Optional()),
        tslib_1.__metadata("design:paramtypes", [BusViewService,
            CalendarDOMService,
            ElementRef,
            NavigationService,
            Renderer2,
            ChangeDetectorRef,
            NgZone,
            Injector,
            ScrollSyncService,
            DisabledDatesService,
            LocalizationService,
            SelectionService,
            PickerService])
    ], CalendarComponent);
    return CalendarComponent;
}());
export { CalendarComponent };
export { ɵ0 };
