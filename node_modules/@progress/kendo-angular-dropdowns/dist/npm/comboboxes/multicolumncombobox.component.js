/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var kendo_angular_common_1 = require("@progress/kendo-angular-common");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var kendo_angular_popup_1 = require("@progress/kendo-angular-popup");
var combobox_component_1 = require("./combobox.component");
var combobox_column_component_1 = require("./combobox-column/combobox-column.component");
var data_service_1 = require("../common/data.service");
var disabled_items_service_1 = require("../common/disabled-items/disabled-items.service");
var navigation_service_1 = require("../common/navigation/navigation.service");
var selection_service_1 = require("../common/selection/selection.service");
var touch_enabled_1 = require("../common/constants/touch-enabled");
var util_1 = require("../common/util");
var util_2 = require("./combobox-column/util");
var filterable_component_1 = require("../common/filtering/filterable-component");
var error_messages_1 = require("../common/constants/error-messages");
/**
 * Represents the [Kendo UI MultiColumnComboBox component for Angular]({% slug overview_multicolumncombobox %}).
 */
var MultiColumnComboBoxComponent = /** @class */ (function (_super) {
    tslib_1.__extends(MultiColumnComboBoxComponent, _super);
    function MultiColumnComboBoxComponent(localization, popupService, selectionService, navigationService, disabledItemsService, dataService, zone, changeDetector, renderer, hostElement, touchEnabled) {
        var _this = _super.call(this, localization, popupService, selectionService, navigationService, disabledItemsService, dataService, zone, changeDetector, renderer, hostElement, touchEnabled) || this;
        /**
         * @hidden
         */
        _this.hostClasses = true;
        _this.removeWindowResizeListener = util_1.noop;
        // the row height in @progress/kendo-theme-default
        _this.defaultVirtualItemHeight = 36;
        // use a smaller virtual page size as columns with multiple cells can cause poor performance
        _this.defaultVirtualPageSize = 30;
        return _this;
    }
    MultiColumnComboBoxComponent_1 = MultiColumnComboBoxComponent;
    Object.defineProperty(MultiColumnComboBoxComponent.prototype, "header", {
        /**
         * @hidden
         */
        set: function (header) {
            // updates the header padding on initial render as the resize senzor doesn't kick in as early
            this.updateHeaderPadding(header && header.nativeElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBoxComponent.prototype, "popupWidth", {
        get: function () {
            var wrapperOffsetWidth = this.wrapper.nativeElement.offsetWidth;
            var min = wrapperOffsetWidth + "px";
            var width = this.popupSettings.width || util_2.getRowWidthFromColumnsMeta(this.columns) || wrapperOffsetWidth;
            var max = isNaN(width) ? width : width + "px";
            return { min: min, max: max };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBoxComponent.prototype, "listContainerClasses", {
        /**
         * @hidden
         */
        get: function () {
            return [
                'k-list-container',
                'k-popup',
                'k-reset',
                'k-group',
                'k-dropdowngrid-popup',
                'k-popup-flush',
                'k-state-border-up'
            ].concat(this.popupSettings.popupClass || []);
        },
        enumerable: true,
        configurable: true
    });
    MultiColumnComboBoxComponent.prototype.ngAfterViewInit = function () {
        this.updateColumnsMediaState();
        this.addWindowResizeListener();
    };
    MultiColumnComboBoxComponent.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        this.removeWindowResizeListener();
    };
    /**
     * @hidden
     */
    MultiColumnComboBoxComponent.prototype.textFrom = function (dataItem, field) {
        return util_1.getter(dataItem, field);
    };
    /**
     * @hidden
     *
     * Adds or removes a padding value at the end of the header container equal to the size of the scrollbar.
     * As when the items container has a scrollbar, the column headers and the cells are misaligned.
     * When the container has a scrollbar, the padding style is added, and when there is none - it is removed.
     */
    MultiColumnComboBoxComponent.prototype.updateHeaderPadding = function (header) {
        if (!util_1.isPresent(header)) {
            return;
        }
        // the scrollbar is rendered on the left in rtl
        var headerPaddingPosition = this.localization.rtl ? 'padding-left' : 'padding-right';
        if (this.optionsList.hasScrollbar() && util_2.scrollbarWidth() > 0) {
            this.renderer.setStyle(header, headerPaddingPosition, util_2.scrollbarWidth() + "px");
        }
        else {
            this.renderer.removeStyle(header, headerPaddingPosition);
        }
    };
    MultiColumnComboBoxComponent.prototype.verifySettings = function () {
        if (!core_1.isDevMode()) {
            return;
        }
        if (util_1.isPresent(this.data) && this.data.length > 0 && this.data.some(function (item) { return !util_1.isObject(item); })) {
            throw new Error(error_messages_1.MultiColumnComboBoxMessages.data);
        }
        if (!util_1.isPresent(this.valueField) || !util_1.isPresent(this.textField)) {
            throw new Error(error_messages_1.MultiColumnComboBoxMessages.textAndValue);
        }
        _super.prototype.verifySettings.call(this);
    };
    MultiColumnComboBoxComponent.prototype.addWindowResizeListener = function () {
        var _this = this;
        if (!kendo_angular_common_1.isDocumentAvailable()) {
            return;
        }
        this.zone.runOutsideAngular(function () {
            return _this.removeWindowResizeListener = _this.renderer.listen(window, 'resize', _this.updateColumnsMediaState.bind(_this));
        });
    };
    MultiColumnComboBoxComponent.prototype.updateColumnsMediaState = function () {
        var _this = this;
        if (!(util_1.isPresent(this.columns) && kendo_angular_common_1.isDocumentAvailable())) {
            return;
        }
        this.columns.forEach(function (column) {
            var matchesMedia = !column.media || window.matchMedia(column.media).matches;
            if (column.matchesMedia !== matchesMedia) {
                column.matchesMedia = matchesMedia;
                if (_this.isOpen) {
                    // enter the zone only if the popup is actually open
                    // update its width in case it's dependent on the columns' width
                    _this.zone.run(function () { return _this.popupRef.popupElement.style.width = _this.popupWidth.max; });
                }
            }
        });
    };
    var MultiColumnComboBoxComponent_1;
    tslib_1.__decorate([
        core_1.HostBinding('class.k-dropdowngrid'),
        tslib_1.__metadata("design:type", Boolean)
    ], MultiColumnComboBoxComponent.prototype, "hostClasses", void 0);
    tslib_1.__decorate([
        core_1.ContentChildren(combobox_column_component_1.ComboBoxColumnComponent),
        tslib_1.__metadata("design:type", core_1.QueryList)
    ], MultiColumnComboBoxComponent.prototype, "columns", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('header', { static: false }),
        tslib_1.__metadata("design:type", core_1.ElementRef),
        tslib_1.__metadata("design:paramtypes", [core_1.ElementRef])
    ], MultiColumnComboBoxComponent.prototype, "header", null);
    MultiColumnComboBoxComponent = MultiColumnComboBoxComponent_1 = tslib_1.__decorate([
        core_1.Component({
            providers: [
                selection_service_1.SelectionService,
                data_service_1.DataService,
                navigation_service_1.NavigationService,
                disabled_items_service_1.DisabledItemsService,
                kendo_angular_l10n_1.LocalizationService,
                {
                    provide: kendo_angular_l10n_1.L10N_PREFIX,
                    useValue: 'kendo.multicolumncombobox'
                },
                {
                    multi: true,
                    provide: forms_1.NG_VALUE_ACCESSOR,
                    useExisting: core_1.forwardRef(function () { return MultiColumnComboBoxComponent_1; })
                },
                {
                    provide: kendo_angular_common_1.KendoInput,
                    useExisting: core_1.forwardRef(function () { return MultiColumnComboBoxComponent_1; })
                },
                {
                    provide: filterable_component_1.FilterableComponent,
                    useExisting: core_1.forwardRef(function () { return MultiColumnComboBoxComponent_1; })
                }
            ],
            selector: 'kendo-multicolumncombobox',
            template: "\n        <ng-container\n            kendoMultiColumnComboBoxLocalizedMessages\n\n            i18n-noDataText=\"kendo.multicolumncombobox.noDataText|The text displayed in the popup when there are no items\"\n            noDataText=\"NO DATA FOUND\"\n\n            i18n-clearTitle=\"kendo.multicolumncombobox.clearTitle|The title of the clear button\"\n            clearTitle=\"clear\"\n        >\n        </ng-container>\n        <span\n            #wrapper\n            unselectable=\"on\"\n            class=\"k-dropdown-wrap\"\n            [class.k-state-disabled]=\"disabled\"\n        >\n            <kendo-searchbar\n                #searchbar\n                [role]=\"'combobox'\"\n                [id]=\"focusableId\"\n                [listId]=\"listBoxId\"\n                [activeDescendant]=\"activeDescendant\"\n                [noDataLabel]=\"noDataLabel\"\n                [userInput]=\"text\"\n                [suggestedText]=\"getSuggestion()\"\n                [disabled]=\"disabled\"\n                [readonly]=\"readonly\"\n                [tabIndex]=\"tabIndex\"\n                [popupOpen]=\"isOpen\"\n                [placeholder]=\"placeholder\"\n                (onNavigate)=\"handleNavigate($event)\"\n                (valueChange)=\"searchBarChange($event)\"\n                (onBlur)=\"handleBlur()\"\n                (onFocus)=\"handleFocus()\"\n            >\n            </kendo-searchbar>\n\n            <span\n                *ngIf=\"clearButton && !loading && !disabled && !readonly && text?.length\"\n                class=\"k-icon k-clear-value k-i-close\"\n                [style.visibility]=\"clearButtonVisiblity\"\n                aria-hidden=\"true\"\n                [attr.title]=\"clearTitle\"\n                (click)=\"clearValue($event)\"\n                [kendoEventsOutsideAngular]=\"{\n                    mousedown: preventEventDefault\n                }\"\n            >\n            </span>\n\n            <span\n                #select\n                aria-hidden=\"true\"\n                unselectable=\"on\"\n                class=\"k-select\"\n                [kendoEventsOutsideAngular]=\"{\n                    mousedown: preventEventDefault\n                }\"\n            >\n                <span\n                    class=\"k-icon\"\n                    [ngClass]=\"buttonClasses\"\n                >\n                </span>\n            </span>\n        </span>\n\n        <ng-template #popupTemplate>\n            <!--user-defined header template -->\n            <ng-template\n                *ngIf=\"headerTemplate\"\n                [templateContext]=\"{\n                    templateRef: headerTemplate?.templateRef\n                }\"\n            >\n            </ng-template>\n\n            <!--grid header-->\n            <div\n                #header\n                class=\"k-grid-header\"\n            >\n                <div class=\"k-grid-header-wrap\">\n                    <table role=\"presentation\">\n                        <colgroup>\n                            <ng-container *ngFor=\"let column of columns\">\n                                <col\n                                    *ngIf=\"!column.hidden && column.matchesMedia\"\n                                    [style.width.px]=\"column.width\"\n                                />\n                            </ng-container>\n                        </colgroup>\n                        <tbody>\n                            <tr>\n                                <ng-container *ngFor=\"let column of columns\">\n                                    <th\n                                        *ngIf=\"!column.hidden && column.matchesMedia\"\n                                        class=\"k-header\"\n                                        [ngStyle]=\"column.headerStyle\"\n                                        [ngClass]=\"column.headerClass\"\n                                    >\n                                        <ng-container *ngIf=\"!column.headerTemplate\">\n                                            {{ column.title || column.field }}\n                                        </ng-container>\n                                        <ng-template\n                                            *ngIf=\"column.headerTemplate\"\n                                            [templateContext]=\"{\n                                                templateRef: column.headerTemplate?.templateRef,\n                                                $implicit: column,\n                                                column: column\n                                            }\"\n                                        >\n                                        </ng-template>\n                                    </th>\n                                </ng-container>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n            <!-- item template -->\n            <ng-template #rowTemplate let-dataItem>\n                <ng-container *ngFor=\"let column of columns\">\n                    <span\n                        *ngIf=\"!column.hidden && column.matchesMedia\"\n                        class=\"k-cell\"\n                        [ngClass]=\"column.class\"\n                        [style.width.px]=\"column.width\"\n                        [ngStyle]=\"column.style\"\n                    >\n                        <ng-container *ngIf=\"!column.cellTemplate\">\n                            {{ textFrom(dataItem, column.field) }}\n                        </ng-container>\n                        <ng-template\n                            *ngIf=\"column.cellTemplate\"\n                            [templateContext]=\"{\n                                templateRef: column.cellTemplate?.templateRef,\n                                $implicit: dataItem,\n                                dataItem: dataItem,\n                                column: column\n                            }\"\n                        >\n                        </ng-template>\n                    </span>\n                </ng-container>\n            </ng-template>\n\n            <!--list-->\n            <kendo-list\n                #optionsList\n                [id]=\"listBoxId\"\n                [optionPrefix]=\"optionPrefix\"\n                [data]=\"data\"\n                [textField]=\"textField\"\n                [valueField]=\"valueField\"\n                [template]=\"{ templateRef: rowTemplate }\"\n                [groupTemplate]=\"groupTemplate\"\n                [fixedGroupTemplate]=\"fixedGroupTemplate\"\n                [height]=\"listHeight\"\n                [show]=\"isOpen\"\n                [virtual]=\"virtual\"\n                [listClass]=\"'k-reset k-grid-list'\"\n                (pageChange)=\"pageChange($event)\"\n                (listResize)=\"updateHeaderPadding(header)\"\n            >\n            </kendo-list>\n\n            <!--no-data template-->\n            <div\n                class=\"k-nodata\"\n                *ngIf=\"data.length === 0\"\n            >\n                <ng-template\n                    [ngIf]=\"noDataTemplate\"\n                    [templateContext]=\"{\n                        templateRef: noDataTemplate?.templateRef\n                    }\"\n                >\n                </ng-template>\n                <ng-template [ngIf]=\"!noDataTemplate\">\n                    <div>{{ noDataText }}</div>\n                </ng-template>\n            </div>\n\n            <!--user-defined footer template-->\n            <ng-container *ngIf=\"footerTemplate\">\n                <div class=\"k-footer\">\n                    <ng-template\n                        [templateContext]=\"{\n                            templateRef: footerTemplate.templateRef\n                        }\"\n                    >\n                    </ng-template>\n                </div>\n            </ng-container>\n        </ng-template>\n\n        <kendo-resize-sensor\n            *ngIf=\"isOpen\"\n            (resize)=\"onResize()\"\n        >\n        </kendo-resize-sensor>\n\n        <!-- when the popupSettings.appendTo value is set to 'component', this container is used -->\n        <ng-container #container></ng-container>\n    "
        }),
        tslib_1.__param(10, core_1.Inject(touch_enabled_1.TOUCH_ENABLED)),
        tslib_1.__metadata("design:paramtypes", [kendo_angular_l10n_1.LocalizationService,
            kendo_angular_popup_1.PopupService,
            selection_service_1.SelectionService,
            navigation_service_1.NavigationService,
            disabled_items_service_1.DisabledItemsService,
            data_service_1.DataService,
            core_1.NgZone,
            core_1.ChangeDetectorRef,
            core_1.Renderer2,
            core_1.ElementRef, Boolean])
    ], MultiColumnComboBoxComponent);
    return MultiColumnComboBoxComponent;
}(combobox_component_1.ComboBoxComponent));
exports.MultiColumnComboBoxComponent = MultiColumnComboBoxComponent;
