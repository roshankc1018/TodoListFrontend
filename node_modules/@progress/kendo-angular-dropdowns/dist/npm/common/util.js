/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
/* tslint:disable:no-bitwise */
Object.defineProperty(exports, "__esModule", { value: true });
var kendo_angular_common_1 = require("@progress/kendo-angular-common");
var kendo_common_1 = require("@progress/kendo-common");
/**
 * @hidden
 */
exports.isPresent = function (value) { return value !== null && value !== undefined; };
/**
 * @hidden
 */
exports.isNumber = function (value) { return !isNaN(value); };
/**
 * @hidden
 */
exports.guid = function () {
    var id = "";
    var i;
    var random;
    for (i = 0; i < 32; i++) {
        random = Math.random() * 16 | 0;
        if (i === 8 || i === 12 || i === 16 || i === 20) {
            id += "-";
        }
        id += (i === 12 ? 4 : (i === 16 ? (random & 3 | 8) : random)).toString(16);
    }
    return id;
};
/**
 * @hidden
 */
exports.combineStr = function (begin, end) {
    return begin.concat(end.substr(end.toLowerCase().indexOf(begin.toLowerCase()) + begin.length));
};
/**
 * @hidden
 */
exports.isWindowAvailable = function () { return typeof window !== 'undefined'; };
/**
 * @hidden
 */
exports.isArray = function (value) { return Array.isArray(value); };
/**
 * @hidden
 */
exports.isObject = function (value) { return exports.isPresent(value) && typeof value === 'object'; };
/**
 * @hidden
 */
exports.isEmptyString = function (value) { return typeof value === 'string' && value.length === 0; };
/**
 * @hidden
 */
exports.resolveValuesInArray = function (values, data, valueField) {
    if (data === void 0) { data = []; }
    return values
        .map(function (value) {
        return data.find(function (item) { return exports.getter(item, valueField) === value; });
    })
        .filter(function (value) { return value !== undefined; });
};
/**
 * @hidden
 */
exports.validateComplexValues = function (values, valueField) {
    return exports.isArray(values) && values.filter(function (item) {
        return exports.isObject(item) && exports.isPresent(exports.getter(item, valueField));
    });
};
/**
 * @hidden
 */
exports.resolveAllValues = function (value, data, valueField) {
    var customValues = exports.validateComplexValues(value, valueField) || [];
    var resolvedValues = exports.resolveValuesInArray(value, data, valueField) || [];
    return resolvedValues.concat(customValues);
};
/**
 * @hidden
 */
exports.isObjectArray = function (values) {
    return exports.isArray(values) && values.every(function (item) { return exports.isObject(item); });
};
/**
 * @hidden
 */
exports.selectedIndices = function (values, data, valueField) {
    var extractedValues = data.map(function (item) {
        return exports.isPresent(item) && exports.isPresent(exports.getter(item, valueField)) ? exports.getter(item, valueField) : item;
    });
    return values.reduce(function (arr, item) {
        var value = exports.isPresent(item) && exports.isPresent(exports.getter(item, valueField)) ? exports.getter(item, valueField) : item;
        var index = extractedValues.indexOf(value);
        if (index !== -1) {
            arr.push(index);
        }
        return arr;
    }, []);
};
/**
 * @hidden
 */
exports.getter = function (dataItem, field) {
    if (!exports.isPresent(dataItem)) {
        return null;
    }
    if (!exports.isPresent(field) || !exports.isObject(dataItem)) {
        return dataItem;
    }
    // creates a field accessor supporting nested fields processing
    var valueFrom = kendo_common_1.getter(field);
    return valueFrom(dataItem);
};
/**
 * @hidden
 */
exports.resolveValue = function (args) {
    var dataItem;
    if (exports.isPresent(args.value)) {
        var data = [args.defaultItem].concat(args.data);
        dataItem = data.find(function (element) { return exports.getter(element, args.valueField) === args.value; });
        return {
            dataItem: dataItem,
            focused: args.data.indexOf(dataItem),
            selected: args.data.indexOf(dataItem)
        };
    }
    else if (args.index) {
        dataItem = args.data[args.index];
        return {
            dataItem: args.data[args.index],
            focused: args.index,
            selected: args.index
        };
    }
    return {
        dataItem: args.defaultItem,
        focused: -1,
        selected: -1
    };
};
/**
 * @hidden
 */
exports.sameCharsOnly = function (word, character) {
    for (var idx = 0; idx < word.length; idx++) {
        if (word.charAt(idx) !== character) {
            return false;
        }
    }
    return true;
};
/**
 * @hidden
 */
exports.shuffleData = function (data, splitIndex, defaultItem) {
    var result = data;
    if (defaultItem) {
        result = [defaultItem].concat(result);
    }
    return result.slice(splitIndex).concat(result.slice(0, splitIndex));
};
/**
 * @hidden
 */
exports.matchText = function (text, word, ignoreCase) {
    if (!exports.isPresent(text)) {
        return false;
    }
    var temp = String(text);
    if (ignoreCase) {
        temp = temp.toLowerCase();
    }
    return temp.indexOf(word) === 0;
};
/**
 * @hidden
 */
exports.elementFromPoint = function (x, y) {
    if (!kendo_angular_common_1.isDocumentAvailable()) {
        return;
    }
    return document.elementFromPoint(x, y);
};
/**
 * @hidden
 *
 * Checks whether the passed object has all of the listed properties.
 */
exports.hasProps = function (obj, props) {
    if (!exports.isPresent(obj)) {
        return false;
    }
    return props.every(function (prop) { return obj.hasOwnProperty(prop); });
};
/**
 * @hidden
 *
 * Checks whether an element is untouched by looking for the ng-untouched css class
 */
exports.isUntouched = function (element) { return element.className.includes('ng-untouched'); };
/**
 * @hidden
 */
exports.noop = function (_) { };
/**
 * IE element `matches` polyfill.
 * https://developer.mozilla.org/en-US/docs/Web/API/Element/matches
 */
var matches = function (element, selector) {
    var matcher = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;
    if (!matcher) {
        return false;
    }
    return matcher.call(element, selector);
};
var ɵ0 = matches;
exports.ɵ0 = ɵ0;
/**
 * @hidden
 *
 * IE element `closest` polyfill.
 * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest
 */
exports.closest = function (element, selector) {
    var parent = element;
    while (parent !== null && parent.nodeType === 1) {
        if (matches(parent, selector)) {
            return parent;
        }
        parent = parent.parentElement || parent.parentNode;
    }
    return null;
};
/**
 * @hidden
 *
 * Parses a provided value to its type 'number' representation.
 * If the parsed value (via Number(value)) is NaN, the provided default value is returned.
 * Uses 0 as default value if a second param is not provided.
 */
exports.parseNumber = function (num, defaultValue) {
    if (defaultValue === void 0) { defaultValue = 0; }
    var normalizedValue = Number(num);
    return isNaN(normalizedValue) ? defaultValue : normalizedValue;
};
/**
 * @hidden
 *
 * Checks whether the passed target element is inside the provided host or popupRef.
 */
exports.inDropDown = function (host, target, popupRef) {
    return host.nativeElement.contains(target) || (popupRef && popupRef.popupElement.contains(target));
};
/**
 * @hidden
 *
 * Calculates the hierarchical level of an item, based on the provided index.
 * The result level is zero-based (starts from 0).
 */
exports.getHierarchicalItemLevel = function (index) {
    return (index || '').split('_').length - 1;
};
/**
 * @hidden
 *
 * Retrieves all descendant nodes' lookups which are currently registered in the provided lookup item as a flat array.
 */
exports.fetchDescendentNodes = function (lookup, filterExpression) {
    if (!exports.isPresent(lookup) || lookup.children.length === 0) {
        return [];
    }
    var descendants = lookup.children;
    if (exports.isPresent(filterExpression)) {
        descendants = descendants.filter(function (descendent) { return filterExpression(descendent.item); });
    }
    descendants.forEach(function (child) {
        return descendants = descendants.concat(exports.fetchDescendentNodes(child, filterExpression));
    });
    return descendants;
};
/**
 * @hidden
 *
 * Retrieves the correct value based on the item's level and the provided value field/s.
 * Used in the MultiSelectTree component.
 */
exports.valueFrom = function (_a, valueField) {
    var dataItem = _a.dataItem, index = _a.index, level = _a.level;
    var fields = Array.isArray(valueField) ? valueField : [valueField];
    // either use the explicitly provided value level, or infer it from the item index
    var valueLevel = exports.isPresent(level) ? level : exports.getHierarchicalItemLevel(index);
    // fall-back to the last available one, if the current node is in a deeper level
    var normalizedLevel = Math.min(valueLevel, fields.length - 1);
    var field = fields[normalizedLevel];
    return kendo_common_1.getter(field)(dataItem);
};
