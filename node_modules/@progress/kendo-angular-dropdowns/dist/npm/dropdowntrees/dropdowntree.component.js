/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var kendo_angular_common_1 = require("@progress/kendo-angular-common");
var kendo_angular_popup_1 = require("@progress/kendo-angular-popup");
var kendo_angular_treeview_1 = require("@progress/kendo-angular-treeview");
var kendo_common_1 = require("@progress/kendo-common");
var forms_1 = require("@angular/forms");
var data_service_1 = require("../common/data.service");
var disabled_items_service_1 = require("../common/disabled-items/disabled-items.service");
var navigation_service_1 = require("../common/navigation/navigation.service");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var selection_service_1 = require("../common/selection/selection.service");
var preventable_event_1 = require("../common/models/preventable-event");
var util_1 = require("../common/util");
var no_data_template_directive_1 = require("../common/templates/no-data-template.directive");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var header_template_directive_1 = require("../common/templates/header-template.directive");
var footer_template_directive_1 = require("../common/templates/footer-template.directive");
var node_template_directive_1 = require("./templates/node-template.directive");
var error_messages_1 = require("../common/constants/error-messages");
var touch_enabled_1 = require("../common/constants/touch-enabled");
var value_template_directive_1 = require("../common/templates/value-template.directive");
/* tslint:disable:member-ordering */
var DEFAULT_POPUP_SETTINGS = { animate: true };
var hasChildren = function () { return false; };
var ɵ0 = hasChildren;
exports.ɵ0 = ɵ0;
var fetchChildren = function () { return rxjs_1.of([]); };
var ɵ1 = fetchChildren;
exports.ɵ1 = ɵ1;
var itemDisabled = function () { return false; };
var ɵ2 = itemDisabled;
exports.ɵ2 = ɵ2;
var isNodeVisible = function () { return true; };
var ɵ3 = isNodeVisible;
exports.ɵ3 = ɵ3;
/**
 * Represents the [Kendo UI DropDownTree component for Angular]({% slug overview_ddt %}).
 */
var DropDownTreeComponent = /** @class */ (function () {
    function DropDownTreeComponent(popupService, navigationService, renderer, hostElement, _zone, cdr, localization, touchEnabled) {
        this.popupService = popupService;
        this.navigationService = navigationService;
        this.renderer = renderer;
        this.hostElement = hostElement;
        this._zone = _zone;
        this.cdr = cdr;
        this.localization = localization;
        this.touchEnabled = touchEnabled;
        this.hostClasses = true;
        /**
         * Fires each time the popup is about to open
         * ([see example]({% slug openstate_ddt %})).
         * This event is preventable. If you cancel it, the popup will remain closed.
         */
        this.open = new core_1.EventEmitter();
        /**
         * Fires after the popup has been opened.
         */
        this.opened = new core_1.EventEmitter();
        /**
         * Fires each time the popup is about to close
         * ([see example]({% slug openstate_ddt %})).
         * This event is preventable. If you cancel it, the popup will remain open.
         */
        this.close = new core_1.EventEmitter();
        /**
         * Fires after the popup has been closed.
         */
        this.closed = new core_1.EventEmitter();
        /**
         * Fires when the user expands a node in the popup TreeView.
         */
        this.nodeExpand = new core_1.EventEmitter();
        /**
         * Fires when the user collapses a node in the popup TreeView.
         */
        this.nodeCollapse = new core_1.EventEmitter();
        /**
         * Fires each time the user focuses the DropDownTree.
         */
        this.onFocus = new core_1.EventEmitter();
        /**
         * Fires each time the DropDownTree gets blurred.
         */
        this.onBlur = new core_1.EventEmitter();
        /**
         * Fires each time the value is changed
         * ([see example]({% slug overview_ddt %}#toc-events)).
         */
        this.valueChange = new core_1.EventEmitter();
        /**
         * Fires when the value of the built-in filter input element changes.
         */
        this.filterChange = new core_1.EventEmitter();
        /**
         * If set to `true`, renders a button on hovering over the component.
         * Clicking this button resets the value of the component to `undefined` and triggers the `change` event.
         */
        this.clearButton = true;
        /**
         * A function which determines if a specific node has child nodes.
         */
        this.hasChildren = hasChildren;
        /**
         * A function which provides the child nodes for a given parent node.
         */
        this.fetchChildren = fetchChildren;
        /**
         * The hint which is displayed when the component is empty.
         */
        this.placeholder = "";
        /**
         * Sets the height of the options list. By default, `listHeight` is 200px.
         *
         * > The `listHeight` property affects only the list of options and not the whole popup container.
         * > To set the height of the popup container, use `popupSettings.height`.
         */
        this.listHeight = 200;
        /**
         * Sets the disabled state of the component.
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the component.
         */
        this.readonly = false;
        /**
         * Specifies the type of the selected value
         * ([more information and example]({% slug valuebinding_ddt %}#toc-primitive-values)).
         * If set to `true`, the selected value has to be of a primitive value.
         */
        this.valuePrimitive = false;
        /**
         * A function that is executed for each data item and determines if a specific item is disabled.
         */
        this.itemDisabled = itemDisabled;
        /**
         * A callback which determines whether a tree node should be rendered as hidden. The utility .k-display-none class is used to hide the nodes.
         * Useful for custom filtering implementations.
         */
        this.isNodeVisible = isNodeVisible;
        /**
         * Indicates whether the child nodes will be fetched on node expand or will be initially prefetched.
         * @default true
         */
        this.loadOnDemand = true;
        /**
         * Renders the built-in input element for filtering the DropDownTree.
         * If set to `true`, the component emits the `filterChange` event, which can be used to [filter the DropDownTree manually]({% slug filtering_ddt %}#toc-manual-filtering).
         * A built-in filtering implementation is available to use with the [`kendoDropDownTreeHierarchyBinding`]({% slug api_dropdowns_dropdowntreehierarchybindingdirective %}) and [`kendoDropDownTreeFlatBinding`]({% slug api_dropdowns_dropdowntreeflatbindingdirective %}) directives.
         */
        this.filterable = false;
        /**
         * @hidden
         */
        this.filter = '';
        /**
         * @hidden
         *
         * Used by the kendo-label and kendo-floatinglabel to access and associate the focusable element with the provided label via aria-labelledby.
         */
        this.focusableId = "k-" + kendo_angular_common_1.guid();
        /**
         * @hidden
         */
        this.selectedKeys = [];
        /**
         * @hidden
         */
        this.filterStateChange = new core_1.EventEmitter();
        /**
         * @hidden
         */
        this.allNodesHidden = false;
        /**
         * @hidden
         *
         * Used to associate the value label with the wrapper via aria-describedby.
         */
        this.valueLabelId = "k-" + kendo_angular_common_1.guid();
        this._popupSettings = DEFAULT_POPUP_SETTINGS;
        this._tabindex = 0;
        this._isFocused = false;
        this.subscriptions = [];
        this.onTouchedCallback = util_1.noop;
        this.onChangeCallback = util_1.noop;
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        this.subscribeEvents();
        this.subscribeTouchEvents();
    }
    DropDownTreeComponent_1 = DropDownTreeComponent;
    Object.defineProperty(DropDownTreeComponent.prototype, "clearable", {
        get: function () {
            return this.clearButton;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownTreeComponent.prototype, "treeview", {
        get: function () {
            return this._treeview;
        },
        set: function (treeview) {
            if (treeview) {
                if (this.isFocused && !this.filterable || this.touchEnabled) {
                    treeview.focus();
                }
                // the treeview animations are initially disabled (we don't want expand animations during popup opening)
                // re-enables the animations for user interaction
                treeview.animate = true;
                this._treeview = treeview;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownTreeComponent.prototype, "data", {
        get: function () {
            return this._nodes;
        },
        /**
         * Sets the data of the DropDownTree.
         *
         * > The data has to be provided in an array-like list with objects.
         */
        set: function (data) {
            this._nodes = data;
            this.setState();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownTreeComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * Sets the value of the DropDownTree.
         * It can either be of the primitive (string, numbers) or of the complex (objects) type.
         * To define the type, use the `valuePrimitive` option.
         *
         */
        set: function (newValue) {
            this._value = newValue;
            this.setState();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownTreeComponent.prototype, "popupSettings", {
        get: function () {
            return this._popupSettings;
        },
        /**
         * Configures the popup of the DropDownTree.
         *
         * The available options are:
         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
         * - `width: Number | String`&mdash;Sets the width of the popup container. By default, the width of the host element is used. If set to `auto`, the component automatically adjusts the width of the popup and no item labels are wrapped.
         * - `height: Number`&mdash;Sets the height of the popup container.
         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
         * - `appendTo: "root" | "component" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.
         */
        set: function (settings) {
            this._popupSettings = Object.assign({}, DEFAULT_POPUP_SETTINGS, settings);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownTreeComponent.prototype, "dataItem", {
        get: function () {
            return this._dataItem ? this._dataItem : this.value;
        },
        /**
         * Keeps the current `dataItem` object in order to resolve selection.
         * Needs to be provided when `value` is bound in and `valuePrimitive` is set to true.
         */
        set: function (item) {
            this._dataItem = item;
            this.setState();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownTreeComponent.prototype, "tabindex", {
        get: function () {
            return this.disabled ? -1 : this._tabindex;
        },
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        set: function (value) {
            var providedTabIndex = Number(value);
            var defaultTabIndex = 0;
            this._tabindex = !isNaN(providedTabIndex) ? providedTabIndex : defaultTabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownTreeComponent.prototype, "isFocused", {
        get: function () {
            return this._isFocused;
        },
        set: function (isFocused) {
            this.renderer[isFocused ? 'addClass' : 'removeClass'](this.wrapper.nativeElement, 'k-state-focused');
            this._isFocused = isFocused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownTreeComponent.prototype, "width", {
        get: function () {
            var wrapperWidth = this.wrapper.nativeElement.offsetWidth;
            var width = this.popupSettings.width || wrapperWidth;
            var minWidth = isNaN(wrapperWidth) ? wrapperWidth : wrapperWidth + "px";
            var maxWidth = isNaN(width) ? width : width + "px";
            return { min: minWidth, max: maxWidth };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownTreeComponent.prototype, "height", {
        get: function () {
            var popupHeight = this.popupSettings.height;
            return util_1.isPresent(popupHeight) ? popupHeight + "px" : 'auto';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownTreeComponent.prototype, "isOpen", {
        /**
         * Returns the current open state of the popup.
         */
        get: function () {
            return util_1.isPresent(this.popupRef);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownTreeComponent.prototype, "clearButtonVisiblity", {
        get: function () {
            if (this.touchEnabled) {
                return 'visible';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownTreeComponent.prototype, "isExpanded", {
        get: function () {
            return this.isNodeExpanded;
        },
        /**
         * @hidden
         *
         * Alias for `isNodeExpanded`. Used for compatibility with the `ExpandableComponent` interface.
         * Required for the expand-directive.
         */
        set: function (callback) {
            this.isNodeExpanded = callback;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownTreeComponent.prototype, "expand", {
        /**
         * @hidden
         *
         * Alias for `nodeExpand`. Used for compatibility with the `ExpandableComponent` interface.
         * Required for the expand-directive.
         */
        get: function () {
            return this.nodeExpand;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownTreeComponent.prototype, "collapse", {
        /**
         * @hidden
         *
         * Alias for `nodeCollapse`. Used for compatibility with the `ExpandableComponent` interface.
         * Required for the expand-directive.
         */
        get: function () {
            return this.nodeCollapse;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownTreeComponent.prototype, "nodes", {
        get: function () {
            return this.data;
        },
        /**
         * @hidden
         *
         * Alias for `data`. Used for compatibility with the `DataBoundComponent` interface.
         * Required for the data-binding directives.
         */
        set: function (nodes) {
            this.data = nodes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownTreeComponent.prototype, "children", {
        get: function () {
            return this.fetchChildren;
        },
        /**
         * @hidden
         *
         * Alias for `fetchChildren`. Used for compatibility with the `DataBoundComponent` interface.
         * Required for the data-binding directives
         */
        set: function (callback) {
            this.fetchChildren = callback;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownTreeComponent.prototype, "isVisible", {
        get: function () {
            return this.isNodeVisible;
        },
        /**
         * @hidden
         *
         * Alias for `isNodeVisible`. Used for compatibility with the `DataBoundComponent` interface.
         * The `DataBoundComponent` interface is used in the data-binding directives.
         */
        set: function (callback) {
            this.isNodeVisible = callback;
        },
        enumerable: true,
        configurable: true
    });
    DropDownTreeComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.renderer.removeAttribute(this.hostElement.nativeElement, 'tabindex');
        this.assignAriaDescribedBy();
        this.subscriptions.push(this.localization
            .changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
            _this.cdr.markForCheck();
        }));
    };
    /**
     * @hidden
     */
    DropDownTreeComponent.prototype.ngOnDestroy = function () {
        this.destroyPopup();
        this.unsubscribeEvents();
    };
    /**
     * @hidden
     */
    DropDownTreeComponent.prototype.ngOnChanges = function (changes) {
        if (kendo_angular_common_1.anyChanged(['textField', 'valueField', 'valuePrimitive'], changes, false)) {
            this.setState();
        }
    };
    /**
     * @hidden
     */
    DropDownTreeComponent.prototype.ngAfterContentChecked = function () {
        this.verifySettings();
    };
    /**
     * @hidden
     *
     * Used by the kendo-floatinglabel component to determine if the floating label
     * should be rendered inside the input when the component is not focused.
     */
    DropDownTreeComponent.prototype.isEmpty = function () {
        return !this.text && !this.placeholder;
    };
    /**
     * @hidden
     */
    DropDownTreeComponent.prototype.togglePopup = function (open) {
        var isDisabled = this.disabled || this.readonly;
        var sameState = this.isOpen === open;
        if (isDisabled || sameState) {
            return;
        }
        var togglePrevented = this.triggerPopupEvents(open);
        if (!togglePrevented) {
            open ?
                this.createPopup() :
                this.destroyPopup();
        }
    };
    /**
     * @hidden
     */
    DropDownTreeComponent.prototype.handleFocus = function () {
        var _this = this;
        if (!this.isFocused) {
            this.isFocused = true;
            if (kendo_angular_common_1.hasObservers(this.onFocus)) {
                this._zone.run(function () {
                    _this.onFocus.emit();
                });
            }
        }
    };
    /**
     * @hidden
     */
    DropDownTreeComponent.prototype.handleBlur = function (e) {
        var _this = this;
        var relatedTarget = e && e.relatedTarget;
        if (this.hostElement.nativeElement.contains(relatedTarget) ||
            (this.isOpen && this.popupRef.popupElement.contains(relatedTarget))) {
            return;
        }
        this.isFocused = false;
        if (kendo_angular_common_1.hasObservers(this.onBlur) ||
            util_1.isUntouched(this.hostElement.nativeElement)) {
            this._zone.run(function () {
                _this.togglePopup(false);
                _this.onBlur.emit();
                _this.onTouchedCallback();
            });
        }
        else {
            this.togglePopup(false);
        }
    };
    /**
     * @hidden
     */
    DropDownTreeComponent.prototype.handleKeydown = function (event) {
        if (this.disabled || this.readonly) {
            return;
        }
        var eventData = event;
        this.navigationService.process({
            originalEvent: eventData
        });
    };
    /**
     * @hidden
     */
    DropDownTreeComponent.prototype.handleClick = function () {
        this.togglePopup(!this.isOpen);
    };
    /**
     * Focuses a specific item of the DropDownTree based on a provided index in the format of `1_1`.
     * The targeted item should be expanded in order for it to be focused.
     * If null or invalid index is provided the focus will be set on the first item.
     */
    DropDownTreeComponent.prototype.focusItemAt = function (index) {
        if (this.treeview) {
            var lookup = this.treeview.itemLookup(index);
            var isItemDisabled = !util_1.isPresent(lookup) || this.treeview.isDisabled(lookup.item.dataItem, lookup.item.index);
            if (!isItemDisabled) {
                this.treeview.focus(index);
            }
        }
    };
    /**
     * Focuses the DropDownTree.
     */
    DropDownTreeComponent.prototype.focus = function () {
        if (!this.disabled) {
            this.wrapper.nativeElement.focus();
        }
    };
    /**
     * Blurs the DropDownTree.
     */
    DropDownTreeComponent.prototype.blur = function () {
        if (!this.disabled) {
            this.wrapper.nativeElement.blur();
        }
    };
    /**
     * Resets the value of the DropDownTree.
     * If you use the `reset` method to clear the value of the component,
     * the model will not update automatically and the `valueChange` event will not be fired.
     */
    DropDownTreeComponent.prototype.reset = function () {
        this.value = undefined;
        this.dataItem = undefined;
    };
    /**
     * Toggles the visibility of the popup
     * ([see example]({% slug openstate_ddt %})).
     * If you use the `toggle` method to open or close the popup, the `open` and `close` events will not be fired.
     *
     * @param open - The state of the popup.
     */
    DropDownTreeComponent.prototype.toggle = function (open) {
        var _this = this;
        // The Promise is required to open the popup on load.
        // Otherwise, the "ViewContainerRef not found..." error will be thrown.
        Promise.resolve(null).then(function () {
            var shouldOpen = util_1.isPresent(open) ? open : !util_1.isPresent(_this.popupRef);
            _this.destroyPopup();
            if (shouldOpen) {
                _this.createPopup();
            }
        });
    };
    Object.defineProperty(DropDownTreeComponent.prototype, "popupContainerClasses", {
        /**
         * @hidden
         */
        get: function () {
            var containerClasses = ['k-popup-dropdowntree', 'k-reset', 'k-group', 'k-list-container'];
            if (this.popupSettings.popupClass) {
                containerClasses.push(this.popupSettings.popupClass);
            }
            return containerClasses;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    DropDownTreeComponent.prototype.onSelectionChange = function (_a) {
        var dataItem = _a.dataItem, index = _a.index;
        this.valueDepth = index.split('_').length - 1;
        var valueField = this.getField(this.valueField, dataItem);
        var newValue = this.valuePrimitive ?
            kendo_common_1.getter(valueField)(dataItem) :
            dataItem;
        var shouldUpdateValue = newValue !== this.value;
        if (shouldUpdateValue) {
            this.dataItem = dataItem;
            this.value = newValue;
            this.emitValueChange(this.value);
        }
        this.togglePopup(false);
        this.focus();
    };
    /**
     * @hidden
     */
    DropDownTreeComponent.prototype.messageFor = function (key) {
        return this.localization.get(key);
    };
    /**
     * @hidden
     */
    DropDownTreeComponent.prototype.clearValue = function (event) {
        event.stopImmediatePropagation();
        this.focus();
        this.value = undefined;
        this.dataItem = undefined;
        this.clearState();
        this.valueChange.emit(undefined);
        this.emitValueChange();
    };
    Object.defineProperty(DropDownTreeComponent.prototype, "appendTo", {
        get: function () {
            var appendTo = this.popupSettings.appendTo;
            if (!appendTo || appendTo === 'root') {
                return undefined;
            }
            return appendTo === 'component' ? this.container : appendTo;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    DropDownTreeComponent.prototype.preventEventDefault = function (event) {
        event.preventDefault();
    };
    /**
     * @hidden
     */
    DropDownTreeComponent.prototype.writeValue = function (value) {
        // If the user resets the value by providing null/undefined we need to reset the `dataItem`
        // Because upon initialization of the component the `writeValue` is being called twice -
        // first time with `null` value regardless of sync/async value - an extra check is added to
        // distinguish between client reset and initial phanotm 'null' value
        if (!util_1.isPresent(value) && util_1.isPresent(this.value)) {
            this.dataItem = null;
        }
        this.value = value === null ? undefined : value;
    };
    /**
     * @hidden
     */
    DropDownTreeComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @hidden
     */
    DropDownTreeComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @hidden
     */
    DropDownTreeComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    };
    /**
     * @hidden
     */
    DropDownTreeComponent.prototype.handleFilterInputChange = function (term) {
        var _this = this;
        this.filterChange.next(term);
        this.allNodesHidden = this.nodes.every(function (node, index) { return !_this.isVisible(node, String(index)); });
    };
    DropDownTreeComponent.prototype.verifySettings = function () {
        if (!core_1.isDevMode()) {
            return;
        }
        if (this.valuePrimitive === true && util_1.isPresent(this.value) && typeof this.value === "object") {
            throw new Error(error_messages_1.DropDownTreeMessages.primitive);
        }
        if (this.valuePrimitive === true && util_1.isPresent(this.value) && typeof this.dataItem !== "object") {
            throw new Error(error_messages_1.DropDownTreeMessages.dataItem);
        }
        if (this.valuePrimitive === false && util_1.isPresent(this.value) && typeof this.value !== "object") {
            throw new Error(error_messages_1.DropDownTreeMessages.object);
        }
        if (!util_1.isPresent(this.valueField) || !util_1.isPresent(this.textField)) {
            throw new Error(error_messages_1.DropDownTreeMessages.textAndValue);
        }
        if ((util_1.isArray(this.valueField) || util_1.isArray(this.textField)) && util_1.isPresent(this.value) && !util_1.isPresent(this.valueDepth)) {
            throw new Error(error_messages_1.DropDownTreeMessages.valueDepth);
        }
    };
    DropDownTreeComponent.prototype.emitValueChange = function (value) {
        this.onChangeCallback(value);
        this.valueChange.emit(value);
    };
    DropDownTreeComponent.prototype.getText = function (textField, dataItem) {
        if (util_1.isPresent(dataItem) && util_1.isPresent(textField)) {
            var field = this.getField(textField, dataItem);
            return kendo_common_1.getter(field)(dataItem);
        }
        return null;
    };
    /**
     * @hidden
     *
     * Determines the `valueField` and `textField` for a specific level in the data set
     *  @param field - the field value (string | string[])
     *  @param value - current value
     */
    DropDownTreeComponent.prototype.getField = function (field, value) {
        var fieldsCount = field.length - 1;
        if (typeof field === 'string') {
            // If the `valueField` | `textField` is the same for all levels
            return field;
        }
        else if (util_1.isPresent(this.valueDepth)) {
            // When `valueDepth` can be defined from the index on selectionChange or provided by the user
            return fieldsCount < this.valueDepth ? field[fieldsCount] : field[this.valueDepth];
        }
        else {
            // Fallback: Look to find a match of each field in the current data item
            // Side effect may occur if all of the listed fields are present in the data item
            return field.find(function (item) { return item in value; });
        }
    };
    DropDownTreeComponent.prototype.triggerPopupEvents = function (open) {
        var eventArgs = new preventable_event_1.PreventableEvent();
        if (open) {
            this.open.emit(eventArgs);
        }
        else {
            this.close.emit(eventArgs);
        }
        return eventArgs.isDefaultPrevented();
    };
    DropDownTreeComponent.prototype.createPopup = function () {
        var _this = this;
        var horizontalAlign = this.direction === "rtl" ? "right" : "left";
        var anchorPosition = { horizontal: horizontalAlign, vertical: 'bottom' };
        var popupPosition = { horizontal: horizontalAlign, vertical: 'top' };
        this.popupRef = this.popupService.open({
            anchor: this.wrapper,
            appendTo: this.appendTo,
            anchorAlign: anchorPosition,
            content: this.popupTemplate,
            popupAlign: popupPosition,
            positionMode: 'absolute',
            popupClass: this.popupContainerClasses
        });
        var popupWrapper = this.popupRef.popupElement;
        var _a = this.width, min = _a.min, max = _a.max;
        popupWrapper.style.minWidth = min;
        popupWrapper.style.width = max;
        popupWrapper.style.height = this.height;
        popupWrapper.setAttribute("dir", this.direction);
        this.popupRef.popupOpen.subscribe(function () {
            _this.cdr.detectChanges();
            _this.opened.emit();
        });
        this.popupRef.popupClose.subscribe(function () {
            _this.closed.emit();
        });
    };
    DropDownTreeComponent.prototype.destroyPopup = function () {
        var _this = this;
        if (this.popupRef) {
            this.popupRef.close();
            this.popupRef = null;
            if (this.filter !== "") {
                this.filter = "";
                this.allNodesHidden = false;
                if (kendo_angular_common_1.hasObservers(this.filterChange)) {
                    this._zone.run(function () {
                        _this.filterChange.emit("");
                    });
                }
            }
        }
    };
    DropDownTreeComponent.prototype.handleEscape = function () {
        this.togglePopup(false);
        this.focus();
    };
    DropDownTreeComponent.prototype.setState = function () {
        if (util_1.isPresent(this.value) && util_1.isPresent(this.dataItem) && util_1.isPresent(this.valueField)) {
            this.text = this.getText(this.textField, this.dataItem);
            var valueField = this.getField(this.valueField, this.dataItem);
            this.selectBy = valueField;
            this.selectedKeys = [kendo_common_1.getter(valueField)(this.dataItem)];
        }
        else {
            this.clearState();
        }
        this.cdr.markForCheck();
    };
    DropDownTreeComponent.prototype.clearState = function () {
        this.text = undefined;
        this.valueDepth = undefined;
        this.selectedKeys = [];
    };
    DropDownTreeComponent.prototype.subscribeEvents = function () {
        var _this = this;
        this.subscriptions.push(this.navigationService.open.subscribe(function () { return _this.togglePopup(true); }), this.navigationService.close.subscribe(function () {
            _this.togglePopup(false);
            _this.focus();
        }), this.navigationService.enter
            .pipe(operators_1.tap(function (event) { return event.originalEvent.preventDefault(); }))
            .subscribe(function () { return _this.togglePopup(true); }), this.navigationService.esc
            .subscribe(function () { return _this.handleEscape(); }), this.navigationService.tab.subscribe(function () { return _this.focus(); }), this.navigationService.down.subscribe(function (event) {
            if (!_this.treeview) {
                return;
            }
            event.originalEvent.preventDefault();
            if (!_this.treeview.isActive) {
                _this.treeview.focus();
            }
        }), this.navigationService.up.subscribe(function (event) {
            if (!_this.treeview) {
                return;
            }
            event.originalEvent.preventDefault();
            if (_this.filterable && _this.treeview['navigationService']['activeIndex'] === '0') {
                _this.filterInput.nativeElement.focus();
            }
        }));
    };
    DropDownTreeComponent.prototype.subscribeTouchEvents = function () {
        var _this = this;
        if (!kendo_angular_common_1.isDocumentAvailable() || !this.touchEnabled) {
            return;
        }
        this._zone.runOutsideAngular(function () {
            // Roll up DropDownTree on iOS when tapped outside
            return _this.touchstartDisposeHandler = _this.renderer.listen(document, 'touchstart', function (e) {
                var target = e.target;
                if (_this.isFocused && !util_1.inDropDown(_this.hostElement, target, _this.popupRef)) {
                    _this._zone.run(function () {
                        if (_this.isOpen) {
                            _this.treeview.blur();
                        }
                        _this.blur();
                    });
                }
            });
        });
    };
    DropDownTreeComponent.prototype.unsubscribeEvents = function () {
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
        if (this.touchstartDisposeHandler) {
            this.touchstartDisposeHandler();
        }
    };
    DropDownTreeComponent.prototype.assignAriaDescribedBy = function () {
        var currentValue = this.wrapper.nativeElement.getAttribute('aria-describedby') || '';
        // add to the current value - don't replace it (the aria-describedby is used by the FormField component as well)
        var newValue = (this.valueLabelId + " " + currentValue.trim()).trim();
        this.renderer.setAttribute(this.wrapper.nativeElement, 'aria-describedby', newValue);
    };
    var DropDownTreeComponent_1;
    tslib_1.__decorate([
        core_1.HostBinding('class.k-widget'),
        core_1.HostBinding('class.k-dropdowntree'),
        core_1.HostBinding('class.k-dropdowntree-clearable'),
        tslib_1.__metadata("design:type", Boolean)
    ], DropDownTreeComponent.prototype, "hostClasses", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('attr.dir'),
        tslib_1.__metadata("design:type", String)
    ], DropDownTreeComponent.prototype, "direction", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('class.k-dropdowntree-clearable'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], DropDownTreeComponent.prototype, "clearable", null);
    tslib_1.__decorate([
        core_1.ContentChild(no_data_template_directive_1.NoDataTemplateDirective, { static: false }),
        tslib_1.__metadata("design:type", no_data_template_directive_1.NoDataTemplateDirective)
    ], DropDownTreeComponent.prototype, "noDataTemplate", void 0);
    tslib_1.__decorate([
        core_1.ContentChild(header_template_directive_1.HeaderTemplateDirective, { static: false }),
        tslib_1.__metadata("design:type", header_template_directive_1.HeaderTemplateDirective)
    ], DropDownTreeComponent.prototype, "headerTemplate", void 0);
    tslib_1.__decorate([
        core_1.ContentChild(footer_template_directive_1.FooterTemplateDirective, { static: false }),
        tslib_1.__metadata("design:type", footer_template_directive_1.FooterTemplateDirective)
    ], DropDownTreeComponent.prototype, "footerTemplate", void 0);
    tslib_1.__decorate([
        core_1.ContentChild(node_template_directive_1.NodeTemplateDirective, { static: false }),
        tslib_1.__metadata("design:type", node_template_directive_1.NodeTemplateDirective)
    ], DropDownTreeComponent.prototype, "nodeTemplate", void 0);
    tslib_1.__decorate([
        core_1.ContentChild(value_template_directive_1.ValueTemplateDirective, { static: false }),
        tslib_1.__metadata("design:type", value_template_directive_1.ValueTemplateDirective)
    ], DropDownTreeComponent.prototype, "valueTemplate", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('popupTemplate', { static: true }),
        tslib_1.__metadata("design:type", core_1.TemplateRef)
    ], DropDownTreeComponent.prototype, "popupTemplate", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('wrapper', { static: true }),
        tslib_1.__metadata("design:type", core_1.ElementRef)
    ], DropDownTreeComponent.prototype, "wrapper", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('container', { read: core_1.ViewContainerRef, static: true }),
        tslib_1.__metadata("design:type", core_1.ViewContainerRef)
    ], DropDownTreeComponent.prototype, "container", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('treeview', { static: false }),
        tslib_1.__metadata("design:type", kendo_angular_treeview_1.TreeViewComponent),
        tslib_1.__metadata("design:paramtypes", [kendo_angular_treeview_1.TreeViewComponent])
    ], DropDownTreeComponent.prototype, "treeview", null);
    tslib_1.__decorate([
        core_1.ViewChild('filterInput', { static: false }),
        tslib_1.__metadata("design:type", core_1.ElementRef)
    ], DropDownTreeComponent.prototype, "filterInput", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], DropDownTreeComponent.prototype, "open", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], DropDownTreeComponent.prototype, "opened", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], DropDownTreeComponent.prototype, "close", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], DropDownTreeComponent.prototype, "closed", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], DropDownTreeComponent.prototype, "nodeExpand", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], DropDownTreeComponent.prototype, "nodeCollapse", void 0);
    tslib_1.__decorate([
        core_1.Output('focus'),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], DropDownTreeComponent.prototype, "onFocus", void 0);
    tslib_1.__decorate([
        core_1.Output('blur'),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], DropDownTreeComponent.prototype, "onBlur", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], DropDownTreeComponent.prototype, "valueChange", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], DropDownTreeComponent.prototype, "filterChange", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], DropDownTreeComponent.prototype, "loading", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], DropDownTreeComponent.prototype, "clearButton", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], DropDownTreeComponent.prototype, "data", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DropDownTreeComponent.prototype, "value", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], DropDownTreeComponent.prototype, "textField", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], DropDownTreeComponent.prototype, "valueField", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number)
    ], DropDownTreeComponent.prototype, "valueDepth", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function)
    ], DropDownTreeComponent.prototype, "hasChildren", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function)
    ], DropDownTreeComponent.prototype, "fetchChildren", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], DropDownTreeComponent.prototype, "placeholder", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DropDownTreeComponent.prototype, "popupSettings", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DropDownTreeComponent.prototype, "dataItem", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number)
    ], DropDownTreeComponent.prototype, "listHeight", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], DropDownTreeComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], DropDownTreeComponent.prototype, "readonly", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], DropDownTreeComponent.prototype, "valuePrimitive", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], DropDownTreeComponent.prototype, "tabindex", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function)
    ], DropDownTreeComponent.prototype, "itemDisabled", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function)
    ], DropDownTreeComponent.prototype, "isNodeExpanded", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function)
    ], DropDownTreeComponent.prototype, "isNodeVisible", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], DropDownTreeComponent.prototype, "loadOnDemand", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], DropDownTreeComponent.prototype, "filterable", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], DropDownTreeComponent.prototype, "filter", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], DropDownTreeComponent.prototype, "focusableId", void 0);
    DropDownTreeComponent = DropDownTreeComponent_1 = tslib_1.__decorate([
        core_1.Component({
            exportAs: 'kendoDropDownTree',
            providers: [
                data_service_1.DataService,
                selection_service_1.SelectionService,
                navigation_service_1.NavigationService,
                disabled_items_service_1.DisabledItemsService,
                kendo_angular_l10n_1.LocalizationService,
                {
                    provide: kendo_angular_l10n_1.L10N_PREFIX,
                    useValue: 'kendo.dropdowntree'
                },
                {
                    multi: true,
                    provide: forms_1.NG_VALUE_ACCESSOR,
                    useExisting: core_1.forwardRef(function () { return DropDownTreeComponent_1; })
                },
                {
                    provide: kendo_angular_common_1.KendoInput,
                    useExisting: core_1.forwardRef(function () { return DropDownTreeComponent_1; })
                },
                {
                    provide: kendo_angular_treeview_1.DataBoundComponent,
                    useExisting: core_1.forwardRef(function () { return DropDownTreeComponent_1; })
                },
                {
                    provide: kendo_angular_treeview_1.ExpandableComponent,
                    useExisting: core_1.forwardRef(function () { return DropDownTreeComponent_1; })
                }
            ],
            selector: 'kendo-dropdowntree',
            template: "\n        <ng-container kendoDropDownTreeLocalizedMessages\n            i18n-noDataText=\"kendo.dropdowntree.noDataText|The text displayed in the popup when there are no items\"\n            noDataText=\"NO DATA FOUND\"\n\n            i18n-clearTitle=\"kendo.dropdowntree.clearTitle|The title of the clear button\"\n            clearTitle=\"clear\"\n        >\n        </ng-container>\n        <span\n            #wrapper\n            [ngClass]=\"{\n                'k-dropdown-wrap': true,\n                'k-state-disabled': this.disabled\n            }\"\n            [attr.id]=\"focusableId\"\n            role=\"listbox\"\n            aria-haspopup=\"tree\"\n            [attr.aria-expanded]=\"isOpen\"\n            [attr.aria-readonly]=\"readonly\"\n            [attr.tabindex]=\"tabindex\"\n            [attr.dir]=\"direction\"\n            (click)=\"handleClick()\"\n            (keydown)=\"handleKeydown($event)\"\n            [kendoEventsOutsideAngular]=\"{\n                focus: handleFocus,\n                blur: handleBlur\n            }\"\n            [scope]=\"this\"\n        >\n            <span\n                [attr.id]=\"valueLabelId\"\n                class=\"k-input\"\n            >\n                <ng-template *ngIf=\"valueTemplate\"\n                    [templateContext]=\"{\n                        templateRef: valueTemplate.templateRef,\n                        $implicit: dataItem\n                    }\">\n                </ng-template>\n                <ng-template [ngIf]=\"!valueTemplate\"> {{ text || placeholder }} </ng-template>\n            </span>\n            <span\n                *ngIf=\"!loading && !readonly && clearButton && text?.length\"\n                class=\"k-icon k-clear-value k-i-close\"\n                [style.visibility]=\"clearButtonVisiblity\"\n                aria-hidden=\"true\"\n                [attr.title]=\"messageFor('clearTitle')\"\n                (click)=\"clearValue($event)\"\n            >\n            </span>\n            <span class=\"k-select\" aria-hidden=\"true\">\n                <span class=\"k-icon k-i-arrow-60-down\"></span>\n            </span>\n        </span>\n        <ng-template #popupTemplate>\n            <span\n                *ngIf=\"filterable\"\n                class=\"k-list-filter\"\n            >\n                <input\n                    #filterInput\n                    (input)=\"handleFilterInputChange($event.target.value)\"\n                    [filterInput]=\"filterable && !touchEnabled\"\n                    (keydown.arrowdown)=\"handleKeydown($event)\"\n                    (keydown.alt.arrowup)=\"handleKeydown($event)\"\n                    [(ngModel)]=\"filter\"\n                    class=\"k-textbox\"\n                    role=\"textbox\"\n                    aria-haspopup=\"true\"\n                    aria-expanded=\"false\"\n                    tabindex=\"0\"\n                    aria-disabled=\"false\"\n                    aria-readonly=\"false\"\n                    [kendoEventsOutsideAngular]=\"{\n                        blur: handleBlur\n                    }\"\n                    [scope]=\"this\"\n                >\n                <span class=\"k-icon k-i-zoom\"></span>\n            </span>\n            <!--header template-->\n            <ng-template\n                *ngIf=\"headerTemplate\"\n                [templateContext]=\"{\n                    templateRef: headerTemplate?.templateRef\n                }\">\n            </ng-template>\n            <kendo-treeview\n                #treeview\n                *ngIf=\"data.length !== 0 && !allNodesHidden\"\n                [nodes]=\"data\"\n                [style.maxHeight.px]=\"listHeight\"\n                [animate]=\"false\"\n                [(selectedKeys)]=\"selectedKeys\"\n                [selectBy]=\"selectBy\"\n                [textField]=\"textField\"\n                kendoTreeViewSelectable\n                [children]=\"children\"\n                [hasChildren]=\"hasChildren\"\n                [loadOnDemand]=\"loadOnDemand\"\n                [isExpanded]=\"isNodeExpanded\"\n                [isDisabled]=\"itemDisabled\"\n                [nodeTemplate]=\"nodeTemplate\"\n                [filter]=\"filter\"\n                [isVisible]=\"isNodeVisible\"\n                (focusout)=\"handleBlur($event)\"\n                (keydown)=\"handleKeydown($event)\"\n                (selectionChange)=\"onSelectionChange($event)\"\n                (expand)=\"nodeExpand.emit($event)\"\n                (collapse)=\"nodeCollapse.emit($event)\"\n            >\n            </kendo-treeview>\n            <!--footer template-->\n            <ng-template\n                *ngIf=\"footerTemplate\"\n                [templateContext]=\"{\n                    templateRef: footerTemplate?.templateRef\n                }\">\n            </ng-template>\n            <!--no-data template-->\n            <div class=\"k-nodata\" *ngIf=\"data.length === 0 || allNodesHidden\">\n                <ng-template [ngIf]=\"noDataTemplate\"\n                    [templateContext]=\"{\n                        templateRef: noDataTemplate?.templateRef\n                    }\">\n                </ng-template>\n                <ng-template [ngIf]=\"!noDataTemplate\">\n                    <div>{{ messageFor('noDataText') }}</div>\n                </ng-template>\n            </div>\n        </ng-template>\n        <ng-container #container></ng-container>\n    ",
            changeDetection: core_1.ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__param(7, core_1.Optional()), tslib_1.__param(7, core_1.Inject(touch_enabled_1.TOUCH_ENABLED)),
        tslib_1.__metadata("design:paramtypes", [kendo_angular_popup_1.PopupService,
            navigation_service_1.NavigationService,
            core_1.Renderer2,
            core_1.ElementRef,
            core_1.NgZone,
            core_1.ChangeDetectorRef,
            kendo_angular_l10n_1.LocalizationService, Boolean])
    ], DropDownTreeComponent);
    return DropDownTreeComponent;
}());
exports.DropDownTreeComponent = DropDownTreeComponent;
