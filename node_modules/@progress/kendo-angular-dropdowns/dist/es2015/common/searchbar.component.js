/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
/* tslint:disable:member-ordering */
import * as tslib_1 from "tslib";
import { Component, Renderer2, Input, Output, EventEmitter, ViewChild, ElementRef, HostBinding } from '@angular/core';
import { isDocumentAvailable } from '@progress/kendo-angular-common';
import { Keys } from '@progress/kendo-angular-common';
import { combineStr } from './util';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * @hidden
 */
let SearchBarComponent = class SearchBarComponent {
    constructor(localization, renderer) {
        this.localization = localization;
        this.valueChange = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onClick = new EventEmitter();
        this.onNavigate = new EventEmitter();
        this.searchBarClass = true;
        this._userInput = "";
        this._previousValue = "";
        this._placeholder = "";
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        this.renderer = renderer;
    }
    get userInput() {
        return this._userInput;
    }
    set userInput(userInput) {
        this._userInput = userInput || "";
    }
    get value() {
        return this.input.nativeElement.value;
    }
    set placeholder(text) {
        this._placeholder = text || '';
        this.setInputSize();
    }
    get placeholder() {
        return this._placeholder;
    }
    ngOnInit() {
        this.localizationChangeSubscription = this.localization
            .changes.subscribe(({ rtl }) => this.direction = rtl ? 'rtl' : 'ltr');
    }
    ngOnChanges(changes) {
        let previousUserInput;
        if (this.input && (changes.userInput || changes.suggestedText)) {
            if (changes.userInput && changes.userInput.previousValue) {
                if (this._previousValue === changes.userInput.previousValue) {
                    previousUserInput = this._previousValue;
                }
                else {
                    previousUserInput = changes.userInput.currentValue || "";
                }
            }
            else {
                previousUserInput = this._previousValue;
            }
            const caretIndex = this.input.nativeElement.selectionStart;
            const caretAtEnd = previousUserInput.length === caretIndex;
            this.writeInputValue(this.suggestedText ? combineStr(this.userInput, this.suggestedText) : this.userInput);
            if (this.suggestedText) {
                this.setInputSelection(this.userInput.length, this.suggestedText.length);
            }
            else if (caretAtEnd) {
                this.setInputSelection(this.userInput.length, this.userInput.length);
            }
            else {
                this.setInputSelection(caretIndex, caretIndex);
            }
            this._previousValue = this.userInput;
        }
    }
    ngOnDestroy() {
        if (this.localizationChangeSubscription) {
            this.localizationChangeSubscription.unsubscribe();
        }
    }
    writeInputValue(text) {
        if (isDocumentAvailable()) {
            this.renderer.setProperty(this.input.nativeElement, 'value', text);
        }
    }
    setInputSelection(start, end) {
        if (isDocumentAvailable() && this.input.nativeElement === document.activeElement) {
            try {
                this.input.nativeElement.setSelectionRange(start, end);
            }
            catch (e) {
                //Make sure that the element is in the DOM before you invoke its methods
            }
        }
    }
    handleInput(event) {
        const value = event.target.value;
        if (value !== this.userInput) {
            this._previousValue = value;
            this.valueChange.emit(value);
        }
    }
    handleFocus(event) {
        this.onFocus.emit(event);
    }
    handleBlur(event) {
        this.onBlur.emit(event);
    }
    handleKeydown(event) {
        const keyCode = event.keyCode;
        const keys = [Keys.ArrowUp, Keys.ArrowDown, Keys.ArrowLeft, Keys.ArrowRight, Keys.Enter,
            Keys.Escape, Keys.Delete, Keys.Backspace, Keys.Home, Keys.End];
        if (keys.indexOf(keyCode) > -1) {
            this.onNavigate.emit(event);
        }
    }
    focus() {
        if (isDocumentAvailable()) {
            this.input.nativeElement.focus();
        }
    }
    blur() {
        if (isDocumentAvailable()) {
            this.input.nativeElement.blur();
        }
    }
    setInputSize() {
        const lengthOf = x => x ? x.length : 0;
        const input = this.input.nativeElement;
        const placeholderLength = lengthOf(this.placeholder);
        const textLength = lengthOf(this.value);
        const size = Math.max(placeholderLength, textLength, 1);
        this.renderer.setAttribute(input, 'size', size.toString());
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], SearchBarComponent.prototype, "id", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], SearchBarComponent.prototype, "listId", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], SearchBarComponent.prototype, "tagListId", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], SearchBarComponent.prototype, "activeDescendant", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], SearchBarComponent.prototype, "noDataLabel", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], SearchBarComponent.prototype, "disabled", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], SearchBarComponent.prototype, "readonly", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], SearchBarComponent.prototype, "tabIndex", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], SearchBarComponent.prototype, "popupOpen", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], SearchBarComponent.prototype, "role", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], SearchBarComponent.prototype, "userInput", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], SearchBarComponent.prototype, "suggestedText", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], SearchBarComponent.prototype, "valueChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], SearchBarComponent.prototype, "onBlur", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], SearchBarComponent.prototype, "onFocus", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], SearchBarComponent.prototype, "onClick", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], SearchBarComponent.prototype, "onNavigate", void 0);
tslib_1.__decorate([
    ViewChild('input', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], SearchBarComponent.prototype, "input", void 0);
tslib_1.__decorate([
    HostBinding('class.k-searchbar'),
    tslib_1.__metadata("design:type", Boolean)
], SearchBarComponent.prototype, "searchBarClass", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], SearchBarComponent.prototype, "placeholder", null);
SearchBarComponent = tslib_1.__decorate([
    Component({
        selector: 'kendo-searchbar',
        template: `
        <input #input
            autocomplete="off"
            [id]="id"
            [disabled]="disabled"
            [readonly]="readonly"
            [placeholder]="placeholder"
            [class]="'k-input'"
            (input)="handleInput($event)"
            (keydown)="handleKeydown($event)"
            [kendoEventsOutsideAngular]="{
                focus: handleFocus,
                blur: handleBlur
            }"
            [scope]="this"
            [attr.tabIndex]="tabIndex"
            [attr.dir]="direction"
            [attr.role]="role"
            [attr.aria-disabled]="disabled"
            [attr.aria-readonly]="readonly"
            aria-haspopup="listbox"
            [attr.aria-expanded]="popupOpen"
            [attr.aria-owns]="listId"
            [attr.aria-describedby]="tagListId"
            [attr.aria-activedescendant]="activeDescendant"
            [attr.aria-label]="noDataLabel"
        />
   `
    }),
    tslib_1.__metadata("design:paramtypes", [LocalizationService,
        Renderer2])
], SearchBarComponent);
export { SearchBarComponent };
