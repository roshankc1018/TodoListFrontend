{"version":3,"file":"multicolumncombobox.component.d.ts","sources":["multicolumncombobox.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, OnDestroy, QueryList, Renderer2 } from '@angular/core';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { PopupService } from '@progress/kendo-angular-popup';\nimport { ComboBoxComponent } from './combobox.component';\nimport { ComboBoxColumnComponent } from './combobox-column/combobox-column.component';\nimport { DataService } from '../common/data.service';\nimport { DisabledItemsService } from '../common/disabled-items/disabled-items.service';\nimport { NavigationService } from '../common/navigation/navigation.service';\nimport { SelectionService } from '../common/selection/selection.service';\nimport { FilterableComponent } from '../common/filtering/filterable-component';\n/**\n * Represents the [Kendo UI MultiColumnComboBox component for Angular]({% slug overview_multicolumncombobox %}).\n */\nexport declare class MultiColumnComboBoxComponent extends ComboBoxComponent implements AfterViewInit, OnDestroy, FilterableComponent {\n    /**\n     * @hidden\n     */\n    hostClasses: boolean;\n    /**\n     * A query list of all declared columns.\n     */\n    columns: QueryList<ComboBoxColumnComponent>;\n    /**\n     * @hidden\n     */\n    header: ElementRef<HTMLElement>;\n    protected readonly popupWidth: {\n        min: string;\n        max: string;\n    };\n    private removeWindowResizeListener;\n    /**\n     * @hidden\n     */\n    protected readonly listContainerClasses: string[];\n    constructor(localization: LocalizationService, popupService: PopupService, selectionService: SelectionService, navigationService: NavigationService, disabledItemsService: DisabledItemsService, dataService: DataService, zone: NgZone, changeDetector: ChangeDetectorRef, renderer: Renderer2, hostElement: ElementRef<HTMLElement>, touchEnabled: boolean);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    textFrom(dataItem: any, field: string): string;\n    /**\n     * @hidden\n     *\n     * Adds or removes a padding value at the end of the header container equal to the size of the scrollbar.\n     * As when the items container has a scrollbar, the column headers and the cells are misaligned.\n     * When the container has a scrollbar, the padding style is added, and when there is none - it is removed.\n     */\n    updateHeaderPadding(header: HTMLElement): void;\n    protected verifySettings(): void;\n    private addWindowResizeListener;\n    private updateColumnsMediaState;\n}\n"]}