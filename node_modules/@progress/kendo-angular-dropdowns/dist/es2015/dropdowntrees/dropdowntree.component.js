/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
var DropDownTreeComponent_1;
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostBinding, Input, Output, NgZone, Renderer2, TemplateRef, ViewChild, ChangeDetectorRef, ContentChild, forwardRef, ViewContainerRef, isDevMode, Optional, Inject } from '@angular/core';
import { anyChanged, guid, hasObservers, isDocumentAvailable, KendoInput } from '@progress/kendo-angular-common';
import { PopupService } from '@progress/kendo-angular-popup';
import { TreeViewComponent, DataBoundComponent, ExpandableComponent } from '@progress/kendo-angular-treeview';
import { getter } from '@progress/kendo-common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DataService } from '../common/data.service';
import { DisabledItemsService } from '../common/disabled-items/disabled-items.service';
import { NavigationService } from '../common/navigation/navigation.service';
import { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';
import { SelectionService } from '../common/selection/selection.service';
import { PreventableEvent } from '../common/models/preventable-event';
import { inDropDown, isArray, isPresent, isUntouched, noop } from '../common/util';
import { NoDataTemplateDirective } from '../common/templates/no-data-template.directive';
import { of } from 'rxjs';
import { tap } from 'rxjs/operators';
import { HeaderTemplateDirective } from '../common/templates/header-template.directive';
import { FooterTemplateDirective } from '../common/templates/footer-template.directive';
import { NodeTemplateDirective } from './templates/node-template.directive';
import { DropDownTreeMessages } from '../common/constants/error-messages';
import { TOUCH_ENABLED } from '../common/constants/touch-enabled';
import { ValueTemplateDirective } from '../common/templates/value-template.directive';
/* tslint:disable:member-ordering */
const DEFAULT_POPUP_SETTINGS = { animate: true };
const hasChildren = () => false;
const ɵ0 = hasChildren;
const fetchChildren = () => of([]);
const ɵ1 = fetchChildren;
const itemDisabled = () => false;
const ɵ2 = itemDisabled;
const isNodeVisible = () => true;
const ɵ3 = isNodeVisible;
/**
 * Represents the [Kendo UI DropDownTree component for Angular]({% slug overview_ddt %}).
 */
let DropDownTreeComponent = DropDownTreeComponent_1 = class DropDownTreeComponent {
    constructor(popupService, navigationService, renderer, hostElement, _zone, cdr, localization, touchEnabled) {
        this.popupService = popupService;
        this.navigationService = navigationService;
        this.renderer = renderer;
        this.hostElement = hostElement;
        this._zone = _zone;
        this.cdr = cdr;
        this.localization = localization;
        this.touchEnabled = touchEnabled;
        this.hostClasses = true;
        /**
         * Fires each time the popup is about to open
         * ([see example]({% slug openstate_ddt %})).
         * This event is preventable. If you cancel it, the popup will remain closed.
         */
        this.open = new EventEmitter();
        /**
         * Fires after the popup has been opened.
         */
        this.opened = new EventEmitter();
        /**
         * Fires each time the popup is about to close
         * ([see example]({% slug openstate_ddt %})).
         * This event is preventable. If you cancel it, the popup will remain open.
         */
        this.close = new EventEmitter();
        /**
         * Fires after the popup has been closed.
         */
        this.closed = new EventEmitter();
        /**
         * Fires when the user expands a node in the popup TreeView.
         */
        this.nodeExpand = new EventEmitter();
        /**
         * Fires when the user collapses a node in the popup TreeView.
         */
        this.nodeCollapse = new EventEmitter();
        /**
         * Fires each time the user focuses the DropDownTree.
         */
        this.onFocus = new EventEmitter();
        /**
         * Fires each time the DropDownTree gets blurred.
         */
        this.onBlur = new EventEmitter();
        /**
         * Fires each time the value is changed
         * ([see example]({% slug overview_ddt %}#toc-events)).
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires when the value of the built-in filter input element changes.
         */
        this.filterChange = new EventEmitter();
        /**
         * If set to `true`, renders a button on hovering over the component.
         * Clicking this button resets the value of the component to `undefined` and triggers the `change` event.
         */
        this.clearButton = true;
        /**
         * A function which determines if a specific node has child nodes.
         */
        this.hasChildren = hasChildren;
        /**
         * A function which provides the child nodes for a given parent node.
         */
        this.fetchChildren = fetchChildren;
        /**
         * The hint which is displayed when the component is empty.
         */
        this.placeholder = "";
        /**
         * Sets the height of the options list. By default, `listHeight` is 200px.
         *
         * > The `listHeight` property affects only the list of options and not the whole popup container.
         * > To set the height of the popup container, use `popupSettings.height`.
         */
        this.listHeight = 200;
        /**
         * Sets the disabled state of the component.
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the component.
         */
        this.readonly = false;
        /**
         * Specifies the type of the selected value
         * ([more information and example]({% slug valuebinding_ddt %}#toc-primitive-values)).
         * If set to `true`, the selected value has to be of a primitive value.
         */
        this.valuePrimitive = false;
        /**
         * A function that is executed for each data item and determines if a specific item is disabled.
         */
        this.itemDisabled = itemDisabled;
        /**
         * A callback which determines whether a tree node should be rendered as hidden. The utility .k-display-none class is used to hide the nodes.
         * Useful for custom filtering implementations.
         */
        this.isNodeVisible = isNodeVisible;
        /**
         * Indicates whether the child nodes will be fetched on node expand or will be initially prefetched.
         * @default true
         */
        this.loadOnDemand = true;
        /**
         * Renders the built-in input element for filtering the DropDownTree.
         * If set to `true`, the component emits the `filterChange` event, which can be used to [filter the DropDownTree manually]({% slug filtering_ddt %}#toc-manual-filtering).
         * A built-in filtering implementation is available to use with the [`kendoDropDownTreeHierarchyBinding`]({% slug api_dropdowns_dropdowntreehierarchybindingdirective %}) and [`kendoDropDownTreeFlatBinding`]({% slug api_dropdowns_dropdowntreeflatbindingdirective %}) directives.
         */
        this.filterable = false;
        /**
         * @hidden
         */
        this.filter = '';
        /**
         * @hidden
         *
         * Used by the kendo-label and kendo-floatinglabel to access and associate the focusable element with the provided label via aria-labelledby.
         */
        this.focusableId = `k-${guid()}`;
        /**
         * @hidden
         */
        this.selectedKeys = [];
        /**
         * @hidden
         */
        this.filterStateChange = new EventEmitter();
        /**
         * @hidden
         */
        this.allNodesHidden = false;
        /**
         * @hidden
         *
         * Used to associate the value label with the wrapper via aria-describedby.
         */
        this.valueLabelId = `k-${guid()}`;
        this._popupSettings = DEFAULT_POPUP_SETTINGS;
        this._tabindex = 0;
        this._isFocused = false;
        this.subscriptions = [];
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        this.subscribeEvents();
        this.subscribeTouchEvents();
    }
    get clearable() {
        return this.clearButton;
    }
    set treeview(treeview) {
        if (treeview) {
            if (this.isFocused && !this.filterable || this.touchEnabled) {
                treeview.focus();
            }
            // the treeview animations are initially disabled (we don't want expand animations during popup opening)
            // re-enables the animations for user interaction
            treeview.animate = true;
            this._treeview = treeview;
        }
    }
    get treeview() {
        return this._treeview;
    }
    /**
     * Sets the data of the DropDownTree.
     *
     * > The data has to be provided in an array-like list with objects.
     */
    set data(data) {
        this._nodes = data;
        this.setState();
    }
    get data() {
        return this._nodes;
    }
    /**
     * Sets the value of the DropDownTree.
     * It can either be of the primitive (string, numbers) or of the complex (objects) type.
     * To define the type, use the `valuePrimitive` option.
     *
     */
    set value(newValue) {
        this._value = newValue;
        this.setState();
    }
    get value() {
        return this._value;
    }
    /**
     * Configures the popup of the DropDownTree.
     *
     * The available options are:
     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `width: Number | String`&mdash;Sets the width of the popup container. By default, the width of the host element is used. If set to `auto`, the component automatically adjusts the width of the popup and no item labels are wrapped.
     * - `height: Number`&mdash;Sets the height of the popup container.
     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     * - `appendTo: "root" | "component" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.
     */
    set popupSettings(settings) {
        this._popupSettings = Object.assign({}, DEFAULT_POPUP_SETTINGS, settings);
    }
    get popupSettings() {
        return this._popupSettings;
    }
    /**
     * Keeps the current `dataItem` object in order to resolve selection.
     * Needs to be provided when `value` is bound in and `valuePrimitive` is set to true.
     */
    set dataItem(item) {
        this._dataItem = item;
        this.setState();
    }
    get dataItem() {
        return this._dataItem ? this._dataItem : this.value;
    }
    /**
     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    set tabindex(value) {
        const providedTabIndex = Number(value);
        const defaultTabIndex = 0;
        this._tabindex = !isNaN(providedTabIndex) ? providedTabIndex : defaultTabIndex;
    }
    get tabindex() {
        return this.disabled ? -1 : this._tabindex;
    }
    set isFocused(isFocused) {
        this.renderer[isFocused ? 'addClass' : 'removeClass'](this.wrapper.nativeElement, 'k-state-focused');
        this._isFocused = isFocused;
    }
    get isFocused() {
        return this._isFocused;
    }
    get width() {
        const wrapperWidth = this.wrapper.nativeElement.offsetWidth;
        const width = this.popupSettings.width || wrapperWidth;
        const minWidth = isNaN(wrapperWidth) ? wrapperWidth : `${wrapperWidth}px`;
        const maxWidth = isNaN(width) ? width : `${width}px`;
        return { min: minWidth, max: maxWidth };
    }
    get height() {
        const popupHeight = this.popupSettings.height;
        return isPresent(popupHeight) ? `${popupHeight}px` : 'auto';
    }
    /**
     * Returns the current open state of the popup.
     */
    get isOpen() {
        return isPresent(this.popupRef);
    }
    get clearButtonVisiblity() {
        if (this.touchEnabled) {
            return 'visible';
        }
    }
    /**
     * @hidden
     *
     * Alias for `isNodeExpanded`. Used for compatibility with the `ExpandableComponent` interface.
     * Required for the expand-directive.
     */
    set isExpanded(callback) {
        this.isNodeExpanded = callback;
    }
    get isExpanded() {
        return this.isNodeExpanded;
    }
    /**
     * @hidden
     *
     * Alias for `nodeExpand`. Used for compatibility with the `ExpandableComponent` interface.
     * Required for the expand-directive.
     */
    get expand() {
        return this.nodeExpand;
    }
    /**
     * @hidden
     *
     * Alias for `nodeCollapse`. Used for compatibility with the `ExpandableComponent` interface.
     * Required for the expand-directive.
     */
    get collapse() {
        return this.nodeCollapse;
    }
    /**
     * @hidden
     *
     * Alias for `data`. Used for compatibility with the `DataBoundComponent` interface.
     * Required for the data-binding directives.
     */
    set nodes(nodes) {
        this.data = nodes;
    }
    get nodes() {
        return this.data;
    }
    /**
     * @hidden
     *
     * Alias for `fetchChildren`. Used for compatibility with the `DataBoundComponent` interface.
     * Required for the data-binding directives
     */
    set children(callback) {
        this.fetchChildren = callback;
    }
    get children() {
        return this.fetchChildren;
    }
    /**
     * @hidden
     *
     * Alias for `isNodeVisible`. Used for compatibility with the `DataBoundComponent` interface.
     * The `DataBoundComponent` interface is used in the data-binding directives.
     */
    set isVisible(callback) {
        this.isNodeVisible = callback;
    }
    get isVisible() {
        return this.isNodeVisible;
    }
    ngOnInit() {
        this.renderer.removeAttribute(this.hostElement.nativeElement, 'tabindex');
        this.assignAriaDescribedBy();
        this.subscriptions.push(this.localization
            .changes.subscribe(({ rtl }) => {
            this.direction = rtl ? 'rtl' : 'ltr';
            this.cdr.markForCheck();
        }));
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this.destroyPopup();
        this.unsubscribeEvents();
    }
    /**
     * @hidden
     */
    ngOnChanges(changes) {
        if (anyChanged(['textField', 'valueField', 'valuePrimitive'], changes, false)) {
            this.setState();
        }
    }
    /**
     * @hidden
     */
    ngAfterContentChecked() {
        this.verifySettings();
    }
    /**
     * @hidden
     *
     * Used by the kendo-floatinglabel component to determine if the floating label
     * should be rendered inside the input when the component is not focused.
     */
    isEmpty() {
        return !this.text && !this.placeholder;
    }
    /**
     * @hidden
     */
    togglePopup(open) {
        const isDisabled = this.disabled || this.readonly;
        const sameState = this.isOpen === open;
        if (isDisabled || sameState) {
            return;
        }
        const togglePrevented = this.triggerPopupEvents(open);
        if (!togglePrevented) {
            open ?
                this.createPopup() :
                this.destroyPopup();
        }
    }
    /**
     * @hidden
     */
    handleFocus() {
        if (!this.isFocused) {
            this.isFocused = true;
            if (hasObservers(this.onFocus)) {
                this._zone.run(() => {
                    this.onFocus.emit();
                });
            }
        }
    }
    /**
     * @hidden
     */
    handleBlur(e) {
        const relatedTarget = e && e.relatedTarget;
        if (this.hostElement.nativeElement.contains(relatedTarget) ||
            (this.isOpen && this.popupRef.popupElement.contains(relatedTarget))) {
            return;
        }
        this.isFocused = false;
        if (hasObservers(this.onBlur) ||
            isUntouched(this.hostElement.nativeElement)) {
            this._zone.run(() => {
                this.togglePopup(false);
                this.onBlur.emit();
                this.onTouchedCallback();
            });
        }
        else {
            this.togglePopup(false);
        }
    }
    /**
     * @hidden
     */
    handleKeydown(event) {
        if (this.disabled || this.readonly) {
            return;
        }
        const eventData = event;
        this.navigationService.process({
            originalEvent: eventData
        });
    }
    /**
     * @hidden
     */
    handleClick() {
        this.togglePopup(!this.isOpen);
    }
    /**
     * Focuses a specific item of the DropDownTree based on a provided index in the format of `1_1`.
     * The targeted item should be expanded in order for it to be focused.
     * If null or invalid index is provided the focus will be set on the first item.
     */
    focusItemAt(index) {
        if (this.treeview) {
            const lookup = this.treeview.itemLookup(index);
            let isItemDisabled = !isPresent(lookup) || this.treeview.isDisabled(lookup.item.dataItem, lookup.item.index);
            if (!isItemDisabled) {
                this.treeview.focus(index);
            }
        }
    }
    /**
     * Focuses the DropDownTree.
     */
    focus() {
        if (!this.disabled) {
            this.wrapper.nativeElement.focus();
        }
    }
    /**
     * Blurs the DropDownTree.
     */
    blur() {
        if (!this.disabled) {
            this.wrapper.nativeElement.blur();
        }
    }
    /**
     * Resets the value of the DropDownTree.
     * If you use the `reset` method to clear the value of the component,
     * the model will not update automatically and the `valueChange` event will not be fired.
     */
    reset() {
        this.value = undefined;
        this.dataItem = undefined;
    }
    /**
     * Toggles the visibility of the popup
     * ([see example]({% slug openstate_ddt %})).
     * If you use the `toggle` method to open or close the popup, the `open` and `close` events will not be fired.
     *
     * @param open - The state of the popup.
     */
    toggle(open) {
        // The Promise is required to open the popup on load.
        // Otherwise, the "ViewContainerRef not found..." error will be thrown.
        Promise.resolve(null).then(() => {
            const shouldOpen = isPresent(open) ? open : !isPresent(this.popupRef);
            this.destroyPopup();
            if (shouldOpen) {
                this.createPopup();
            }
        });
    }
    /**
     * @hidden
     */
    get popupContainerClasses() {
        const containerClasses = ['k-popup-dropdowntree', 'k-reset', 'k-group', 'k-list-container'];
        if (this.popupSettings.popupClass) {
            containerClasses.push(this.popupSettings.popupClass);
        }
        return containerClasses;
    }
    /**
     * @hidden
     */
    onSelectionChange({ dataItem, index }) {
        this.valueDepth = index.split('_').length - 1;
        const valueField = this.getField(this.valueField, dataItem);
        const newValue = this.valuePrimitive ?
            getter(valueField)(dataItem) :
            dataItem;
        const shouldUpdateValue = newValue !== this.value;
        if (shouldUpdateValue) {
            this.dataItem = dataItem;
            this.value = newValue;
            this.emitValueChange(this.value);
        }
        this.togglePopup(false);
        this.focus();
    }
    /**
     * @hidden
     */
    messageFor(key) {
        return this.localization.get(key);
    }
    /**
     * @hidden
     */
    clearValue(event) {
        event.stopImmediatePropagation();
        this.focus();
        this.value = undefined;
        this.dataItem = undefined;
        this.clearState();
        this.valueChange.emit(undefined);
        this.emitValueChange();
    }
    get appendTo() {
        const { appendTo } = this.popupSettings;
        if (!appendTo || appendTo === 'root') {
            return undefined;
        }
        return appendTo === 'component' ? this.container : appendTo;
    }
    /**
     * @hidden
     */
    preventEventDefault(event) {
        event.preventDefault();
    }
    /**
     * @hidden
     */
    writeValue(value) {
        // If the user resets the value by providing null/undefined we need to reset the `dataItem`
        // Because upon initialization of the component the `writeValue` is being called twice -
        // first time with `null` value regardless of sync/async value - an extra check is added to
        // distinguish between client reset and initial phanotm 'null' value
        if (!isPresent(value) && isPresent(this.value)) {
            this.dataItem = null;
        }
        this.value = value === null ? undefined : value;
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @hidden
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     */
    handleFilterInputChange(term) {
        this.filterChange.next(term);
        this.allNodesHidden = this.nodes.every((node, index) => !this.isVisible(node, String(index)));
    }
    verifySettings() {
        if (!isDevMode()) {
            return;
        }
        if (this.valuePrimitive === true && isPresent(this.value) && typeof this.value === "object") {
            throw new Error(DropDownTreeMessages.primitive);
        }
        if (this.valuePrimitive === true && isPresent(this.value) && typeof this.dataItem !== "object") {
            throw new Error(DropDownTreeMessages.dataItem);
        }
        if (this.valuePrimitive === false && isPresent(this.value) && typeof this.value !== "object") {
            throw new Error(DropDownTreeMessages.object);
        }
        if (!isPresent(this.valueField) || !isPresent(this.textField)) {
            throw new Error(DropDownTreeMessages.textAndValue);
        }
        if ((isArray(this.valueField) || isArray(this.textField)) && isPresent(this.value) && !isPresent(this.valueDepth)) {
            throw new Error(DropDownTreeMessages.valueDepth);
        }
    }
    emitValueChange(value) {
        this.onChangeCallback(value);
        this.valueChange.emit(value);
    }
    getText(textField, dataItem) {
        if (isPresent(dataItem) && isPresent(textField)) {
            const field = this.getField(textField, dataItem);
            return getter(field)(dataItem);
        }
        return null;
    }
    /**
     * @hidden
     *
     * Determines the `valueField` and `textField` for a specific level in the data set
     *  @param field - the field value (string | string[])
     *  @param value - current value
     */
    getField(field, value) {
        const fieldsCount = field.length - 1;
        if (typeof field === 'string') {
            // If the `valueField` | `textField` is the same for all levels
            return field;
        }
        else if (isPresent(this.valueDepth)) {
            // When `valueDepth` can be defined from the index on selectionChange or provided by the user
            return fieldsCount < this.valueDepth ? field[fieldsCount] : field[this.valueDepth];
        }
        else {
            // Fallback: Look to find a match of each field in the current data item
            // Side effect may occur if all of the listed fields are present in the data item
            return field.find(item => item in value);
        }
    }
    triggerPopupEvents(open) {
        const eventArgs = new PreventableEvent();
        if (open) {
            this.open.emit(eventArgs);
        }
        else {
            this.close.emit(eventArgs);
        }
        return eventArgs.isDefaultPrevented();
    }
    createPopup() {
        const horizontalAlign = this.direction === "rtl" ? "right" : "left";
        const anchorPosition = { horizontal: horizontalAlign, vertical: 'bottom' };
        const popupPosition = { horizontal: horizontalAlign, vertical: 'top' };
        this.popupRef = this.popupService.open({
            anchor: this.wrapper,
            appendTo: this.appendTo,
            anchorAlign: anchorPosition,
            content: this.popupTemplate,
            popupAlign: popupPosition,
            positionMode: 'absolute',
            popupClass: this.popupContainerClasses
        });
        const popupWrapper = this.popupRef.popupElement;
        const { min, max } = this.width;
        popupWrapper.style.minWidth = min;
        popupWrapper.style.width = max;
        popupWrapper.style.height = this.height;
        popupWrapper.setAttribute("dir", this.direction);
        this.popupRef.popupOpen.subscribe(() => {
            this.cdr.detectChanges();
            this.opened.emit();
        });
        this.popupRef.popupClose.subscribe(() => {
            this.closed.emit();
        });
    }
    destroyPopup() {
        if (this.popupRef) {
            this.popupRef.close();
            this.popupRef = null;
            if (this.filter !== "") {
                this.filter = "";
                this.allNodesHidden = false;
                if (hasObservers(this.filterChange)) {
                    this._zone.run(() => {
                        this.filterChange.emit("");
                    });
                }
            }
        }
    }
    handleEscape() {
        this.togglePopup(false);
        this.focus();
    }
    setState() {
        if (isPresent(this.value) && isPresent(this.dataItem) && isPresent(this.valueField)) {
            this.text = this.getText(this.textField, this.dataItem);
            const valueField = this.getField(this.valueField, this.dataItem);
            this.selectBy = valueField;
            this.selectedKeys = [getter(valueField)(this.dataItem)];
        }
        else {
            this.clearState();
        }
        this.cdr.markForCheck();
    }
    clearState() {
        this.text = undefined;
        this.valueDepth = undefined;
        this.selectedKeys = [];
    }
    subscribeEvents() {
        this.subscriptions.push(this.navigationService.open.subscribe(() => this.togglePopup(true)), this.navigationService.close.subscribe(() => {
            this.togglePopup(false);
            this.focus();
        }), this.navigationService.enter
            .pipe(tap((event) => event.originalEvent.preventDefault()))
            .subscribe(() => this.togglePopup(true)), this.navigationService.esc
            .subscribe(() => this.handleEscape()), this.navigationService.tab.subscribe(() => this.focus()), this.navigationService.down.subscribe((event) => {
            if (!this.treeview) {
                return;
            }
            event.originalEvent.preventDefault();
            if (!this.treeview.isActive) {
                this.treeview.focus();
            }
        }), this.navigationService.up.subscribe((event) => {
            if (!this.treeview) {
                return;
            }
            event.originalEvent.preventDefault();
            if (this.filterable && this.treeview['navigationService']['activeIndex'] === '0') {
                this.filterInput.nativeElement.focus();
            }
        }));
    }
    subscribeTouchEvents() {
        if (!isDocumentAvailable() || !this.touchEnabled) {
            return;
        }
        this._zone.runOutsideAngular(() => 
        // Roll up DropDownTree on iOS when tapped outside
        this.touchstartDisposeHandler = this.renderer.listen(document, 'touchstart', (e) => {
            const target = e.target;
            if (this.isFocused && !inDropDown(this.hostElement, target, this.popupRef)) {
                this._zone.run(() => {
                    if (this.isOpen) {
                        this.treeview.blur();
                    }
                    this.blur();
                });
            }
        }));
    }
    unsubscribeEvents() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
        if (this.touchstartDisposeHandler) {
            this.touchstartDisposeHandler();
        }
    }
    assignAriaDescribedBy() {
        const currentValue = this.wrapper.nativeElement.getAttribute('aria-describedby') || '';
        // add to the current value - don't replace it (the aria-describedby is used by the FormField component as well)
        const newValue = `${this.valueLabelId} ${currentValue.trim()}`.trim();
        this.renderer.setAttribute(this.wrapper.nativeElement, 'aria-describedby', newValue);
    }
};
tslib_1.__decorate([
    HostBinding('class.k-widget'),
    HostBinding('class.k-dropdowntree'),
    HostBinding('class.k-dropdowntree-clearable'),
    tslib_1.__metadata("design:type", Boolean)
], DropDownTreeComponent.prototype, "hostClasses", void 0);
tslib_1.__decorate([
    HostBinding('attr.dir'),
    tslib_1.__metadata("design:type", String)
], DropDownTreeComponent.prototype, "direction", void 0);
tslib_1.__decorate([
    HostBinding('class.k-dropdowntree-clearable'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], DropDownTreeComponent.prototype, "clearable", null);
tslib_1.__decorate([
    ContentChild(NoDataTemplateDirective, { static: false }),
    tslib_1.__metadata("design:type", NoDataTemplateDirective)
], DropDownTreeComponent.prototype, "noDataTemplate", void 0);
tslib_1.__decorate([
    ContentChild(HeaderTemplateDirective, { static: false }),
    tslib_1.__metadata("design:type", HeaderTemplateDirective)
], DropDownTreeComponent.prototype, "headerTemplate", void 0);
tslib_1.__decorate([
    ContentChild(FooterTemplateDirective, { static: false }),
    tslib_1.__metadata("design:type", FooterTemplateDirective)
], DropDownTreeComponent.prototype, "footerTemplate", void 0);
tslib_1.__decorate([
    ContentChild(NodeTemplateDirective, { static: false }),
    tslib_1.__metadata("design:type", NodeTemplateDirective)
], DropDownTreeComponent.prototype, "nodeTemplate", void 0);
tslib_1.__decorate([
    ContentChild(ValueTemplateDirective, { static: false }),
    tslib_1.__metadata("design:type", ValueTemplateDirective)
], DropDownTreeComponent.prototype, "valueTemplate", void 0);
tslib_1.__decorate([
    ViewChild('popupTemplate', { static: true }),
    tslib_1.__metadata("design:type", TemplateRef)
], DropDownTreeComponent.prototype, "popupTemplate", void 0);
tslib_1.__decorate([
    ViewChild('wrapper', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], DropDownTreeComponent.prototype, "wrapper", void 0);
tslib_1.__decorate([
    ViewChild('container', { read: ViewContainerRef, static: true }),
    tslib_1.__metadata("design:type", ViewContainerRef)
], DropDownTreeComponent.prototype, "container", void 0);
tslib_1.__decorate([
    ViewChild('treeview', { static: false }),
    tslib_1.__metadata("design:type", TreeViewComponent),
    tslib_1.__metadata("design:paramtypes", [TreeViewComponent])
], DropDownTreeComponent.prototype, "treeview", null);
tslib_1.__decorate([
    ViewChild('filterInput', { static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], DropDownTreeComponent.prototype, "filterInput", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DropDownTreeComponent.prototype, "open", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DropDownTreeComponent.prototype, "opened", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DropDownTreeComponent.prototype, "close", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DropDownTreeComponent.prototype, "closed", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DropDownTreeComponent.prototype, "nodeExpand", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DropDownTreeComponent.prototype, "nodeCollapse", void 0);
tslib_1.__decorate([
    Output('focus'),
    tslib_1.__metadata("design:type", EventEmitter)
], DropDownTreeComponent.prototype, "onFocus", void 0);
tslib_1.__decorate([
    Output('blur'),
    tslib_1.__metadata("design:type", EventEmitter)
], DropDownTreeComponent.prototype, "onBlur", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DropDownTreeComponent.prototype, "valueChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DropDownTreeComponent.prototype, "filterChange", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], DropDownTreeComponent.prototype, "loading", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], DropDownTreeComponent.prototype, "clearButton", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], DropDownTreeComponent.prototype, "data", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], DropDownTreeComponent.prototype, "value", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DropDownTreeComponent.prototype, "textField", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DropDownTreeComponent.prototype, "valueField", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], DropDownTreeComponent.prototype, "valueDepth", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Function)
], DropDownTreeComponent.prototype, "hasChildren", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Function)
], DropDownTreeComponent.prototype, "fetchChildren", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], DropDownTreeComponent.prototype, "placeholder", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], DropDownTreeComponent.prototype, "popupSettings", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], DropDownTreeComponent.prototype, "dataItem", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], DropDownTreeComponent.prototype, "listHeight", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], DropDownTreeComponent.prototype, "disabled", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], DropDownTreeComponent.prototype, "readonly", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], DropDownTreeComponent.prototype, "valuePrimitive", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], DropDownTreeComponent.prototype, "tabindex", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Function)
], DropDownTreeComponent.prototype, "itemDisabled", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Function)
], DropDownTreeComponent.prototype, "isNodeExpanded", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Function)
], DropDownTreeComponent.prototype, "isNodeVisible", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], DropDownTreeComponent.prototype, "loadOnDemand", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], DropDownTreeComponent.prototype, "filterable", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], DropDownTreeComponent.prototype, "filter", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], DropDownTreeComponent.prototype, "focusableId", void 0);
DropDownTreeComponent = DropDownTreeComponent_1 = tslib_1.__decorate([
    Component({
        exportAs: 'kendoDropDownTree',
        providers: [
            DataService,
            SelectionService,
            NavigationService,
            DisabledItemsService,
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.dropdowntree'
            },
            {
                multi: true,
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => DropDownTreeComponent_1)
            },
            {
                provide: KendoInput,
                useExisting: forwardRef(() => DropDownTreeComponent_1)
            },
            {
                provide: DataBoundComponent,
                useExisting: forwardRef(() => DropDownTreeComponent_1)
            },
            {
                provide: ExpandableComponent,
                useExisting: forwardRef(() => DropDownTreeComponent_1)
            }
        ],
        selector: 'kendo-dropdowntree',
        template: `
        <ng-container kendoDropDownTreeLocalizedMessages
            i18n-noDataText="kendo.dropdowntree.noDataText|The text displayed in the popup when there are no items"
            noDataText="NO DATA FOUND"

            i18n-clearTitle="kendo.dropdowntree.clearTitle|The title of the clear button"
            clearTitle="clear"
        >
        </ng-container>
        <span
            #wrapper
            [ngClass]="{
                'k-dropdown-wrap': true,
                'k-state-disabled': this.disabled
            }"
            [attr.id]="focusableId"
            role="listbox"
            aria-haspopup="tree"
            [attr.aria-expanded]="isOpen"
            [attr.aria-readonly]="readonly"
            [attr.tabindex]="tabindex"
            [attr.dir]="direction"
            (click)="handleClick()"
            (keydown)="handleKeydown($event)"
            [kendoEventsOutsideAngular]="{
                focus: handleFocus,
                blur: handleBlur
            }"
            [scope]="this"
        >
            <span
                [attr.id]="valueLabelId"
                class="k-input"
            >
                <ng-template *ngIf="valueTemplate"
                    [templateContext]="{
                        templateRef: valueTemplate.templateRef,
                        $implicit: dataItem
                    }">
                </ng-template>
                <ng-template [ngIf]="!valueTemplate"> {{ text || placeholder }} </ng-template>
            </span>
            <span
                *ngIf="!loading && !readonly && clearButton && text?.length"
                class="k-icon k-clear-value k-i-close"
                [style.visibility]="clearButtonVisiblity"
                aria-hidden="true"
                [attr.title]="messageFor('clearTitle')"
                (click)="clearValue($event)"
            >
            </span>
            <span class="k-select" aria-hidden="true">
                <span class="k-icon k-i-arrow-60-down"></span>
            </span>
        </span>
        <ng-template #popupTemplate>
            <span
                *ngIf="filterable"
                class="k-list-filter"
            >
                <input
                    #filterInput
                    (input)="handleFilterInputChange($event.target.value)"
                    [filterInput]="filterable && !touchEnabled"
                    (keydown.arrowdown)="handleKeydown($event)"
                    (keydown.alt.arrowup)="handleKeydown($event)"
                    [(ngModel)]="filter"
                    class="k-textbox"
                    role="textbox"
                    aria-haspopup="true"
                    aria-expanded="false"
                    tabindex="0"
                    aria-disabled="false"
                    aria-readonly="false"
                    [kendoEventsOutsideAngular]="{
                        blur: handleBlur
                    }"
                    [scope]="this"
                >
                <span class="k-icon k-i-zoom"></span>
            </span>
            <!--header template-->
            <ng-template
                *ngIf="headerTemplate"
                [templateContext]="{
                    templateRef: headerTemplate?.templateRef
                }">
            </ng-template>
            <kendo-treeview
                #treeview
                *ngIf="data.length !== 0 && !allNodesHidden"
                [nodes]="data"
                [style.maxHeight.px]="listHeight"
                [animate]="false"
                [(selectedKeys)]="selectedKeys"
                [selectBy]="selectBy"
                [textField]="textField"
                kendoTreeViewSelectable
                [children]="children"
                [hasChildren]="hasChildren"
                [loadOnDemand]="loadOnDemand"
                [isExpanded]="isNodeExpanded"
                [isDisabled]="itemDisabled"
                [nodeTemplate]="nodeTemplate"
                [filter]="filter"
                [isVisible]="isNodeVisible"
                (focusout)="handleBlur($event)"
                (keydown)="handleKeydown($event)"
                (selectionChange)="onSelectionChange($event)"
                (expand)="nodeExpand.emit($event)"
                (collapse)="nodeCollapse.emit($event)"
            >
            </kendo-treeview>
            <!--footer template-->
            <ng-template
                *ngIf="footerTemplate"
                [templateContext]="{
                    templateRef: footerTemplate?.templateRef
                }">
            </ng-template>
            <!--no-data template-->
            <div class="k-nodata" *ngIf="data.length === 0 || allNodesHidden">
                <ng-template [ngIf]="noDataTemplate"
                    [templateContext]="{
                        templateRef: noDataTemplate?.templateRef
                    }">
                </ng-template>
                <ng-template [ngIf]="!noDataTemplate">
                    <div>{{ messageFor('noDataText') }}</div>
                </ng-template>
            </div>
        </ng-template>
        <ng-container #container></ng-container>
    `,
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__param(7, Optional()), tslib_1.__param(7, Inject(TOUCH_ENABLED)),
    tslib_1.__metadata("design:paramtypes", [PopupService,
        NavigationService,
        Renderer2,
        ElementRef,
        NgZone,
        ChangeDetectorRef,
        LocalizationService, Boolean])
], DropDownTreeComponent);
export { DropDownTreeComponent };
export { ɵ0, ɵ1, ɵ2, ɵ3 };
