{"version":3,"file":"dropdowntree.component.d.ts","sources":["dropdowntree.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { OnInit, OnDestroy, ElementRef, EventEmitter, NgZone, Renderer2, TemplateRef, ChangeDetectorRef, SimpleChanges, OnChanges, ViewContainerRef, AfterContentChecked } from '@angular/core';\nimport { PopupRef, PopupService } from '@progress/kendo-angular-popup';\nimport { TreeItem, TreeViewComponent, DataBoundComponent, ExpandableComponent } from '@progress/kendo-angular-treeview';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { NavigationService } from '../common/navigation/navigation.service';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { PreventableEvent } from '../common/models/preventable-event';\nimport { NoDataTemplateDirective } from '../common/templates/no-data-template.directive';\nimport { PopupSettings } from '../common/models/popup-settings';\nimport { Direction } from '../common/models/direction';\nimport { Observable } from 'rxjs';\nimport { HeaderTemplateDirective } from '../common/templates/header-template.directive';\nimport { FooterTemplateDirective } from '../common/templates/footer-template.directive';\nimport { NodeTemplateDirective } from './templates/node-template.directive';\nimport { ValueTemplateDirective } from '../common/templates/value-template.directive';\n/**\n * Represents the [Kendo UI DropDownTree component for Angular]({% slug overview_ddt %}).\n */\nexport declare class DropDownTreeComponent implements OnInit, OnDestroy, OnChanges, AfterContentChecked, ControlValueAccessor, DataBoundComponent, ExpandableComponent {\n    private popupService;\n    private navigationService;\n    private renderer;\n    private hostElement;\n    private _zone;\n    private cdr;\n    private localization;\n    touchEnabled: boolean;\n    hostClasses: boolean;\n    direction: Direction;\n    readonly clearable: boolean;\n    noDataTemplate: NoDataTemplateDirective;\n    headerTemplate: HeaderTemplateDirective;\n    footerTemplate: FooterTemplateDirective;\n    nodeTemplate: NodeTemplateDirective;\n    valueTemplate: ValueTemplateDirective;\n    popupTemplate: TemplateRef<any>;\n    wrapper: ElementRef<HTMLElement>;\n    container: ViewContainerRef;\n    treeview: TreeViewComponent;\n    private filterInput;\n    /**\n     * Fires each time the popup is about to open\n     * ([see example]({% slug openstate_ddt %})).\n     * This event is preventable. If you cancel it, the popup will remain closed.\n     */\n    open: EventEmitter<PreventableEvent>;\n    /**\n     * Fires after the popup has been opened.\n     */\n    opened: EventEmitter<any>;\n    /**\n     * Fires each time the popup is about to close\n     * ([see example]({% slug openstate_ddt %})).\n     * This event is preventable. If you cancel it, the popup will remain open.\n     */\n    close: EventEmitter<PreventableEvent>;\n    /**\n     * Fires after the popup has been closed.\n     */\n    closed: EventEmitter<any>;\n    /**\n     * Fires when the user expands a node in the popup TreeView.\n     */\n    nodeExpand: EventEmitter<TreeItem>;\n    /**\n     * Fires when the user collapses a node in the popup TreeView.\n     */\n    nodeCollapse: EventEmitter<TreeItem>;\n    /**\n     * Fires each time the user focuses the DropDownTree.\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the DropDownTree gets blurred.\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * Fires each time the value is changed\n     * ([see example]({% slug overview_ddt %}#toc-events)).\n     */\n    valueChange: EventEmitter<any>;\n    /**\n     * Fires when the value of the built-in filter input element changes.\n     */\n    filterChange: EventEmitter<string>;\n    /**\n     * Sets and gets the loading state of the DropDownTree.\n     */\n    loading: boolean;\n    /**\n     * If set to `true`, renders a button on hovering over the component.\n     * Clicking this button resets the value of the component to `undefined` and triggers the `change` event.\n     */\n    clearButton: boolean;\n    /**\n     * Sets the data of the DropDownTree.\n     *\n     * > The data has to be provided in an array-like list with objects.\n     */\n    data: Object[];\n    /**\n     * Sets the value of the DropDownTree.\n     * It can either be of the primitive (string, numbers) or of the complex (objects) type.\n     * To define the type, use the `valuePrimitive` option.\n     *\n     */\n    value: any;\n    /**\n     * The fields of the data item that provide the text content of the nodes inside the\n     * DropDownTree ([see example]({% slug databinding_ddt %})). If the `textField`\n     * input is set to an array, each hierarchical level uses the field that corresponds\n     * to the same index in the array, or the last item in the array.\n     *\n     * > The `textField` property can be set to point to a nested property value - e.g. `category.name`.\n     */\n    textField: string | string[];\n    /**\n     * The fields of the data item that provide the value of the nodes inside the\n     * DropDownTree ([see example]({% slug databinding_ddt %})). If the `valueField`\n     * input is set to an array, each hierarchical level uses the field that corresponds\n     * to the same index in the array, or the last item in the array.\n     *\n     * > The `valueField` property can be set to point to a nested property value - e.g. `category.id`.\n     */\n    valueField: string | string[];\n    /**\n     * Sets the level in the data set where the value can be found when `valueField` is an Array.\n     * The field serves to correctly allocate a data item used when the DropDownTree is initialized with a value.\n     */\n    valueDepth: number;\n    /**\n     * A function which determines if a specific node has child nodes.\n     */\n    hasChildren: (node: object) => boolean;\n    /**\n     * A function which provides the child nodes for a given parent node.\n     */\n    fetchChildren: (node: object) => Observable<object[]>;\n    /**\n     * The hint which is displayed when the component is empty.\n     */\n    placeholder: string;\n    /**\n     * Configures the popup of the DropDownTree.\n     *\n     * The available options are:\n     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n     * - `width: Number | String`&mdash;Sets the width of the popup container. By default, the width of the host element is used. If set to `auto`, the component automatically adjusts the width of the popup and no item labels are wrapped.\n     * - `height: Number`&mdash;Sets the height of the popup container.\n     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n     * - `appendTo: \"root\" | \"component\" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.\n     */\n    popupSettings: PopupSettings;\n    /**\n     * Keeps the current `dataItem` object in order to resolve selection.\n     * Needs to be provided when `value` is bound in and `valuePrimitive` is set to true.\n     */\n    dataItem: Object;\n    /**\n     * Sets the height of the options list. By default, `listHeight` is 200px.\n     *\n     * > The `listHeight` property affects only the list of options and not the whole popup container.\n     * > To set the height of the popup container, use `popupSettings.height`.\n     */\n    listHeight: number;\n    /**\n     * Sets the disabled state of the component.\n     */\n    disabled: boolean;\n    /**\n     * Sets the read-only state of the component.\n     */\n    readonly: boolean;\n    /**\n     * Specifies the type of the selected value\n     * ([more information and example]({% slug valuebinding_ddt %}#toc-primitive-values)).\n     * If set to `true`, the selected value has to be of a primitive value.\n     */\n    valuePrimitive: boolean;\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n    tabindex: number;\n    /**\n     * A function that is executed for each data item and determines if a specific item is disabled.\n     */\n    itemDisabled: (item: object, index: string) => boolean;\n    /**\n     * A function that is executed for each data item and determines if a specific node is expanded.\n     */\n    isNodeExpanded: (item: object, index: string) => boolean;\n    /**\n     * A callback which determines whether a tree node should be rendered as hidden. The utility .k-display-none class is used to hide the nodes.\n     * Useful for custom filtering implementations.\n     */\n    isNodeVisible: (item: object, index: string) => boolean;\n    /**\n     * Indicates whether the child nodes will be fetched on node expand or will be initially prefetched.\n     * @default true\n     */\n    loadOnDemand: boolean;\n    /**\n     * Renders the built-in input element for filtering the DropDownTree.\n     * If set to `true`, the component emits the `filterChange` event, which can be used to [filter the DropDownTree manually]({% slug filtering_ddt %}#toc-manual-filtering).\n     * A built-in filtering implementation is available to use with the [`kendoDropDownTreeHierarchyBinding`]({% slug api_dropdowns_dropdowntreehierarchybindingdirective %}) and [`kendoDropDownTreeFlatBinding`]({% slug api_dropdowns_dropdowntreeflatbindingdirective %}) directives.\n     */\n    filterable: boolean;\n    /**\n     * @hidden\n     */\n    filter: string;\n    /**\n     * @hidden\n     *\n     * Used by the kendo-label and kendo-floatinglabel to access and associate the focusable element with the provided label via aria-labelledby.\n     */\n    focusableId: string;\n    isFocused: boolean;\n    readonly width: {\n        min: string;\n        max: string;\n    };\n    readonly height: string;\n    /**\n     * Returns the current open state of the popup.\n     */\n    readonly isOpen: boolean;\n    readonly clearButtonVisiblity: string;\n    popupRef: PopupRef;\n    /**\n     * @hidden\n     */\n    selectedKeys: any[];\n    /**\n     * @hidden\n     */\n    selectBy: string;\n    /**\n     * @hidden\n     */\n    text: string;\n    /**\n     * @hidden\n     *\n     * Alias for `isNodeExpanded`. Used for compatibility with the `ExpandableComponent` interface.\n     * Required for the expand-directive.\n     */\n    isExpanded: (item: object, index: string) => boolean;\n    /**\n     * @hidden\n     *\n     * Alias for `nodeExpand`. Used for compatibility with the `ExpandableComponent` interface.\n     * Required for the expand-directive.\n     */\n    readonly expand: EventEmitter<TreeItem>;\n    /**\n     * @hidden\n     *\n     * Alias for `nodeCollapse`. Used for compatibility with the `ExpandableComponent` interface.\n     * Required for the expand-directive.\n     */\n    readonly collapse: EventEmitter<TreeItem>;\n    /**\n     * @hidden\n     *\n     * Alias for `data`. Used for compatibility with the `DataBoundComponent` interface.\n     * Required for the data-binding directives.\n     */\n    nodes: any[];\n    /**\n     * @hidden\n     *\n     * Alias for `fetchChildren`. Used for compatibility with the `DataBoundComponent` interface.\n     * Required for the data-binding directives\n     */\n    children: (item: object) => Observable<object[]>;\n    /**\n     * @hidden\n     *\n     * Alias for `isNodeVisible`. Used for compatibility with the `DataBoundComponent` interface.\n     * The `DataBoundComponent` interface is used in the data-binding directives.\n     */\n    isVisible: (item: object, index: string) => boolean;\n    /**\n     * @hidden\n     */\n    filterStateChange: EventEmitter<any>;\n    /**\n     * @hidden\n     */\n    allNodesHidden: boolean;\n    /**\n     * @hidden\n     *\n     * Used to associate the value label with the wrapper via aria-describedby.\n     */\n    valueLabelId: string;\n    private _nodes;\n    private _value;\n    private _popupSettings;\n    private _tabindex;\n    private _isFocused;\n    private _dataItem;\n    private _treeview;\n    private subscriptions;\n    private touchstartDisposeHandler;\n    constructor(popupService: PopupService, navigationService: NavigationService, renderer: Renderer2, hostElement: ElementRef<HTMLElement>, _zone: NgZone, cdr: ChangeDetectorRef, localization: LocalizationService, touchEnabled: boolean);\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * @hidden\n     */\n    ngAfterContentChecked(): void;\n    /**\n     * @hidden\n     *\n     * Used by the kendo-floatinglabel component to determine if the floating label\n     * should be rendered inside the input when the component is not focused.\n     */\n    isEmpty(): boolean;\n    /**\n     * @hidden\n     */\n    togglePopup(open: boolean): void;\n    /**\n     * @hidden\n     */\n    handleFocus(): void;\n    /**\n     * @hidden\n     */\n    handleBlur(e?: FocusEvent): void;\n    /**\n     * @hidden\n     */\n    handleKeydown(event: any): void;\n    /**\n     * @hidden\n     */\n    handleClick(): void;\n    /**\n     * Focuses a specific item of the DropDownTree based on a provided index in the format of `1_1`.\n     * The targeted item should be expanded in order for it to be focused.\n     * If null or invalid index is provided the focus will be set on the first item.\n     */\n    focusItemAt(index: string): void;\n    /**\n     * Focuses the DropDownTree.\n     */\n    focus(): void;\n    /**\n     * Blurs the DropDownTree.\n     */\n    blur(): void;\n    /**\n     * Resets the value of the DropDownTree.\n     * If you use the `reset` method to clear the value of the component,\n     * the model will not update automatically and the `valueChange` event will not be fired.\n     */\n    reset(): void;\n    /**\n     * Toggles the visibility of the popup\n     * ([see example]({% slug openstate_ddt %})).\n     * If you use the `toggle` method to open or close the popup, the `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    toggle(open?: boolean): void;\n    /**\n     * @hidden\n     */\n    readonly popupContainerClasses: Object;\n    /**\n     * @hidden\n     */\n    onSelectionChange({ dataItem, index }: TreeItem): void;\n    /**\n     * @hidden\n     */\n    messageFor(key: string): string;\n    /**\n     * @hidden\n     */\n    clearValue(event: MouseEvent): void;\n    readonly appendTo: ViewContainerRef;\n    /**\n     * @hidden\n     */\n    preventEventDefault(event: Event): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: any): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     */\n    handleFilterInputChange(term: string): void;\n    protected onTouchedCallback: Function;\n    protected onChangeCallback: Function;\n    protected verifySettings(): void;\n    private emitValueChange;\n    private getText;\n    /**\n     * @hidden\n     *\n     * Determines the `valueField` and `textField` for a specific level in the data set\n     *  @param field - the field value (string | string[])\n     *  @param value - current value\n     */\n    private getField;\n    private triggerPopupEvents;\n    private createPopup;\n    private destroyPopup;\n    private handleEscape;\n    private setState;\n    private clearState;\n    private subscribeEvents;\n    private subscribeTouchEvents;\n    private unsubscribeEvents;\n    private assignAriaDescribedBy;\n}\n"]}