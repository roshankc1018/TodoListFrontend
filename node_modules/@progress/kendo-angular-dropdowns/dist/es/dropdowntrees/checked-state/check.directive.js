/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { TreeViewComponent } from '@progress/kendo-angular-treeview';
import { Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';
import { fetchDescendentNodes, getHierarchicalItemLevel, isPresent, valueFrom } from '../../common/util';
/**
 * @hidden
 *
 * A directive which manages the in-memory checked state of the MultiSelectTree nodes.
 */
var CheckDirective = /** @class */ (function () {
    function CheckDirective(treeView) {
        this.treeView = treeView;
        /**
         * Fires when the `checkedItems` collection was updated.
         */
        this.checkedItemsChange = new EventEmitter();
        /**
         * Holds a Set with just the checked item keys.
         *
         * Should be updated each time the `checkedItems` value or content is changed.
         * Can be used for efficient look-up of whether an item is checked or not (O(1) access time).
         */
        this.checkedKeys = new Set();
        this.subscriptions = new Subscription();
        this.subscriptions.add(this.treeView.checkedChange
            .subscribe(this.handleCheckedChange.bind(this)));
        this.treeView.isChecked = this.getCheckedState.bind(this);
    }
    CheckDirective.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (isPresent(changes.checkable)) {
            this.toggleCheckOnClick();
        }
        if (isPresent(changes.checkedItems)) {
            this.checkedItems = this.checkedItems || [];
            this.checkedKeys = new Set(this.checkedItems.map(function (item) { return valueFrom(item, _this.valueField); }));
        }
    };
    CheckDirective.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
        this.unsubscribeClick();
    };
    CheckDirective.prototype.getCheckedState = function (dataItem, index) {
        if (this.isItemChecked({ dataItem: dataItem, index: index })) {
            return 'checked';
        }
        else if (this.checkable.checkChildren && this.isItemIndeterminate(this.treeView.itemLookup(index))) {
            return 'indeterminate';
        }
        else {
            return 'none';
        }
    };
    CheckDirective.prototype.handleCheckedChange = function (node) {
        this.checkNode(node);
        // parents should be checked if `checkChildren` is set to `true` (single config option for both)
        var checkParents = this.checkable.checkChildren;
        if (checkParents) {
            this.checkParents(node.parent);
        }
        this.checkedItemsChange.emit(this.checkedItems.slice());
    };
    CheckDirective.prototype.toggleCheckOnClick = function () {
        var _this = this;
        this.unsubscribeClick();
        if (this.checkable.checkOnClick) {
            this.clickSubscription = this.treeView.nodeClick
                .pipe(filter(function (event) { return event.type === 'click'; }))
                .subscribe(function (event) {
                var lookup = _this.treeView.itemLookup(event.item.index);
                _this.handleCheckedChange(lookup);
            });
        }
    };
    CheckDirective.prototype.unsubscribeClick = function () {
        if (this.clickSubscription) {
            this.clickSubscription.unsubscribe();
            this.clickSubscription = null;
        }
    };
    CheckDirective.prototype.checkNode = function (lookup) {
        var _this = this;
        if (this.treeView.isDisabled(lookup.item.dataItem, lookup.item.index)) {
            return;
        }
        var target = lookup.item;
        var pendingCheck = [target];
        // TODO: extract in a separate `checkChildren` method?
        if (this.checkable.checkChildren) {
            var filter_1 = function (item) {
                return _this.treeView.isVisible(item.dataItem, item.index) &&
                    !_this.treeView.isDisabled(item.dataItem, item.index);
            };
            fetchDescendentNodes(lookup, filter_1)
                .forEach(function (lookup) { return pendingCheck.push(lookup.item); });
        }
        var shouldCheck = !this.isItemChecked(target);
        pendingCheck.forEach(function (item) {
            if (shouldCheck) {
                _this.addItem(item);
            }
            else {
                _this.removeItem(item);
            }
        });
    };
    CheckDirective.prototype.checkParents = function (parent) {
        var _this = this;
        var currentParent = parent;
        while (currentParent) {
            var allChildrenSelected = currentParent.children.every(function (item) { return _this.isItemChecked(item); });
            if (allChildrenSelected) {
                this.addItem(currentParent.item);
            }
            else {
                this.removeItem(currentParent.item);
            }
            currentParent = currentParent.parent;
        }
    };
    CheckDirective.prototype.addItem = function (item) {
        if (this.isItemChecked(item)) {
            return;
        }
        var level = getHierarchicalItemLevel(item.index);
        var candidate = tslib_1.__assign({}, item, { level: level });
        this.checkedItems.push(candidate);
        this.checkedKeys.add(valueFrom(candidate, this.valueField));
    };
    CheckDirective.prototype.removeItem = function (item) {
        var _this = this;
        if (!this.isItemChecked(item)) {
            return;
        }
        var level = getHierarchicalItemLevel(item.index);
        var candidate = tslib_1.__assign({}, item, { level: level });
        this.checkedItems = this.checkedItems
            .filter(function (item) { return valueFrom(item, _this.valueField) !== valueFrom(candidate, _this.valueField); });
        this.checkedKeys.delete(valueFrom(candidate, this.valueField));
    };
    CheckDirective.prototype.isItemChecked = function (item) {
        return this.checkedKeys.has(valueFrom(item, this.valueField));
    };
    CheckDirective.prototype.isItemIndeterminate = function (lookup) {
        var children = lookup.children;
        if (!Array.isArray(children) || children.length === 0) {
            return false;
        }
        var index = 0;
        var child = children[index];
        while (isPresent(child)) {
            if (this.isItemChecked(child.item) || this.isItemIndeterminate(child)) {
                return true;
            }
            index += 1;
            child = children[index];
        }
        return false;
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], CheckDirective.prototype, "checkable", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], CheckDirective.prototype, "valueField", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], CheckDirective.prototype, "checkedItems", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], CheckDirective.prototype, "checkedItemsChange", void 0);
    CheckDirective = tslib_1.__decorate([
        Directive({
            selector: '[kendoMultiSelectTreeCheckable]'
        }),
        tslib_1.__metadata("design:paramtypes", [TreeViewComponent])
    ], CheckDirective);
    return CheckDirective;
}());
export { CheckDirective };
