{"version":3,"file":"treeview-group.component.d.ts","sources":["treeview-group.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { TemplateRef, OnChanges, OnInit, OnDestroy, ChangeDetectorRef, TrackByFunction } from '@angular/core';\nimport { ExpandStateService } from './expand-state.service';\nimport { IndexBuilderService } from './index-builder.service';\nimport { TreeViewLookupService } from './treeview-lookup.service';\nimport { NavigationService } from './navigation/navigation.service';\nimport { NodeChildrenService } from './node-children.service';\nimport { LoadMoreService } from './load-more/load-more.service';\nimport { LoadingNotificationService } from './loading-notification.service';\nimport { CheckedState } from './checkbox/checked-state';\nimport { Observable } from 'rxjs';\nimport { DataChangeNotificationService } from './data-change-notification.service';\n/**\n * @hidden\n */\nexport declare class TreeViewGroupComponent implements OnChanges, OnInit, OnDestroy {\n    protected expandService: ExpandStateService;\n    protected loadingService: LoadingNotificationService;\n    protected indexBuilder: IndexBuilderService;\n    protected treeViewLookupService: TreeViewLookupService;\n    protected navigationService: NavigationService;\n    protected nodeChildrenService: NodeChildrenService;\n    protected dataChangeNotification: DataChangeNotificationService;\n    protected changeDetectorRef: ChangeDetectorRef;\n    kGroupClass: boolean;\n    role: string;\n    checkboxes: boolean;\n    expandIcons: boolean;\n    disabled: boolean;\n    selectable: boolean;\n    touchActions: boolean;\n    loadOnDemand: boolean;\n    trackBy: TrackByFunction<object>;\n    nodes: (node: any, index: string) => Observable<any[]>;\n    textField: string | string[];\n    parentDataItem: any;\n    parentIndex: string;\n    nodeTemplateRef: TemplateRef<any>;\n    loadMoreButtonTemplateRef: TemplateRef<any>;\n    loadMoreService: LoadMoreService;\n    initialNodesLoaded: boolean;\n    loadingMoreNodes: boolean;\n    readonly moreNodesAvailable: boolean;\n    pageSize: number;\n    data: any[];\n    readonly loadMoreButtonIndex: string;\n    /**\n     * Represents the total number of nodes for the current level.\n     */\n    readonly totalNodesCount: number;\n    private _data;\n    private nodesSubscription;\n    private loadMoreNodesSubscription;\n    private singleRecordSubscriptions;\n    constructor(expandService: ExpandStateService, loadingService: LoadingNotificationService, indexBuilder: IndexBuilderService, treeViewLookupService: TreeViewLookupService, navigationService: NavigationService, nodeChildrenService: NodeChildrenService, dataChangeNotification: DataChangeNotificationService, changeDetectorRef: ChangeDetectorRef);\n    isChecked: (item: object, index: string) => CheckedState;\n    isDisabled: (item: object, index: string) => boolean;\n    isExpanded: (item: object, index: string) => boolean;\n    isVisible: (item: object, index: string) => boolean;\n    isSelected: (item: object, index: string) => boolean;\n    children: (item: object) => Observable<any[]>;\n    hasChildren: (item: object) => boolean;\n    readonly hasTemplate: boolean;\n    expandNode(index: string, dataItem: any, expand: boolean): void;\n    checkNode(index: string): void;\n    nodeIndex(index: number): string;\n    nodeText(dataItem: any): any;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    ngOnChanges(changes: any): void;\n    fetchChildren(node: any, index: string): Observable<any>;\n    readonly nextFields: string[];\n    loadMoreNodes(): void;\n    private loadMoreLocalNodes;\n    private fetchMoreNodes;\n    private setNodeChildren;\n    private mapToTreeItem;\n    private emitChildrenLoaded;\n    private subscribeToNodesChange;\n    private reselectItemAt;\n    private registerLoadedNodes;\n}\n"]}