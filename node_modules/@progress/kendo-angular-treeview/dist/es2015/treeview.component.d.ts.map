{"version":3,"file":"treeview.component.d.ts","sources":["treeview.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, ViewContainerRef, TrackByFunction, SimpleChanges, ChangeDetectorRef } from '@angular/core';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CheckedState } from './checkbox/checked-state';\nimport { DataChangeNotificationService } from './data-change-notification.service';\nimport { ExpandStateService } from './expand-state.service';\nimport { NavigationService } from './navigation/navigation.service';\nimport { NodeChildrenService } from './node-children.service';\nimport { NodeClickEvent } from './node-click-event.interface';\nimport { NodeTemplateDirective } from './node-template.directive';\nimport { LoadMoreButtonTemplateDirective } from './load-more/load-more-button-template.directive';\nimport { DataBoundComponent } from './data-bound-component';\nimport { SelectionService } from './selection/selection.service';\nimport { TreeItemLookup } from './treeitem-lookup.interface';\nimport { TreeItem } from './treeitem.interface';\nimport { TreeViewLookupService } from './treeview-lookup.service';\nimport { LoadMoreService } from './load-more/load-more.service';\nimport { TreeItemDropEvent, TreeItemAddRemoveArgs, EditService, TreeItemDragEvent, TreeItemDragStartEvent } from './drag-and-drop/models';\nimport { FilterState } from './filter-state.interface';\n/**\n * Represents the [Kendo UI TreeView component for Angular]({% slug overview_treeview %}).\n *\n * @example\n * {% meta height:350 %}\n * {% embed_file basic-usage/app.component.ts preview %}\n * {% embed_file basic-usage/app.module.ts %}\n * {% endmeta %}\n */\nexport declare class TreeViewComponent implements OnChanges, OnInit, OnDestroy, DataBoundComponent {\n    element: ElementRef<HTMLElement>;\n    changeDetectorRef: ChangeDetectorRef;\n    protected expandService: ExpandStateService;\n    protected navigationService: NavigationService;\n    protected nodeChildrenService: NodeChildrenService;\n    protected selectionService: SelectionService;\n    protected treeViewLookupService: TreeViewLookupService;\n    private ngZone;\n    private renderer;\n    private dataChangeNotification;\n    private localization;\n    classNames: boolean;\n    role: string;\n    /** @hidden */\n    readonly direction: string;\n    /**\n     * @hidden\n     */\n    assetsContainer: ViewContainerRef;\n    /**\n     * The hint which is displayed when the component is empty.\n     */\n    filterInputPlaceholder: string;\n    /**\n     * Determines whether the content animation is enabled.\n     */\n    animate: boolean;\n    /** @hidden */\n    fetchNodes: () => BehaviorSubject<any[]>;\n    /**\n     * Fires when the children of the expanded node are loaded.\n     */\n    childrenLoaded: EventEmitter<{\n        children: TreeItem[];\n        item: TreeItem;\n    }>;\n    /**\n     * Fires when the user blurs the component.\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * Fires when the user focuses the component.\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires when the user expands a TreeView node.\n     */\n    expand: EventEmitter<TreeItem>;\n    /**\n     * Fires when the user collapses a TreeView node.\n     */\n    collapse: EventEmitter<TreeItem>;\n    /**\n     * Fires just before the dragging of the node starts ([see example]({% slug draganddrop_treeview %}#toc-setup)). This event is preventable.\n     * If you prevent the event default, no drag hint will be created and the subsequent drag-related events will not be fired.\n     */\n    nodeDragStart: EventEmitter<TreeItemDragStartEvent>;\n    /**\n     * Fires when an item is being dragged ([see example]({% slug draganddrop_treeview %}#toc-setup)).\n     */\n    nodeDrag: EventEmitter<TreeItemDragEvent>;\n    /**\n     * Emits when the built-in filtering mechanism in the data-binding directives updates the node's visibility.\n     * Used for the built-in auto-expand functionalities of the component and available for custom implementations.\n     */\n    filterStateChange: EventEmitter<FilterState>;\n    /**\n     * Fires on the target TreeView when a dragged item is dropped ([see example]({% slug draganddrop_treeview %}#toc-setup)).\n     * This event is preventable. If you prevent the event default (`event.preventDefualt()`) or invalidate its state (`event.setValid(false)`),\n     * the `addItem` and `removeItem` events will not be triggered.\n     *\n     * Both operations cancel the default drop operation, but the indication to the user is different. `event.setValid(false)` indicates that the operation was\n     * unsuccessful by animating the drag clue to its original position. `event.preventDefault()` simply removes the clue, as if it has been dropped successfully.\n     * As a general rule, use `preventDefault` to manually handle the add and remove operations, and `setValid(false)` to indicate the operation was unsuccessful.\n     */\n    nodeDrop: EventEmitter<TreeItemDropEvent>;\n    /**\n     * Fires on the source TreeView after the dragged item has been dropped ([see example]({% slug draganddrop_treeview %}#toc-setup)).\n     */\n    nodeDragEnd: EventEmitter<TreeItemDragEvent>;\n    /**\n     * Fires after a dragged item is dropped ([see example]({% slug draganddrop_treeview %}#toc-setup)).\n     * Called on the TreeView where the item is dropped.\n     */\n    addItem: EventEmitter<TreeItemAddRemoveArgs>;\n    /**\n     * Fires after a dragged item is dropped ([see example]({% slug draganddrop_treeview %}#toc-setup)).\n     * Called on the TreeView from where the item is dragged.\n     */\n    removeItem: EventEmitter<TreeItemAddRemoveArgs>;\n    /**\n     * Fires when the user selects a TreeView node checkbox\n     * ([see example]({% slug checkboxes_treeview %}#toc-modifying-the-checked-state)).\n     */\n    checkedChange: EventEmitter<TreeItemLookup>;\n    /**\n     * Fires when the user selects a TreeView node\n     * ([see example]({% slug selection_treeview %}#toc-modifying-the-selection)).\n     */\n    selectionChange: EventEmitter<TreeItem>;\n    /**\n     * Fires when the value of the built-in filter input element changes.\n     */\n    filterChange: EventEmitter<string>;\n    /**\n     * Fires when the user clicks a TreeView node.\n     */\n    nodeClick: EventEmitter<NodeClickEvent>;\n    /**\n     * Fires when the user double clicks a TreeView node.\n     */\n    nodeDblClick: EventEmitter<NodeClickEvent>;\n    /**\n     * @hidden\n     */\n    nodeTemplate: NodeTemplateDirective;\n    /**\n     * @hidden\n     */\n    nodeTemplateRef: NodeTemplateDirective;\n    /**\n     * @hidden\n     */\n    loadMoreButtonTemplate: LoadMoreButtonTemplateDirective;\n    /**\n     * @hidden\n     */\n    loadMoreButtonTemplateRef: LoadMoreButtonTemplateDirective;\n    /**\n     * A function that defines how to track node changes.\n     * By default, the TreeView tracks the nodes by data item object reference.\n     *\n     * @example\n     * ```ts\n     *  @Component({\n     *      selector: 'my-app',\n     *      template: `\n     *          <kendo-treeview\n     *              [nodes]=\"data\"\n     *              textField=\"text\"\n     *              [trackBy]=\"trackBy\"\n     *          >\n     *          </kendo-treeview>\n     *      `\n     *  })\n     *  export class AppComponent {\n     *      public data: any[] = [\n     *          { text: \"Furniture\" },\n     *          { text: \"Decor\" }\n     *      ];\n     *\n     *      public trackBy(index: number, item: any): any {\n     *          return item.text;\n     *      }\n     *  }\n     * ```\n     */\n    trackBy: TrackByFunction<object>;\n    /**\n     * The nodes which will be displayed by the TreeView\n     * ([see example]({% slug databinding_treeview %})).\n     */\n    nodes: any[];\n    /**\n     * The fields of the data item that provide the text content of the nodes\n     * ([see example]({% slug databinding_treeview %})). If the `textField` input is set\n     * to an array, each hierarchical level uses the field that corresponds to the same\n     * index in the array, or the last item in the array.\n     */\n    textField: string | string[];\n    /**\n     * A function which determines if a specific node has child nodes\n     * ([see example]({% slug databinding_treeview %})).\n     */\n    hasChildren: (item: object) => boolean;\n    /**\n     * A function which determines if a specific node is checked\n     * ([see example]({% slug checkboxes_treeview %}#toc-modifying-the-checked-state)).\n     */\n    isChecked: (item: object, index: string) => CheckedState;\n    /**\n     * A function which determines if a specific node is disabled.\n     */\n    isDisabled: (item: object, index: string) => boolean;\n    /**\n     * A function which determines if a specific node is expanded.\n     */\n    isExpanded: (item: object, index: string) => boolean;\n    /**\n     * A function which determines if a specific node is selected\n     * ([see example]({% slug selection_treeview %}#toc-modifying-the-selection)).\n     */\n    isSelected: (item: object, index: string) => boolean;\n    /**\n     * A callback which determines whether a TreeView node should be rendered as hidden. The utility .k-display-none class is used to hide the nodes.\n     * Useful for custom filtering implementations.\n     */\n    isVisible: (item: object, index: string) => boolean;\n    /**\n     * Determines whether the TreeView keyboard navigable is enabled.\n     */\n    navigable: boolean;\n    /**\n     * A function which provides the child nodes for a given parent node\n     * ([see example]({% slug databinding_treeview %})).\n     */\n    children: (item: object) => Observable<object[]>;\n    /**\n     * Indicates whether the child nodes will be fetched on node expand or will be initially prefetched.\n     * @default true\n     */\n    loadOnDemand: boolean;\n    /**\n     * Renders the built-in input element for filtering the TreeView.\n     * If set to `true`, the component emits the `filterChange` event, which can be used to [filter the TreeView manually]({% slug filtering_treeview %}#toc-manual-filtering).\n     * A built-in filtering implementation is available to use with the [`kendoTreeViewHierarchyBinding`]({% slug api_treeview_hierarchybindingdirective %}) and [`kendoTreeViewFlatDataBinding`]({% slug api_treeview_flatdatabindingdirective %}) directives.\n     */\n    filterable: boolean;\n    /**\n     * Sets an initial value of the built-in input element used for filtering.\n     */\n    filter: string;\n    /**\n     * @hidden\n     */\n    loadMoreService: LoadMoreService;\n    /**\n     * @hidden\n     */\n    editService: EditService;\n    checkboxes: boolean;\n    expandIcons: boolean;\n    selectable: boolean;\n    touchActions: boolean;\n    isActive: boolean;\n    data: BehaviorSubject<any[]>;\n    private _animate;\n    private _isChecked;\n    private _isExpanded;\n    private _isSelected;\n    private _hasChildren;\n    private subscriptions;\n    private domSubscriptions;\n    constructor(element: ElementRef<HTMLElement>, changeDetectorRef: ChangeDetectorRef, expandService: ExpandStateService, navigationService: NavigationService, nodeChildrenService: NodeChildrenService, selectionService: SelectionService, treeViewLookupService: TreeViewLookupService, ngZone: NgZone, renderer: Renderer2, dataChangeNotification: DataChangeNotificationService, localization: LocalizationService);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    /**\n     * Blurs the focused TreeView item.\n     */\n    blur(): void;\n    /**\n     * Focuses the first focusable item in the TreeView component if no hierarchical index is provided.\n     *\n     * @example\n     * ```ts\n     * import { Component } from '@angular/core';\n     *\n     *  @Component({\n     *      selector: 'my-app',\n     *      template: `\n     *      <button (click)=\"treeview.focus('1')\">Focuses the second node</button>\n     *      <kendo-treeview\n     *          #treeview\n     *          [nodes]=\"data\"\n     *          textField=\"text\"\n     *      >\n     *      </kendo-treeview>\n     *  `\n     *  })\n     *  export class AppComponent {\n     *      public data: any[] = [\n     *          { text: \"Furniture\" },\n     *          { text: \"Decor\" }\n     *      ];\n     *  }\n     * ```\n     */\n    focus(index?: string): void;\n    /**\n     * Based on the specified index, returns the TreeItemLookup node.\n     *\n     * @param index - The index of the node.\n     * @returns {TreeItemLookup} - The item that was searched (looked up).\n     */\n    itemLookup(index: string): TreeItemLookup;\n    /**\n     * Triggers the [`children`]({% slug api_treeview_treeviewcomponent %}#toc-children) function for every expanded node,\n     * causing all rendered child nodes to be fetched again.\n     */\n    rebindChildren(): void;\n    /**\n     * Triggers the `expand` event for the provided node and displays it's loading indicator.\n     */\n    expandNode(item: any, index: string): void;\n    /**\n     * Triggers the `collapse` event for the provided node.\n     */\n    collapseNode(item: any, index: string): void;\n    /**\n     * Gets the current page size of the checked data item children collection\n     * ([see example]({% slug loadmorebutton_treeview %}#toc-managing-page-sizes)).\n     *\n     * > Since the root nodes collection is not associated with any parent data item, pass `null` as `dataItem` param to get its page size.\n     *\n     * @param dataItem {any} - The parent data item of the targeted collection.\n     * @returns {number} - The page size of the checked data item children collection.\n     */\n    getNodePageSize(dataItem: any): number;\n    /**\n     * Sets the page size of the targeted data item children collection\n     * ([see example]({% slug loadmorebutton_treeview %}#toc-managing-page-sizes)).\n     *\n     * > Since the root nodes collection is not associated with any parent data item, pass `null` as `dataItem` param to target its page size.\n     *\n     * @param dataItem {any} - The parent data item of the targeted collection.\n     * @param pageSize {number} - The new page size.\n     */\n    setNodePageSize(dataItem: any, pageSize: number): void;\n    /**\n     * @hidden\n     *\n     * Clears the current TreeViewLookupService node map and re-registers all nodes anew.\n     * Child nodes are acquired through the provided `children` callback.\n     */\n    preloadChildNodes(): void;\n    private attachDomHandlers;\n    private focusHandler;\n    private blurHandler;\n    private clickHandler;\n    private keydownHandler;\n    private verifyLoadMoreService;\n    private registerLookupItems;\n}\n"]}