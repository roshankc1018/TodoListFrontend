{"version":3,"file":"data-bound-component.d.ts","sources":["data-bound-component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { EditService } from './drag-and-drop/models';\nimport { FilterState } from './filter-state.interface';\n/**\n * @hidden\n *\n * An injection token used by the data binding directives to interface with\n * the TreeView or the DropDownTree components.\n */\nexport declare abstract class DataBoundComponent {\n    /**\n     * The nodes which will be displayed by the TreeView.\n     */\n    abstract nodes: any[];\n    /**\n     * A function which determines if a specific node has child nodes.\n     */\n    abstract hasChildren: (item: object) => boolean;\n    /**\n     * A function which provides the child nodes for a given parent node.\n     */\n    abstract children: (item: object) => Observable<object[]>;\n    /**\n     * Specifies the handlers called on TreeView drag-and-drop `addItem` and `removeItem` events.\n     */\n    abstract editService?: EditService;\n    /**\n     * A callback function which accepts the data object for a TreeView node and returns a boolean.\n     * If it returns `false`, the node will not be displayed. Used for the component's built-in or custom filtering implementation.\n     */\n    abstract isVisible: (item: object, index: string) => boolean;\n    /**\n     * Sets an initial value of the built-in input element used for filtering.\n     */\n    abstract filter: string;\n    /**\n     * Fires when the value of the built-in filter input element changes.\n     */\n    abstract filterChange: EventEmitter<string>;\n    /**\n     * The fields of the data item that provide the text content of the nodes\n     * ([see example]({% slug databinding_treeview %})). If the `textField` input is set\n     * to an array, each hierarchical level uses the field that corresponds to the same\n     * index in the array, or the last item in the array.\n     */\n    abstract textField: string | string[];\n    /**\n     * Triggers the TreeView nodes preloading mechanism.\n     * Should be triggered after the `nodes`, `children` and `hasChildren` props are set.\n     */\n    abstract preloadChildNodes?: () => void;\n    /**\n     * Emits when the built-in filtering mechanism in the data-binding directives updates the filtered state.\n     * Used for the built-in auto-expand functionalities of the component and available for custom implementations.\n     */\n    abstract filterStateChange?: EventEmitter<FilterState>;\n}\n"]}