{"version":3,"file":"expandable-component.d.ts","sources":["expandable-component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { EventEmitter } from '@angular/core';\nimport { FilterState } from './filter-state.interface';\nimport { TreeItem } from './treeitem.interface';\n/**\n * @hidden\n *\n * An injection token used by the expand-directive to interface with\n * the TreeView or the DropDownTree components.\n */\nexport declare abstract class ExpandableComponent {\n    /**\n     * A function which determines if a specific node is expanded.\n     */\n    abstract isExpanded: (item: object, index: string) => boolean;\n    /**\n     * Fires when the user expands a TreeView node.\n     */\n    abstract expand: EventEmitter<TreeItem>;\n    /**\n     * Fires when the user collapses a TreeView node.\n     */\n    abstract collapse: EventEmitter<TreeItem>;\n    /**\n     * Emits when the built-in filtering mechanism in the data-binding directives updates the node visibility.\n     * Used for the built-in auto-expand functionalities of the component and available for custom implementations.\n     */\n    abstract filterStateChange?: EventEmitter<FilterState>;\n}\n"]}