/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var kendo_common_1 = require("@progress/kendo-common");
var kendo_angular_common_1 = require("@progress/kendo-angular-common");
var data_bound_component_1 = require("./data-bound-component");
var utils_1 = require("./utils");
var rxjs_1 = require("rxjs");
var hierarchy_editing_service_1 = require("./drag-and-drop/editing-services/hierarchy-editing.service");
var drag_and_drop_directive_1 = require("./drag-and-drop/drag-and-drop.directive");
var default_callbacks_1 = require("./default-callbacks");
var index_builder_service_1 = require("./index-builder.service");
var filtering_base_1 = require("./filtering-base");
var indexBuilder = new index_builder_service_1.IndexBuilderService();
var mapToWrappers = function (currentLevelNodes, childrenField, parent, parentIndex) {
    if (parent === void 0) { parent = null; }
    if (parentIndex === void 0) { parentIndex = ''; }
    if (!utils_1.isArrayWithAtLeastOneItem(currentLevelNodes)) {
        return [];
    }
    return currentLevelNodes.map(function (node, idx) {
        var index = indexBuilder.nodeIndex(idx.toString(), parentIndex);
        var wrapper = {
            dataItem: node,
            index: index,
            parent: parent,
            visible: true
        };
        wrapper.children = mapToWrappers(kendo_common_1.getter(childrenField)(node), childrenField, wrapper, index);
        return wrapper;
    });
};
var ɵ0 = mapToWrappers;
exports.ɵ0 = ɵ0;
/**
 * A directive which encapsulates the retrieval of child nodes.
 */
var HierarchyBindingDirective = /** @class */ (function (_super) {
    tslib_1.__extends(HierarchyBindingDirective, _super);
    function HierarchyBindingDirective(component, dragAndDropDirective) {
        var _this = _super.call(this, component) || this;
        _this.component = component;
        _this.dragAndDropDirective = dragAndDropDirective;
        /**
         * @hidden
         */
        _this.loadOnDemand = true;
        _this.originalData = [];
        var shouldFilter = !utils_1.isPresent(_this.dragAndDropDirective);
        _this.component.isVisible = shouldFilter ? function (node) { return _this.visibleNodes.has(node); } : default_callbacks_1.isVisible;
        return _this;
    }
    Object.defineProperty(HierarchyBindingDirective.prototype, "childrenField", {
        /**
         * The field name which holds the data items of the child component.
         */
        get: function () {
            return this._childrenField;
        },
        /**
         * The field name which holds the data items of the child component.
         */
        set: function (value) {
            if (!value) {
                throw new Error("'childrenField' cannot be empty");
            }
            this._childrenField = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchyBindingDirective.prototype, "nodes", {
        /**
         * The nodes which will be displayed by the TreeView.
         */
        set: function (values) {
            this.originalData = values || [];
            this.filterData = mapToWrappers(values, this.childrenField) || [];
            this.updateVisibleNodes(this.filterData);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchyBindingDirective.prototype, "isVisible", {
        /**
         * @hidden
         * A callback which determines whether a TreeView node should be rendered as hidden.
         */
        set: function (fn) {
            this.component.isVisible = fn;
        },
        enumerable: true,
        configurable: true
    });
    HierarchyBindingDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (utils_1.isPresent(this.childrenField)) {
            this.component.children = function (item) { return rxjs_1.of(kendo_common_1.getter(_this.childrenField)(item)); };
            this.component.hasChildren = function (item) {
                var children = kendo_common_1.getter(_this.childrenField)(item);
                return Boolean(children && children.length);
            };
            this.component.editService = new hierarchy_editing_service_1.HierarchyEditingService(this);
            this.component.filterChange.subscribe(this.handleFilterChange.bind(this));
            if (this.component.filter) {
                this.handleFilterChange(this.component.filter);
            }
            if (!this.loadOnDemand && utils_1.isPresent(this.component.preloadChildNodes)) {
                this.component.preloadChildNodes();
            }
        }
    };
    HierarchyBindingDirective.prototype.ngOnChanges = function (changes) {
        if (kendo_angular_common_1.isChanged('childrenField', changes, false)) {
            this.nodes = this.originalData;
        }
        // should react to changes.loadOnDemand as well - should preload the data or clear the already cached items
        if (kendo_angular_common_1.anyChanged(['nodes', 'loadOnDemand'], changes) && !this.loadOnDemand && utils_1.isPresent(this.component.preloadChildNodes)) {
            this.component.preloadChildNodes();
        }
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], HierarchyBindingDirective.prototype, "childrenField", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], HierarchyBindingDirective.prototype, "nodes", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Function])
    ], HierarchyBindingDirective.prototype, "isVisible", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], HierarchyBindingDirective.prototype, "loadOnDemand", void 0);
    HierarchyBindingDirective = tslib_1.__decorate([
        core_1.Directive({ selector: '[kendoTreeViewHierarchyBinding]' }),
        tslib_1.__param(1, core_1.Optional()), tslib_1.__param(1, core_1.Host()),
        tslib_1.__metadata("design:paramtypes", [data_bound_component_1.DataBoundComponent,
            drag_and_drop_directive_1.DragAndDropDirective])
    ], HierarchyBindingDirective);
    return HierarchyBindingDirective;
}(filtering_base_1.FilteringBase));
exports.HierarchyBindingDirective = HierarchyBindingDirective;
