/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var kendo_angular_common_1 = require("@progress/kendo-angular-common");
var core_1 = require("@angular/core");
var kendo_common_1 = require("@progress/kendo-common");
var rxjs_1 = require("rxjs");
var funcs_1 = require("./funcs");
var data_bound_component_1 = require("./data-bound-component");
var utils_1 = require("./utils");
var flat_editing_service_1 = require("./drag-and-drop/editing-services/flat-editing.service");
var index_builder_service_1 = require("./index-builder.service");
var filtering_base_1 = require("./filtering-base");
var findChildren = function (prop, nodes, value) { return nodes.filter(function (x) { return prop(x) === value; }); };
var ɵ0 = findChildren;
exports.ɵ0 = ɵ0;
var indexBuilder = new index_builder_service_1.IndexBuilderService();
var mapToTree = function (currentLevelNodes, allNodes, parentIdField, idField, parent, parentIndex) {
    if (parent === void 0) { parent = null; }
    if (parentIndex === void 0) { parentIndex = ''; }
    if (!utils_1.isArrayWithAtLeastOneItem(currentLevelNodes)) {
        return [];
    }
    return currentLevelNodes.map(function (node, idx) {
        var index = indexBuilder.nodeIndex(idx.toString(), parentIndex);
        var wrapper = {
            dataItem: node,
            index: index,
            parent: parent,
            visible: true
        };
        wrapper.children = mapToTree(findChildren(kendo_common_1.getter(parentIdField), allNodes || [], kendo_common_1.getter(idField)(node)), allNodes, parentIdField, idField, wrapper, index);
        return wrapper;
    });
};
var ɵ1 = mapToTree;
exports.ɵ1 = ɵ1;
/**
 * A directive which encapsulates the retrieval of the child nodes.
 */
var FlatDataBindingDirective = /** @class */ (function (_super) {
    tslib_1.__extends(FlatDataBindingDirective, _super);
    function FlatDataBindingDirective(component) {
        var _this = _super.call(this, component) || this;
        _this.component = component;
        /**
         * @hidden
         */
        _this.loadOnDemand = true;
        /**
         * @hidden
         */
        _this.originalData = [];
        _this.component.isVisible = function (node) { return _this.visibleNodes.has(node); };
        return _this;
    }
    Object.defineProperty(FlatDataBindingDirective.prototype, "nodes", {
        /**
         * The nodes which will be displayed by the TreeView.
         */
        set: function (values) {
            this.originalData = values || [];
            if (!utils_1.isNullOrEmptyString(this.parentIdField)) {
                var prop = kendo_common_1.getter(this.parentIdField);
                this.component.nodes = this.originalData.filter(funcs_1.compose(utils_1.isBlank, prop));
                this.filterData = mapToTree(this.component.nodes, this.originalData, this.parentIdField, this.idField);
                this.updateVisibleNodes(this.filterData);
            }
            else {
                this.component.nodes = this.originalData.slice(0);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatDataBindingDirective.prototype, "isVisible", {
        /**
         * @hidden
         * A callback which determines whether a TreeView node should be rendered as hidden.
         */
        set: function (fn) {
            this.component.isVisible = fn;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    FlatDataBindingDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (utils_1.isPresent(this.parentIdField) && utils_1.isPresent(this.idField)) {
            var fetchChildren_1 = function (node) {
                return findChildren(kendo_common_1.getter(_this.parentIdField), _this.originalData || [], kendo_common_1.getter(_this.idField)(node));
            };
            this.component.hasChildren = function (node) {
                return fetchChildren_1(node).length > 0;
            };
            this.component.children = function (node) { return rxjs_1.of(fetchChildren_1(node)); };
            this.component.editService = new flat_editing_service_1.FlatEditingService(this);
            this.component.filterChange.subscribe(this.handleFilterChange.bind(this));
            if (this.component.filter) {
                this.handleFilterChange(this.component.filter);
            }
            if (!this.loadOnDemand && utils_1.isPresent(this.component.preloadChildNodes)) {
                this.component.preloadChildNodes();
            }
        }
    };
    /**
     * @hidden
     */
    FlatDataBindingDirective.prototype.ngOnChanges = function (changes) {
        if (kendo_angular_common_1.isChanged('parentIdField', changes, false)) {
            this.nodes = this.originalData;
        }
        // should react to changes.loadOnDemand as well - should preload the data or clear the already cached items
        if (kendo_angular_common_1.anyChanged(['nodes', 'loadOnDemand'], changes) && !this.loadOnDemand && utils_1.isPresent(this.component.preloadChildNodes)) {
            this.component.preloadChildNodes();
        }
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], FlatDataBindingDirective.prototype, "nodes", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], FlatDataBindingDirective.prototype, "parentIdField", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], FlatDataBindingDirective.prototype, "idField", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], FlatDataBindingDirective.prototype, "loadOnDemand", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Function])
    ], FlatDataBindingDirective.prototype, "isVisible", null);
    FlatDataBindingDirective = tslib_1.__decorate([
        core_1.Directive({ selector: "[kendoTreeViewFlatDataBinding]" }),
        tslib_1.__metadata("design:paramtypes", [data_bound_component_1.DataBoundComponent])
    ], FlatDataBindingDirective);
    return FlatDataBindingDirective;
}(filtering_base_1.FilteringBase));
exports.FlatDataBindingDirective = FlatDataBindingDirective;
