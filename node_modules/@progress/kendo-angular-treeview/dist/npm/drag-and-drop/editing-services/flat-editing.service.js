/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var kendo_common_1 = require("@progress/kendo-common");
var operators_1 = require("rxjs/operators");
var models_1 = require("../models");
var drag_and_drop_utils_1 = require("../drag-and-drop-utils");
var load_more_utils_1 = require("../../load-more/load-more-utils");
var utils_1 = require("../../utils");
/**
 * @hidden
 */
var FlatEditingService = /** @class */ (function () {
    function FlatEditingService(flatBinding) {
        this.flatBinding = flatBinding;
    }
    FlatEditingService.prototype.add = function (_a) {
        var sourceItem = _a.sourceItem, destinationItem = _a.destinationItem, dropPosition = _a.dropPosition, sourceTree = _a.sourceTree, destinationTree = _a.destinationTree;
        // shallow clone the item as not to mistake it for its 'older' version when the remove handler kicks in to splice the item at its old position
        var clonedSourceDataItem = Object.assign({}, utils_1.getDataItem(sourceItem));
        if (dropPosition === models_1.DropPosition.Over) {
            // expand the item that was dropped into
            drag_and_drop_utils_1.expandDropTarget(destinationItem, destinationTree);
            var destinationItemId = kendo_common_1.getter(this.flatBinding.idField)(utils_1.getDataItem(destinationItem));
            kendo_common_1.setter(this.flatBinding.parentIdField)(clonedSourceDataItem, destinationItemId);
            var lastChildNodeIndex = this.getLastVisibleChildNodeIndex(destinationTree, this.flatBinding.originalData, utils_1.getDataItem(destinationItem));
            // insert after the last visible child
            var targetIndex = lastChildNodeIndex + 1;
            this.flatBinding.originalData.splice(targetIndex, 0, clonedSourceDataItem);
            // rebind the treeview data before searching for the focus target index
            this.rebindData();
            var focusTarget = this.fetchChildNodes(utils_1.getDataItem(destinationItem), destinationTree).indexOf(clonedSourceDataItem);
            this.movedItemNewIndex = utils_1.buildTreeIndex(destinationItem.item.index, focusTarget);
        }
        else {
            var shiftIndex = dropPosition === models_1.DropPosition.After ? 1 : 0;
            var targetIndex = this.flatBinding.originalData.indexOf(utils_1.getDataItem(destinationItem)) + shiftIndex;
            this.flatBinding.originalData.splice(targetIndex, 0, clonedSourceDataItem);
            var destinationItemParentId = kendo_common_1.getter(this.flatBinding.parentIdField)(utils_1.getDataItem(destinationItem));
            kendo_common_1.setter(this.flatBinding.parentIdField)(clonedSourceDataItem, destinationItemParentId);
            // rebind the treeview data before searching for the focus target index
            this.rebindData();
            var parentIndex = destinationItem.parent ?
                destinationItem.parent.item.index :
                null;
            var parentContainer = destinationItem.parent ?
                this.fetchChildNodes(utils_1.getDataItem(destinationItem.parent), destinationTree) :
                destinationTree.nodes;
            var focusTarget = parentContainer.indexOf(clonedSourceDataItem);
            this.movedItemNewIndex = utils_1.buildTreeIndex(parentIndex, focusTarget);
        }
        if (sourceTree !== destinationTree) {
            this.addChildNodes(clonedSourceDataItem, sourceTree);
        }
        // increment the parent page size => an item is moved into it
        var updatedParent = dropPosition === models_1.DropPosition.Over ? utils_1.getDataItem(destinationItem) : utils_1.getDataItem(destinationItem.parent);
        load_more_utils_1.incrementPageSize(destinationTree, updatedParent);
        // the page sizes are stored by data-item reference => copy the old item ref page size to the new item reference
        load_more_utils_1.copyPageSize(destinationTree, utils_1.getDataItem(sourceItem), clonedSourceDataItem);
        // the source tree nodes are reloaded on `removeItem` - reload the destination tree nodes if the soruce and the destination tree are different
        if (sourceTree !== destinationTree && !destinationTree.loadOnDemand) {
            destinationTree.preloadChildNodes();
        }
        // if the source and destination trees are the same, focusing the moved item here will not have the desired effect
        // as the `remove` handler has not yet kicked-in to remove the item from its old position
        if (sourceTree !== destinationTree) {
            // ensure the focus target is rendered and registered
            destinationTree.changeDetectorRef.detectChanges();
            destinationTree.focus(this.movedItemNewIndex);
        }
    };
    FlatEditingService.prototype.remove = function (_a) {
        var sourceItem = _a.sourceItem, sourceTree = _a.sourceTree, destinationTree = _a.destinationTree;
        var sourceDataItem = utils_1.getDataItem(sourceItem);
        var sourceItemIndex = this.flatBinding.originalData.indexOf(sourceDataItem);
        this.flatBinding.originalData.splice(sourceItemIndex, 1);
        if (sourceTree !== destinationTree) {
            this.removeChildNodes(sourceDataItem, sourceTree);
        }
        this.rebindData();
        // emit collapse for the parent node if its last child node was spliced
        var parentChildren = sourceItem.parent ? sourceItem.parent.children : [];
        drag_and_drop_utils_1.collapseEmptyParent(sourceItem.parent, parentChildren, sourceTree);
        // decrement source item parent page size => an item has been removed from it
        load_more_utils_1.decrementPageSize(sourceTree, utils_1.getDataItem(sourceItem.parent));
        // reload the treeview nodes
        if (!sourceTree.loadOnDemand) {
            sourceTree.preloadChildNodes();
        }
        // if the source and destination trees are different we want to focus only the moved item in the destination tree
        if (sourceTree === destinationTree) {
            // ensure the focus target is rendered and registered
            destinationTree.changeDetectorRef.detectChanges();
            // after the source item is removed from its original position, the candidate index might have to be corrected
            var index = drag_and_drop_utils_1.updateMovedItemIndex(this.movedItemNewIndex, sourceItem.item.index);
            destinationTree.focus(index);
        }
    };
    FlatEditingService.prototype.addChildNodes = function (dataItem, source) {
        var _a;
        var itemChildren = this.fetchAllDescendantNodes(dataItem, source);
        (_a = this.flatBinding.originalData).push.apply(_a, itemChildren);
    };
    FlatEditingService.prototype.removeChildNodes = function (dataItem, source) {
        var _this = this;
        var sourceChildren = this.fetchAllDescendantNodes(dataItem, source);
        sourceChildren.forEach(function (item) {
            var index = _this.flatBinding.originalData.indexOf(item);
            _this.flatBinding.originalData.splice(index, 1);
        });
    };
    FlatEditingService.prototype.fetchAllDescendantNodes = function (node, treeview) {
        var _this = this;
        var nodes = this.fetchChildNodes(node, treeview);
        nodes.forEach(function (node) { return nodes = nodes.concat(_this.fetchAllDescendantNodes(node, treeview) || []); });
        return nodes;
    };
    FlatEditingService.prototype.fetchChildNodes = function (node, treeview) {
        if (!node) {
            return [];
        }
        var nodes = [];
        treeview
            .children(node)
            .pipe(operators_1.take(1))
            .subscribe(function (children) { return nodes = nodes.concat(children || []); });
        return nodes;
    };
    FlatEditingService.prototype.getLastVisibleChildNodeIndex = function (treeview, data, node) {
        if (!utils_1.isPresent(treeview.loadMoreService) || !treeview.hasChildren(node)) {
            return data.length;
        }
        var visibleNodesCount = treeview.loadMoreService.getGroupSize(node);
        var visibleChildren = this.fetchChildNodes(node, treeview).slice(0, visibleNodesCount);
        var lastNode = visibleChildren[visibleChildren.length - 1];
        var lastNodeIndex = data.indexOf(lastNode);
        return lastNodeIndex;
    };
    FlatEditingService.prototype.rebindData = function () {
        this.flatBinding.nodes = this.flatBinding.originalData;
    };
    return FlatEditingService;
}());
exports.FlatEditingService = FlatEditingService;
