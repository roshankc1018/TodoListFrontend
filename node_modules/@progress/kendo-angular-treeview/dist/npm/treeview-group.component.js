/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var animations_1 = require("@angular/animations");
var kendo_common_1 = require("@progress/kendo-common");
var expand_state_service_1 = require("./expand-state.service");
var index_builder_service_1 = require("./index-builder.service");
var treeview_lookup_service_1 = require("./treeview-lookup.service");
var navigation_service_1 = require("./navigation/navigation.service");
var node_children_service_1 = require("./node-children.service");
var utils_1 = require("./utils");
var loading_notification_service_1 = require("./loading-notification.service");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var data_change_notification_service_1 = require("./data-change-notification.service");
/**
 * @hidden
 */
var TreeViewGroupComponent = /** @class */ (function () {
    function TreeViewGroupComponent(expandService, loadingService, indexBuilder, treeViewLookupService, navigationService, nodeChildrenService, dataChangeNotification, changeDetectorRef) {
        this.expandService = expandService;
        this.loadingService = loadingService;
        this.indexBuilder = indexBuilder;
        this.treeViewLookupService = treeViewLookupService;
        this.navigationService = navigationService;
        this.nodeChildrenService = nodeChildrenService;
        this.dataChangeNotification = dataChangeNotification;
        this.changeDetectorRef = changeDetectorRef;
        this.kGroupClass = true;
        this.role = 'group';
        this.loadOnDemand = true;
        this.textField = "";
        this.initialNodesLoaded = false;
        this.loadingMoreNodes = false;
        this._data = [];
        this.singleRecordSubscriptions = new rxjs_1.Subscription();
        this.isChecked = function () { return 'none'; };
        this.isDisabled = function () { return false; };
        this.isExpanded = function () { return false; };
        this.isVisible = function () { return true; };
        this.isSelected = function () { return false; };
        this.children = function () { return rxjs_1.of([]); };
        this.hasChildren = function () { return false; };
    }
    Object.defineProperty(TreeViewGroupComponent.prototype, "moreNodesAvailable", {
        get: function () {
            if (!utils_1.isPresent(this.loadMoreService) || this.data.length === 0) {
                return false;
            }
            return this.pageSize < this.totalNodesCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeViewGroupComponent.prototype, "pageSize", {
        get: function () {
            if (!utils_1.isPresent(this.loadMoreService)) {
                return null;
            }
            return this.loadMoreService.getGroupSize(this.parentDataItem);
        },
        set: function (pageSize) {
            this.loadMoreService.setGroupSize(this.parentDataItem, pageSize);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeViewGroupComponent.prototype, "data", {
        get: function () {
            if (utils_1.isPresent(this.pageSize)) {
                var normalizedSizeValue = this.pageSize > 0 ? this.pageSize : 0;
                return this._data.slice(0, normalizedSizeValue);
            }
            return this._data;
        },
        set: function (data) {
            this._data = data;
            this.registerLoadedNodes(this.data);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeViewGroupComponent.prototype, "loadMoreButtonIndex", {
        get: function () {
            if (!this.loadMoreService) {
                return null;
            }
            return this.nodeIndex(this.data.length);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeViewGroupComponent.prototype, "totalNodesCount", {
        /**
         * Represents the total number of nodes for the current level.
         */
        get: function () {
            if (!this.loadMoreService) {
                return this.data.length;
            }
            return this.loadMoreService.getTotalNodesCount(this.parentDataItem, this._data.length);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeViewGroupComponent.prototype, "hasTemplate", {
        get: function () {
            return utils_1.isPresent(this.nodeTemplateRef);
        },
        enumerable: true,
        configurable: true
    });
    TreeViewGroupComponent.prototype.expandNode = function (index, dataItem, expand) {
        if (expand) {
            this.expandService.expand(index, dataItem);
        }
        else {
            this.expandService.collapse(index, dataItem);
        }
    };
    TreeViewGroupComponent.prototype.checkNode = function (index) {
        this.navigationService.checkIndex(index);
        this.navigationService.activateIndex(index);
    };
    TreeViewGroupComponent.prototype.nodeIndex = function (index) {
        return this.indexBuilder.nodeIndex(index.toString(), this.parentIndex);
    };
    TreeViewGroupComponent.prototype.nodeText = function (dataItem) {
        var textField = utils_1.isArray(this.textField) ? this.textField[0] : this.textField;
        return kendo_common_1.getter(textField)(dataItem);
    };
    TreeViewGroupComponent.prototype.ngOnDestroy = function () {
        if (utils_1.isPresent(this.nodesSubscription)) {
            this.nodesSubscription.unsubscribe();
        }
        if (utils_1.isPresent(this.loadMoreNodesSubscription)) {
            this.loadMoreNodesSubscription.unsubscribe();
        }
        this.singleRecordSubscriptions.unsubscribe();
    };
    TreeViewGroupComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscribeToNodesChange();
        this.singleRecordSubscriptions.add(this.dataChangeNotification
            .changes
            .subscribe(this.subscribeToNodesChange.bind(this)));
        this.singleRecordSubscriptions.add(this.navigationService.loadMore
            .pipe(operators_1.filter(function (index) { return index === _this.loadMoreButtonIndex; }))
            .subscribe(this.loadMoreNodes.bind(this)));
    };
    TreeViewGroupComponent.prototype.ngOnChanges = function (changes) {
        if (changes.parentIndex && this.loadOnDemand) {
            this.setNodeChildren(this.mapToTreeItem(this.data));
        }
    };
    TreeViewGroupComponent.prototype.fetchChildren = function (node, index) {
        var _this = this;
        return this.children(node)
            .pipe(operators_1.catchError(function () {
            _this.loadingService.notifyLoaded(index);
            return rxjs_1.EMPTY;
        }), operators_1.tap(function () { return _this.loadingService.notifyLoaded(index); }));
    };
    Object.defineProperty(TreeViewGroupComponent.prototype, "nextFields", {
        get: function () {
            if (utils_1.isArray(this.textField)) {
                return this.textField.length > 1 ? this.textField.slice(1) : this.textField;
            }
            return [this.textField];
        },
        enumerable: true,
        configurable: true
    });
    TreeViewGroupComponent.prototype.loadMoreNodes = function () {
        if (utils_1.isPresent(this.loadMoreService.loadMoreNodes)) {
            this.fetchMoreNodes();
        }
        else {
            this.loadMoreLocalNodes();
        }
    };
    TreeViewGroupComponent.prototype.loadMoreLocalNodes = function () {
        var initialLoadMoreButtonIndex = this.loadMoreButtonIndex;
        this.pageSize += this.loadMoreService.getInitialPageSize(this.parentDataItem);
        this.registerLoadedNodes(this.data);
        // forces the new items to be registered before the focus is changed
        this.changeDetectorRef.detectChanges();
        this.reselectItemAt(initialLoadMoreButtonIndex);
    };
    TreeViewGroupComponent.prototype.fetchMoreNodes = function () {
        var _this = this;
        if (this.loadingMoreNodes) {
            return;
        }
        this.loadingMoreNodes = true;
        if (utils_1.isPresent(this.loadMoreNodesSubscription)) {
            this.loadMoreNodesSubscription.unsubscribe();
        }
        this.loadMoreNodesSubscription = this.loadMoreService
            .loadMoreNodes({
            dataItem: this.parentDataItem,
            skip: this.data.length,
            take: this.loadMoreService.getInitialPageSize(this.parentDataItem)
        })
            .pipe(operators_1.finalize(function () { return _this.loadingMoreNodes = false; }))
            .subscribe(function (items) {
            if (!(Array.isArray(items) && items.length > 0)) {
                return;
            }
            var initialLoadMoreButtonIndex = _this.loadMoreButtonIndex;
            _this.pageSize += items.length;
            _this.data = _this.data.concat(items);
            if (_this.navigationService.isActive(initialLoadMoreButtonIndex)) {
                // forces the new items to be registered before the focus is changed
                _this.changeDetectorRef.detectChanges();
                _this.reselectItemAt(initialLoadMoreButtonIndex);
            }
        });
    };
    TreeViewGroupComponent.prototype.setNodeChildren = function (children) {
        this.treeViewLookupService.registerChildren(this.parentIndex, children);
    };
    TreeViewGroupComponent.prototype.mapToTreeItem = function (data) {
        var _this = this;
        if (!this.parentIndex) {
            return [];
        }
        return data.map(function (dataItem, idx) { return ({ dataItem: dataItem, index: _this.nodeIndex(idx) }); });
    };
    TreeViewGroupComponent.prototype.emitChildrenLoaded = function (children) {
        if (!this.parentIndex) {
            return;
        }
        // ignores the registered load-more button
        var contentChildren = children.filter(function (item) { return item.dataItem; });
        this.nodeChildrenService.childrenLoaded({ dataItem: this.parentDataItem, index: this.parentIndex }, contentChildren);
    };
    TreeViewGroupComponent.prototype.subscribeToNodesChange = function () {
        var _this = this;
        if (this.nodesSubscription) {
            this.nodesSubscription.unsubscribe();
        }
        this.nodesSubscription = this.nodes(this.parentDataItem, this.parentIndex)
            .subscribe(function (data) {
            _this.data = data;
            _this.initialNodesLoaded = true;
        });
    };
    TreeViewGroupComponent.prototype.reselectItemAt = function (index) {
        if (!utils_1.isPresent(index)) {
            return;
        }
        // make sure the old index is cleared first
        this.navigationService.deactivate();
        this.navigationService.activateIndex(index);
    };
    TreeViewGroupComponent.prototype.registerLoadedNodes = function (nodes) {
        if (nodes === void 0) { nodes = []; }
        var mappedChildren = this.mapToTreeItem(nodes);
        if (this.loadOnDemand) {
            this.setNodeChildren(mappedChildren);
        }
        this.emitChildrenLoaded(mappedChildren);
    };
    tslib_1.__decorate([
        core_1.HostBinding("class.k-group"),
        tslib_1.__metadata("design:type", Boolean)
    ], TreeViewGroupComponent.prototype, "kGroupClass", void 0);
    tslib_1.__decorate([
        core_1.HostBinding("attr.role"),
        tslib_1.__metadata("design:type", String)
    ], TreeViewGroupComponent.prototype, "role", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], TreeViewGroupComponent.prototype, "checkboxes", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], TreeViewGroupComponent.prototype, "expandIcons", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], TreeViewGroupComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], TreeViewGroupComponent.prototype, "selectable", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], TreeViewGroupComponent.prototype, "touchActions", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], TreeViewGroupComponent.prototype, "loadOnDemand", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function)
    ], TreeViewGroupComponent.prototype, "trackBy", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function)
    ], TreeViewGroupComponent.prototype, "nodes", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], TreeViewGroupComponent.prototype, "textField", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], TreeViewGroupComponent.prototype, "parentDataItem", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], TreeViewGroupComponent.prototype, "parentIndex", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", core_1.TemplateRef)
    ], TreeViewGroupComponent.prototype, "nodeTemplateRef", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", core_1.TemplateRef)
    ], TreeViewGroupComponent.prototype, "loadMoreButtonTemplateRef", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], TreeViewGroupComponent.prototype, "loadMoreService", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function)
    ], TreeViewGroupComponent.prototype, "isChecked", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function)
    ], TreeViewGroupComponent.prototype, "isDisabled", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function)
    ], TreeViewGroupComponent.prototype, "isExpanded", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function)
    ], TreeViewGroupComponent.prototype, "isVisible", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function)
    ], TreeViewGroupComponent.prototype, "isSelected", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function)
    ], TreeViewGroupComponent.prototype, "children", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function)
    ], TreeViewGroupComponent.prototype, "hasChildren", void 0);
    TreeViewGroupComponent = tslib_1.__decorate([
        core_1.Component({
            animations: [
                animations_1.trigger('toggle', [
                    animations_1.transition('void => *', [
                        animations_1.style({ height: 0 }),
                        animations_1.animate('0.1s ease-in', animations_1.style({ height: "*" }))
                    ]),
                    animations_1.transition('* => void', [
                        animations_1.style({ height: "*" }),
                        animations_1.animate('0.1s ease-in', animations_1.style({ height: 0 }))
                    ])
                ])
            ],
            selector: '[kendoTreeViewGroup]',
            template: "\n        <li\n            *ngFor=\"let node of data; let index = index; trackBy: trackBy\"\n            class=\"k-item k-treeview-item\"\n            [class.k-display-none]=\"!isVisible(node, nodeIndex(index))\"\n            kendoTreeViewItem\n            [attr.aria-setsize]=\"totalNodesCount\"\n            [dataItem]=\"node\"\n            [index]=\"nodeIndex(index)\"\n            [parentDataItem]=\"parentDataItem\"\n            [parentIndex]=\"parentIndex\"\n            [loadOnDemand]=\"loadOnDemand\"\n            [checkable]=\"checkboxes\"\n            [isChecked]=\"isChecked(node, nodeIndex(index))\"\n            [isDisabled]=\"disabled || isDisabled(node, nodeIndex(index))\"\n            [isVisible]=\"isVisible(node, nodeIndex(index))\"\n            [expandable]=\"expandIcons && hasChildren(node)\"\n            [isExpanded]=\"isExpanded(node, nodeIndex(index))\"\n            [selectable]=\"selectable\"\n            [isSelected]=\"isSelected(node, nodeIndex(index))\"\n            [attr.data-treeindex]=\"nodeIndex(index)\"\n        >\n            <div class=\"k-mid\">\n                <span\n                    class=\"k-icon\"\n                    [class.k-i-collapse]=\"isExpanded(node, nodeIndex(index))\"\n                    [class.k-i-expand]=\"!isExpanded(node, nodeIndex(index))\"\n                    [kendoTreeViewLoading]=\"nodeIndex(index)\"\n                    (click)=\"expandNode(nodeIndex(index), node, !isExpanded(node, nodeIndex(index)))\"\n                    *ngIf=\"expandIcons && hasChildren(node)\"\n                >\n                </span>\n                <kendo-checkbox\n                    *ngIf=\"checkboxes\"\n                    [node]=\"node\"\n                    [index]=\"nodeIndex(index)\"\n                    [isChecked]=\"isChecked\"\n                    (checkStateChange)=\"checkNode(nodeIndex(index))\"\n                    tabindex=\"-1\"\n                ></kendo-checkbox>\n                <span kendoTreeViewItemContent\n                    [attr.data-treeindex]=\"nodeIndex(index)\"\n                    [dataItem]=\"node\"\n                    [index]=\"nodeIndex(index)\"\n                    [initialSelection]=\"isSelected(node, nodeIndex(index))\"\n                    [isSelected]=\"isSelected\"\n                    class=\"k-in\"\n                    [style.touch-action]=\"touchActions ? '' : 'none'\"\n                >\n                    <ng-container [ngSwitch]=\"hasTemplate\">\n                        <ng-container *ngSwitchCase=\"true\">\n                            <ng-template\n                                [ngTemplateOutlet]=\"nodeTemplateRef\"\n                                [ngTemplateOutletContext]=\"{\n                                    $implicit: node,\n                                    index: nodeIndex(index)\n                                }\"\n                            >\n                            </ng-template>\n                        </ng-container>\n                        <ng-container *ngSwitchDefault>\n                            {{nodeText(node)}}\n                        </ng-container>\n                    </ng-container>\n                </span>\n            </div>\n            <ul\n                *ngIf=\"isExpanded(node, nodeIndex(index)) && hasChildren(node)\"\n                kendoTreeViewGroup\n                role=\"group\"\n                [nodes]=\"fetchChildren\"\n                [loadOnDemand]=\"loadOnDemand\"\n                [checkboxes]=\"checkboxes\"\n                [expandIcons]=\"expandIcons\"\n                [selectable]=\"selectable\"\n                [touchActions]=\"touchActions\"\n                [children]=\"children\"\n                [hasChildren]=\"hasChildren\"\n                [isChecked]=\"isChecked\"\n                [isDisabled]=\"isDisabled\"\n                [disabled]=\"disabled || isDisabled(node, nodeIndex(index))\"\n                [isExpanded]=\"isExpanded\"\n                [isSelected]=\"isSelected\"\n                [isVisible]=\"isVisible\"\n                [nodeTemplateRef]=\"nodeTemplateRef\"\n                [loadMoreButtonTemplateRef]=\"loadMoreButtonTemplateRef\"\n                [parentIndex]=\"nodeIndex(index)\"\n                [parentDataItem]=\"node\"\n                [textField]=\"nextFields\"\n                [loadMoreService]=\"loadMoreService\"\n                [@toggle]=\"true\"\n                [trackBy]=\"trackBy\"\n            >\n            </ul>\n        </li>\n        <li\n            *ngIf=\"initialNodesLoaded && moreNodesAvailable\"\n            class=\"k-item k-treeview-item\"\n            [class.k-treeview-load-more-checkboxes-container]=\"checkboxes\"\n            kendoTreeViewItem\n            role=\"button\"\n            [selectable]=\"false\"\n            [checkable]=\"false\"\n            [expandable]=\"false\"\n            [index]=\"loadMoreButtonIndex\"\n            [parentDataItem]=\"parentDataItem\"\n            [parentIndex]=\"parentIndex\"\n            [attr.data-treeindex]=\"loadMoreButtonIndex\"\n        >\n            <div class=\"k-mid\">\n                <span\n                    *ngIf=\"loadingMoreNodes\"\n                    class=\"k-icon k-i-loading k-i-expand\"\n                >\n                </span>\n                <span\n                    class=\"k-in k-treeview-load-more-button\"\n                    [attr.data-treeindex]=\"loadMoreButtonIndex\"\n                    kendoTreeViewItemContent\n                    [index]=\"loadMoreButtonIndex\"\n                >\n                    <ng-template\n                        *ngIf=\"loadMoreButtonTemplateRef\"\n                        [ngTemplateOutlet]=\"loadMoreButtonTemplateRef\"\n                        [ngTemplateOutletContext]=\"{\n                            index: loadMoreButtonIndex\n                        }\"\n                    >\n                    </ng-template>\n                    <ng-container *ngIf=\"!loadMoreButtonTemplateRef\">\n                        Load more\n                    </ng-container>\n                </span>\n            </div>\n        </li>\n    "
        }),
        tslib_1.__metadata("design:paramtypes", [expand_state_service_1.ExpandStateService,
            loading_notification_service_1.LoadingNotificationService,
            index_builder_service_1.IndexBuilderService,
            treeview_lookup_service_1.TreeViewLookupService,
            navigation_service_1.NavigationService,
            node_children_service_1.NodeChildrenService,
            data_change_notification_service_1.DataChangeNotificationService,
            core_1.ChangeDetectorRef])
    ], TreeViewGroupComponent);
    return TreeViewGroupComponent;
}());
exports.TreeViewGroupComponent = TreeViewGroupComponent;
