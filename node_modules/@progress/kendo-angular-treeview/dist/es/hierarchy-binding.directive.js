/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Directive, Input, Optional, Host } from '@angular/core';
import { getter } from '@progress/kendo-common';
import { anyChanged, isChanged } from '@progress/kendo-angular-common';
import { DataBoundComponent } from './data-bound-component';
import { isArrayWithAtLeastOneItem, isPresent } from './utils';
import { of } from 'rxjs';
import { HierarchyEditingService } from './drag-and-drop/editing-services/hierarchy-editing.service';
import { DragAndDropDirective } from './drag-and-drop/drag-and-drop.directive';
import { isVisible } from './default-callbacks';
import { IndexBuilderService } from './index-builder.service';
import { FilteringBase } from './filtering-base';
var indexBuilder = new IndexBuilderService();
var mapToWrappers = function (currentLevelNodes, childrenField, parent, parentIndex) {
    if (parent === void 0) { parent = null; }
    if (parentIndex === void 0) { parentIndex = ''; }
    if (!isArrayWithAtLeastOneItem(currentLevelNodes)) {
        return [];
    }
    return currentLevelNodes.map(function (node, idx) {
        var index = indexBuilder.nodeIndex(idx.toString(), parentIndex);
        var wrapper = {
            dataItem: node,
            index: index,
            parent: parent,
            visible: true
        };
        wrapper.children = mapToWrappers(getter(childrenField)(node), childrenField, wrapper, index);
        return wrapper;
    });
};
var ɵ0 = mapToWrappers;
/**
 * A directive which encapsulates the retrieval of child nodes.
 */
var HierarchyBindingDirective = /** @class */ (function (_super) {
    tslib_1.__extends(HierarchyBindingDirective, _super);
    function HierarchyBindingDirective(component, dragAndDropDirective) {
        var _this = _super.call(this, component) || this;
        _this.component = component;
        _this.dragAndDropDirective = dragAndDropDirective;
        /**
         * @hidden
         */
        _this.loadOnDemand = true;
        _this.originalData = [];
        var shouldFilter = !isPresent(_this.dragAndDropDirective);
        _this.component.isVisible = shouldFilter ? function (node) { return _this.visibleNodes.has(node); } : isVisible;
        return _this;
    }
    Object.defineProperty(HierarchyBindingDirective.prototype, "childrenField", {
        /**
         * The field name which holds the data items of the child component.
         */
        get: function () {
            return this._childrenField;
        },
        /**
         * The field name which holds the data items of the child component.
         */
        set: function (value) {
            if (!value) {
                throw new Error("'childrenField' cannot be empty");
            }
            this._childrenField = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchyBindingDirective.prototype, "nodes", {
        /**
         * The nodes which will be displayed by the TreeView.
         */
        set: function (values) {
            this.originalData = values || [];
            this.filterData = mapToWrappers(values, this.childrenField) || [];
            this.updateVisibleNodes(this.filterData);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchyBindingDirective.prototype, "isVisible", {
        /**
         * @hidden
         * A callback which determines whether a TreeView node should be rendered as hidden.
         */
        set: function (fn) {
            this.component.isVisible = fn;
        },
        enumerable: true,
        configurable: true
    });
    HierarchyBindingDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (isPresent(this.childrenField)) {
            this.component.children = function (item) { return of(getter(_this.childrenField)(item)); };
            this.component.hasChildren = function (item) {
                var children = getter(_this.childrenField)(item);
                return Boolean(children && children.length);
            };
            this.component.editService = new HierarchyEditingService(this);
            this.component.filterChange.subscribe(this.handleFilterChange.bind(this));
            if (this.component.filter) {
                this.handleFilterChange(this.component.filter);
            }
            if (!this.loadOnDemand && isPresent(this.component.preloadChildNodes)) {
                this.component.preloadChildNodes();
            }
        }
    };
    HierarchyBindingDirective.prototype.ngOnChanges = function (changes) {
        if (isChanged('childrenField', changes, false)) {
            this.nodes = this.originalData;
        }
        // should react to changes.loadOnDemand as well - should preload the data or clear the already cached items
        if (anyChanged(['nodes', 'loadOnDemand'], changes) && !this.loadOnDemand && isPresent(this.component.preloadChildNodes)) {
            this.component.preloadChildNodes();
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], HierarchyBindingDirective.prototype, "childrenField", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], HierarchyBindingDirective.prototype, "nodes", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Function])
    ], HierarchyBindingDirective.prototype, "isVisible", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], HierarchyBindingDirective.prototype, "loadOnDemand", void 0);
    HierarchyBindingDirective = tslib_1.__decorate([
        Directive({ selector: '[kendoTreeViewHierarchyBinding]' }),
        tslib_1.__param(1, Optional()), tslib_1.__param(1, Host()),
        tslib_1.__metadata("design:paramtypes", [DataBoundComponent,
            DragAndDropDirective])
    ], HierarchyBindingDirective);
    return HierarchyBindingDirective;
}(FilteringBase));
export { HierarchyBindingDirective };
export { ɵ0 };
