/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Input } from "@angular/core";
import { DEFAULT_FILTER_SETTINGS } from "./treeview-filter-settings";
import { filterTree, isPresent } from "./utils";
/**
 * @hidden
 */
var FilteringBase = /** @class */ (function () {
    function FilteringBase(component) {
        this.component = component;
        this.visibleNodes = new Set();
        this._filterSettings = DEFAULT_FILTER_SETTINGS;
    }
    Object.defineProperty(FilteringBase.prototype, "filterSettings", {
        get: function () {
            return this._filterSettings;
        },
        /**
         * The settings which are applied when performing a filter on the component's data.
         */
        set: function (settings) {
            this._filterSettings = tslib_1.__assign({}, DEFAULT_FILTER_SETTINGS, settings);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FilteringBase.prototype, "filter", {
        /**
         * Applies a filter and changes the visibility of the component's nodes accordingly.
         */
        set: function (term) {
            this.handleFilterChange(term);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    FilteringBase.prototype.handleFilterChange = function (term) {
        if (!this.filterData) {
            return;
        }
        this.resetNodesVisibility(this.filterData);
        if (term) {
            filterTree(this.filterData, term, this.filterSettings, this.component.textField);
        }
        this.updateVisibleNodes(this.filterData);
        if (isPresent(this.component.filterStateChange)) {
            this.component.filterStateChange.emit({
                nodes: this.filterData,
                matchCount: this.visibleNodes.size,
                term: term,
                filterSettings: this.filterSettings
            });
        }
    };
    FilteringBase.prototype.updateVisibleNodes = function (items) {
        var _this = this;
        items.forEach(function (wrapper) {
            if (wrapper.visible) {
                _this.visibleNodes.add(wrapper.dataItem);
            }
            if (wrapper.children) {
                _this.updateVisibleNodes(wrapper.children);
            }
        });
    };
    FilteringBase.prototype.resetNodesVisibility = function (items) {
        var _this = this;
        this.visibleNodes.clear();
        items.forEach(function (wrapper) {
            wrapper.visible = true;
            if (wrapper.children) {
                _this.resetNodesVisibility(wrapper.children);
            }
        });
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], FilteringBase.prototype, "filterSettings", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], FilteringBase.prototype, "filter", null);
    return FilteringBase;
}());
export { FilteringBase };
