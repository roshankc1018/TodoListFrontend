/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { isDocumentAvailable } from '@progress/kendo-angular-common';
import { getter } from '@progress/kendo-common';
var focusableRegex = /^(?:a|input|select|option|textarea|button|object)$/i;
/**
 * @hidden
 */
export var match = function (element, selector) {
    var matcher = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;
    if (!matcher) {
        return false;
    }
    return matcher.call(element, selector);
};
/**
 * @hidden
 */
export var closestWithMatch = function (element, selector) {
    if (!document.documentElement.contains(element)) {
        return null;
    }
    var parent = element;
    while (parent !== null && parent.nodeType === 1) {
        if (match(parent, selector)) {
            return parent;
        }
        parent = parent.parentElement || parent.parentNode;
    }
    return null;
};
/**
 * @hidden
 */
export var noop = function () { };
/**
 * @hidden
 */
export var isPresent = function (value) { return value !== null && value !== undefined; };
/**
 * @hidden
 */
export var isBlank = function (value) { return value === null || value === undefined; };
/**
 * @hidden
 */
export var isArray = function (value) { return Array.isArray(value); };
/**
 * @hidden
 */
export var isNullOrEmptyString = function (value) { return isBlank(value) || value.trim().length === 0; };
/**
 * @hidden
 */
export var isBoolean = function (value) { return typeof value === 'boolean'; };
/**
 * @hidden
 */
export var closestNode = function (element) {
    var selector = 'li.k-treeview-item';
    if (!isDocumentAvailable()) {
        return null;
    }
    if (element.closest) {
        return element.closest(selector);
    }
    else {
        return closestWithMatch(element, selector);
    }
};
/**
 * @hidden
 */
export var isFocusable = function (element) {
    if (element.tagName) {
        var tagName = element.tagName.toLowerCase();
        var tabIndex = element.getAttribute('tabIndex');
        var skipTab = tabIndex === '-1';
        var focusable = tabIndex !== null && !skipTab;
        if (focusableRegex.test(tagName)) {
            focusable = !element.disabled && !skipTab;
        }
        return focusable;
    }
    return false;
};
/**
 * @hidden
 */
export var isContent = function (element) {
    var scopeSelector = '.k-in:not(.k-treeview-load-more-button),.k-treeview-item,.k-treeview';
    if (!isDocumentAvailable()) {
        return null;
    }
    var node = element;
    while (node && !match(node, scopeSelector)) {
        node = node.parentNode;
    }
    if (node) {
        return match(node, '.k-in:not(.k-treeview-load-more-button)');
    }
};
/**
 * @hidden
 *
 * Returns the nested .k-in:not(.k-treeview-load-more-button) element.
 * If the passed parent item is itself a content node, it is returned.
 */
export var getContentElement = function (parent) {
    if (!isPresent(parent)) {
        return null;
    }
    var selector = '.k-in:not(.k-treeview-load-more-button)';
    if (match(parent, selector)) {
        return parent;
    }
    return parent.querySelector(selector);
};
/**
 * @hidden
 */
export var isLoadMoreButton = function (element) {
    return isPresent(closestWithMatch(element, '.k-in.k-treeview-load-more-button'));
};
/**
 * @hidden
 */
export var closest = function (node, predicate) {
    while (node && !predicate(node)) {
        node = node.parentNode;
    }
    return node;
};
/**
 * @hidden
 */
export var hasParent = function (element, container) {
    return Boolean(closest(element, function (node) { return node === container; }));
};
/**
 * @hidden
 */
export var focusableNode = function (element) { return element.nativeElement.querySelector('li[tabindex="0"]'); };
/**
 * @hidden
 */
export var hasActiveNode = function (target, node) {
    var closestItem = node || closestNode(target);
    return closestItem && (closestItem === target || target.tabIndex < 0);
};
/**
 * @hidden
 */
export var nodeId = function (node) { return node ? node.getAttribute('data-treeindex') : ''; };
/**
 * @hidden
 */
export var nodeIndex = function (item) { return (item || {}).index; };
/**
 * @hidden
 */
export var dataItemsEqual = function (first, second) {
    if (!isPresent(first) && !isPresent(second)) {
        return true;
    }
    return isPresent(first) && isPresent(second) && first.item.dataItem === second.item.dataItem;
};
/**
 * @hidden
 */
export var getDataItem = function (lookup) {
    if (!isPresent(lookup)) {
        return lookup;
    }
    return lookup.item.dataItem;
};
/**
 * @hidden
 */
export var isArrayWithAtLeastOneItem = function (v) { return v && Array.isArray(v) && v.length !== 0; };
/**
 * @hidden
 * A recursive tree-filtering algorithm that returns:
 * - all child nodes of matching nodes
 * - a chain parent nodes from the match to the root node
 */
export var filterTree = function (items, term, _a, textField, depth) {
    var operator = _a.operator, ignoreCase = _a.ignoreCase, mode = _a.mode;
    if (depth === void 0) { depth = 0; }
    var field = typeof textField === "string" ? textField : textField[depth];
    items.forEach(function (wrapper) {
        var matcher = typeof operator === "string" ? matchByFieldAndCase(field, operator, ignoreCase) : operator;
        var isMatch = matcher(wrapper.dataItem, term);
        wrapper.isMatch = isMatch;
        wrapper.visible = isMatch;
        wrapper.containsMatches = false;
        if (isMatch) {
            setParentChain(wrapper.parent);
        }
        if (wrapper.children && wrapper.children.length > 0) {
            if (mode === "strict" || !isMatch) {
                filterTree(wrapper.children, term, { operator: operator, ignoreCase: ignoreCase, mode: mode }, textField, depth + 1);
            }
            else {
                makeAllVisible(wrapper.children);
            }
        }
    });
};
var setParentChain = function (node) {
    if (!isPresent(node)) {
        return;
    }
    node.containsMatches = true;
    node.visible = true;
    if (isPresent(node.parent) && !node.parent.containsMatches) {
        setParentChain(node.parent);
    }
};
var ɵ0 = setParentChain;
var makeAllVisible = function (nodes) {
    nodes.forEach(function (node) {
        node.visible = true;
        if (node.children) {
            makeAllVisible(node.children);
        }
    });
};
var ɵ1 = makeAllVisible;
var ɵ2 = function (a, b) { return a.indexOf(b) >= 0; }, ɵ3 = function (a, b) { return a.indexOf(b) === -1; }, ɵ4 = function (a, b) { return a.lastIndexOf(b, 0) === 0; }, ɵ5 = function (a, b) { return a.lastIndexOf(b, 0) === -1; }, ɵ6 = function (a, b) { return a.indexOf(b, a.length - b.length) >= 0; }, ɵ7 = function (a, b) { return a.indexOf(b, a.length - b.length) < 0; };
var operators = {
    contains: ɵ2,
    doesnotcontain: ɵ3,
    startswith: ɵ4,
    doesnotstartwith: ɵ5,
    endswith: ɵ6,
    doesnotendwith: ɵ7
};
var matchByCase = function (matcher, ignoreCase) { return function (a, b) {
    if (ignoreCase) {
        return matcher(a.toLowerCase(), b.toLowerCase());
    }
    return matcher(a, b);
}; };
var ɵ8 = matchByCase;
var matchByFieldAndCase = function (field, operator, ignoreCase) { return function (dataItem, term) { return matchByCase(operators[operator], ignoreCase)(getter(field)(dataItem), term); }; };
var ɵ9 = matchByFieldAndCase;
/**
 * @hidden
 */
export var buildTreeIndex = function (parentIndex, itemIndex) {
    return [parentIndex, itemIndex].filter(function (part) { return isPresent(part); }).join('_');
};
/**
 * @hidden
 */
export var buildTreeItem = function (dataItem, currentLevelIndex, parentIndex) {
    if (!isPresent(dataItem)) {
        return null;
    }
    return {
        dataItem: dataItem,
        index: buildTreeIndex(parentIndex, currentLevelIndex)
    };
};
/**
 * @hidden
 *
 * Retrieves all descendant nodes' lookups which are currently registered in the provided lookup item as a flat array.
 */
export var fetchLoadedDescendants = function (lookup, filterExpression) {
    if (!isPresent(lookup) || lookup.children.length === 0) {
        return [];
    }
    var descendants = lookup.children;
    if (isPresent(filterExpression)) {
        descendants = descendants.filter(filterExpression);
    }
    descendants.forEach(function (child) {
        return descendants = descendants.concat(fetchLoadedDescendants(child, filterExpression));
    });
    return descendants;
};
/**
 * @hidden
 *
 * Compares two arrays to determine whether all unique elements in one, are present in the other.
 * Important:
 *  - it disregards the element order
 *  - it disregards element repetitions - sameValues([1, 1, 2], [1, 2, 2]) will return true
 */
export var sameValues = function (a, b) {
    if (a.length !== b.length) {
        return false;
    }
    var values = new Set(b);
    return a.every(function (v) { return values.has(v); });
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9 };
