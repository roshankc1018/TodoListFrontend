/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Directive, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { TreeViewComponent } from '../treeview.component';
import { isBoolean, isPresent, noop } from '../utils';
import { Subscription } from 'rxjs';
/**
 * A directive which manages the in-memory selection state of the TreeView node
 * ([see example]({% slug selection_treeview %})).
 */
var SelectDirective = /** @class */ (function () {
    function SelectDirective(treeView) {
        var _this = this;
        this.treeView = treeView;
        /**
         * Fires when the `selectedKeys` collection was updated.
         */
        this.selectedKeysChange = new EventEmitter();
        this.subscriptions = new Subscription();
        this.selectActions = {
            'multiple': function (e) { return _this.selectMultiple(e); },
            'single': function (e) { return _this.selectSingle(e); }
        };
        this._selectedKeys = [];
        this.subscriptions.add(this.treeView.selectionChange.subscribe(this.select.bind(this)));
        this.treeView.isSelected = function (dataItem, index) { return (_this.selectedKeys.indexOf(_this.itemKey({ dataItem: dataItem, index: index })) > -1); };
    }
    Object.defineProperty(SelectDirective.prototype, "isSelected", {
        /**
         * @hidden
         */
        set: function (value) {
            this.treeView.isSelected = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectDirective.prototype, "selectedKeys", {
        /**
         * Defines the collection that will store the selected keys
         * ([see example]({% slug selection_treeview %}#toc-selection-modes)).
         */
        get: function () {
            return this._selectedKeys;
        },
        set: function (keys) {
            this._selectedKeys = keys;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectDirective.prototype, "getAriaMultiselectable", {
        get: function () {
            return this.options.mode === 'multiple';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectDirective.prototype, "options", {
        get: function () {
            var defaultOptions = {
                enabled: true,
                mode: 'single'
            };
            if (!isPresent(this.selection) || typeof this.selection === 'string') {
                return defaultOptions;
            }
            var selectionSettings = isBoolean(this.selection) ? { enabled: this.selection } : this.selection;
            return Object.assign(defaultOptions, selectionSettings);
        },
        enumerable: true,
        configurable: true
    });
    SelectDirective.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    SelectDirective.prototype.itemKey = function (e) {
        if (!this.selectKey) {
            return e.index;
        }
        if (typeof this.selectKey === 'string') {
            return e.dataItem[this.selectKey];
        }
        if (typeof this.selectKey === 'function') {
            return this.selectKey(e);
        }
    };
    SelectDirective.prototype.select = function (e) {
        var _a = this.options, enabled = _a.enabled, mode = _a.mode;
        var performSelection = this.selectActions[mode] || noop;
        if (!enabled) {
            return;
        }
        performSelection(e);
    };
    SelectDirective.prototype.selectSingle = function (node) {
        var key = this.itemKey(node);
        if (this.selectedKeys[0] === key) {
            return;
        }
        this.selectedKeys = [key];
        this.notify();
    };
    SelectDirective.prototype.selectMultiple = function (node) {
        var key = this.itemKey(node);
        var idx = this.selectedKeys.indexOf(key);
        var isSelected = idx > -1;
        if (!isPresent(key)) {
            return;
        }
        if (isSelected) {
            this.selectedKeys.splice(idx, 1);
        }
        else {
            this.selectedKeys.push(key);
        }
        this.notify();
    };
    SelectDirective.prototype.notify = function () {
        this.selectedKeysChange.emit(this.selectedKeys.slice());
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Function])
    ], SelectDirective.prototype, "isSelected", null);
    tslib_1.__decorate([
        Input('selectBy'),
        tslib_1.__metadata("design:type", Object)
    ], SelectDirective.prototype, "selectKey", void 0);
    tslib_1.__decorate([
        Input('kendoTreeViewSelectable'),
        tslib_1.__metadata("design:type", Object)
    ], SelectDirective.prototype, "selection", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], SelectDirective.prototype, "selectedKeys", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], SelectDirective.prototype, "selectedKeysChange", void 0);
    tslib_1.__decorate([
        HostBinding('attr.aria-multiselectable'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], SelectDirective.prototype, "getAriaMultiselectable", null);
    SelectDirective = tslib_1.__decorate([
        Directive({ selector: '[kendoTreeViewSelectable]' }),
        tslib_1.__metadata("design:paramtypes", [TreeViewComponent])
    ], SelectDirective);
    return SelectDirective;
}());
export { SelectDirective };
