/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { ExpandableComponent } from './expandable-component';
import { Subscription, merge } from 'rxjs';
import { map } from 'rxjs/operators';
import { isArrayWithAtLeastOneItem, isBoolean, sameValues } from './utils';
var DEFAULT_FILTER_EXPAND_SETTINGS = {
    maxAutoExpandResults: -1,
    expandMatches: false,
    expandedOnClear: "none"
};
/**
 * A directive which manages the expanded state of the TreeView.
 * ([see example]({% slug expandedstate_treeview %})).
 */
var ExpandDirective = /** @class */ (function () {
    function ExpandDirective(component) {
        var _this = this;
        this.component = component;
        /**
         * Whether or not to auto-expand the nodes leading from the root node to each filter result.
         * To fine-tune this behavior, pass a [`FilterExpandSettings`]({% slug api_treeview_filterexpandsettings %}) object to this input.
         * @default false
         */
        this.expandOnFilter = false;
        /**
         * Fires when the `expandedKeys` collection was updated.
         */
        this.expandedKeysChange = new EventEmitter();
        this.subscriptions = new Subscription();
        this._expandedKeys = [];
        this.originalExpandedKeys = [];
        this.isFiltered = false;
        /**
         * Fills array with the correct expand keys according to wrapper metadata.
         */
        this.updateExpandedNodes = function (collection, node, autoExpandMatches) {
            if (node.containsMatches || node.isMatch && autoExpandMatches && isArrayWithAtLeastOneItem(node.children)) {
                collection.push(_this.itemKey({ dataItem: node.dataItem, index: node.index }));
            }
            if (isArrayWithAtLeastOneItem(node.children)) {
                node.children.forEach(function (child) {
                    _this.updateExpandedNodes(collection, child, autoExpandMatches);
                });
            }
        };
        /**
         * Fills array with the expand key of every node.
         */
        this.getEveryExpandKey = function (collection, node) {
            if (isArrayWithAtLeastOneItem(node.children)) {
                collection.push(_this.itemKey({ dataItem: node.dataItem, index: node.index }));
            }
            if (isArrayWithAtLeastOneItem(node.children)) {
                node.children.forEach(function (child) {
                    _this.getEveryExpandKey(collection, child);
                });
            }
        };
        this.subscriptions.add(merge(this.component.expand.pipe(map(function (e) { return (tslib_1.__assign({ expand: true }, e)); })), this.component.collapse.pipe(map(function (e) { return (tslib_1.__assign({ expand: false }, e)); }))).subscribe(this.toggleExpand.bind(this)));
        if (this.component.filterStateChange) {
            this.subscriptions.add(this.component.filterStateChange.subscribe(this.handleAutoExpand.bind(this)));
        }
        this.component.isExpanded = function (dataItem, index) {
            return _this.expandedKeys.indexOf(_this.itemKey({ dataItem: dataItem, index: index })) > -1;
        };
    }
    Object.defineProperty(ExpandDirective.prototype, "isExpanded", {
        /**
         * @hidden
         */
        set: function (value) {
            this.component.isExpanded = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExpandDirective.prototype, "filterExpandSettings", {
        get: function () {
            var settings = isBoolean(this.expandOnFilter) ? { enabled: this.expandOnFilter } : tslib_1.__assign({}, this.expandOnFilter, { enabled: true });
            return Object.assign({}, DEFAULT_FILTER_EXPAND_SETTINGS, settings);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExpandDirective.prototype, "expandedKeys", {
        /**
         * Defines the collection that will store the expanded keys.
         */
        get: function () {
            return this._expandedKeys;
        },
        set: function (keys) {
            this._expandedKeys = Array.from(new Set(keys));
        },
        enumerable: true,
        configurable: true
    });
    ExpandDirective.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    /**
     * @hidden
     */
    ExpandDirective.prototype.itemKey = function (e) {
        if (this.expandKey) {
            if (typeof this.expandKey === "string") {
                return e.dataItem[this.expandKey];
            }
            if (typeof this.expandKey === "function") {
                return this.expandKey(e);
            }
        }
        return e.index;
    };
    ExpandDirective.prototype.toggleExpand = function (_a) {
        var index = _a.index, dataItem = _a.dataItem, expand = _a.expand;
        var item = this.itemKey({ index: index, dataItem: dataItem });
        var idx = this.expandedKeys.indexOf(item);
        var notify = false;
        if (idx > -1 && !expand) {
            this.expandedKeys.splice(idx, 1);
            notify = true;
        }
        else if (idx === -1 && expand) {
            this.expandedKeys.push(item);
            notify = true;
        }
        if (notify) {
            this.expandedKeysChange.emit(this.expandedKeys);
        }
    };
    ExpandDirective.prototype.handleAutoExpand = function (_a) {
        var _this = this;
        var nodes = _a.nodes, matchCount = _a.matchCount, term = _a.term;
        if (!this.filterExpandSettings.enabled) {
            return;
        }
        var _b = this.filterExpandSettings, maxAutoExpandResults = _b.maxAutoExpandResults, autoExpandMatches = _b.expandMatches, expandedOnClear = _b.expandedOnClear;
        if (!this.isFiltered) {
            this.originalExpandedKeys = this.expandedKeys.slice();
        }
        var exitingFilteredState = this.isFiltered && !term;
        var maxExceeded = maxAutoExpandResults !== -1 && matchCount > maxAutoExpandResults;
        var exitAutoExpandedState = exitingFilteredState || maxExceeded;
        if (exitAutoExpandedState) {
            switch (expandedOnClear) {
                case "initial": {
                    if (!sameValues(this.expandedKeys, this.originalExpandedKeys)) {
                        this.expandedKeys = this.originalExpandedKeys;
                        this.expandedKeysChange.emit(this.expandedKeys);
                    }
                    break;
                }
                case "all": {
                    this.expandedKeys = nodes.reduce(function (acc, rootNode) {
                        _this.getEveryExpandKey(acc, rootNode);
                        return acc;
                    }, []);
                    this.expandedKeysChange.emit(this.expandedKeys);
                    break;
                }
                case "unchanged": {
                    break;
                }
                case "none":
                default: {
                    if (this.expandedKeys.length !== 0) {
                        this.expandedKeys = [];
                        this.expandedKeysChange.emit(this.expandedKeys);
                    }
                    break;
                }
            }
            this.isFiltered = false;
            return;
        }
        var indicesToExpand = nodes.reduce(function (acc, rootNode) {
            _this.updateExpandedNodes(acc, rootNode, autoExpandMatches);
            return acc;
        }, []);
        if (!sameValues(this.expandedKeys, indicesToExpand)) {
            this.expandedKeys = indicesToExpand;
            this.expandedKeysChange.emit(this.expandedKeys);
        }
        this.isFiltered = true;
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Function])
    ], ExpandDirective.prototype, "isExpanded", null);
    tslib_1.__decorate([
        Input("expandBy"),
        tslib_1.__metadata("design:type", Object)
    ], ExpandDirective.prototype, "expandKey", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], ExpandDirective.prototype, "expandOnFilter", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], ExpandDirective.prototype, "expandedKeysChange", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], ExpandDirective.prototype, "expandedKeys", null);
    ExpandDirective = tslib_1.__decorate([
        Directive({ selector: '[kendoTreeViewExpandable]' }),
        tslib_1.__metadata("design:paramtypes", [ExpandableComponent])
    ], ExpandDirective);
    return ExpandDirective;
}());
export { ExpandDirective };
