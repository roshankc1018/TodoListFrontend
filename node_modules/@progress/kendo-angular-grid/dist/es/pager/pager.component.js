/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { Component, Input, EventEmitter, Output, HostBinding, ElementRef, Renderer2, HostListener, NgZone, Optional, Inject } from '@angular/core';
import { normalize } from './pager-settings';
import { PagerTemplateDirective } from './pager-template.directive';
import { anyChanged, replaceMessagePlaceholder } from '../utils';
import { PagerContextService } from './pager-context.service';
import { Subscription } from 'rxjs';
import { RESPONSIVE_BREAKPOINT_LARGE, RESPONSIVE_BREAKPOINT_MEDIUM } from '../constants';
import { NavigationService } from '../navigation/navigation.service';
import { take } from 'rxjs/operators';
import { CELL_CONTEXT } from '../rendering/common/cell-context';
import { FocusGroup } from '../navigation/focus-group';
import { FocusRoot, FOCUS_ROOT_ACTIVE } from '../navigation/focus-root';
import { findFocusableChild, findLastFocusableChild } from '../rendering/common/dom-queries';
/**
 * @hidden
 */
var PagerComponent = /** @class */ (function () {
    function PagerComponent(pagerContext, navigationService, element, renderer, zone, localizationService, cellContext, focusRoot, focusGroup) {
        var _this = this;
        this.pagerContext = pagerContext;
        this.navigationService = navigationService;
        this.element = element;
        this.renderer = renderer;
        this.zone = zone;
        this.localizationService = localizationService;
        this.cellContext = cellContext;
        this.focusRoot = focusRoot;
        this.focusGroup = focusGroup;
        this.total = 0;
        this.skip = 1;
        this.pageChange = new EventEmitter();
        this.pagerWrapClass = true;
        this.gridPagerClass = true;
        this.widgetClass = true;
        this.settings = normalize({});
        this.subscriptions = new Subscription();
        this._templateContext = {};
        this._isFocused = false;
        this.resizeHandler = function () {
            var element = _this.element.nativeElement;
            if (_this.template || !element) {
                return;
            }
            var width = element.offsetWidth;
            if (width < RESPONSIVE_BREAKPOINT_MEDIUM) {
                _this.renderer.removeClass(element, 'k-pager-md');
                _this.renderer.addClass(element, 'k-pager-sm');
            }
            else if (width >= RESPONSIVE_BREAKPOINT_MEDIUM && width < RESPONSIVE_BREAKPOINT_LARGE) {
                _this.renderer.addClass(element, 'k-pager-md');
                _this.renderer.removeClass(element, 'k-pager-sm');
            }
            else {
                _this.clearResponsiveClasses();
            }
        };
    }
    Object.defineProperty(PagerComponent.prototype, "options", {
        set: function (value) {
            this.settings = normalize(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerComponent.prototype, "isFocused", {
        get: function () {
            return this._isFocused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerComponent.prototype, "pagerAriaLabel", {
        get: function () {
            return this.navigationService.enabled ? this.pagerLabel : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerComponent.prototype, "pagerLabel", {
        /**
         * @hidden
         */
        get: function () {
            var localizationMsg = this.localizationService.get('pagerLabel') || '';
            return replaceMessagePlaceholder(replaceMessagePlaceholder(localizationMsg, 'currentPage', this.currentPage.toString()), 'totalPages', this.totalPages.toString());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerComponent.prototype, "focusTrapTabIndex", {
        get: function () {
            return this.focusGroup.isActive ? '0' : '-1';
        },
        enumerable: true,
        configurable: true
    });
    PagerComponent.prototype.onFocusIn = function (event) {
        if (this.navigationService.enabled) {
            var shouldFocusPager = event.target === this.element.nativeElement;
            if (shouldFocusPager) {
                this._isFocused = true;
                this.focusRoot.deactivate();
            }
            else {
                this.focusRoot.activate();
            }
        }
    };
    PagerComponent.prototype.onFocusOut = function () {
        if (this.navigationService.enabled) {
            this._isFocused = false;
        }
    };
    PagerComponent.prototype.onEscape = function () {
        if (this.navigationService.enabled) {
            this.focusRoot.deactivate();
            this.element.nativeElement.focus();
        }
    };
    PagerComponent.prototype.onEnter = function (event) {
        if (this.navigationService.enabled && event.target === this.element.nativeElement) {
            this.focusRoot.activate();
            this.focusFirstElement();
        }
    };
    PagerComponent.prototype.navigateToPreviousPage = function (e) {
        if (this.shouldTriggerPageChange(e.target, this.currentPage > 1)) {
            this.pagerContext.prevPage();
        }
    };
    PagerComponent.prototype.navigateToNextPage = function (e) {
        if (this.shouldTriggerPageChange(e.target, this.currentPage < this.totalPages)) {
            this.pagerContext.nextPage();
        }
    };
    PagerComponent.prototype.navigateToFirstPage = function (e) {
        if (this.shouldTriggerPageChange(e.target, this.currentPage > 1)) {
            this.pagerContext.changePage(0);
        }
    };
    PagerComponent.prototype.navigateToLastPage = function (e) {
        if (this.shouldTriggerPageChange(e.target, this.currentPage < this.totalPages)) {
            this.pagerContext.changePage(this.totalPages - 1);
        }
    };
    Object.defineProperty(PagerComponent.prototype, "totalPages", {
        get: function () {
            return Math.ceil((this.total || 0) / this.pageSize);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerComponent.prototype, "currentPage", {
        get: function () {
            return Math.floor((this.skip || 0) / this.pageSize) + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerComponent.prototype, "templateContext", {
        get: function () {
            var context = this._templateContext;
            context.totalPages = this.totalPages;
            context.total = this.total;
            context.skip = this.skip;
            context.pageSize = this.pageSize;
            context.currentPage = this.currentPage;
            return context;
        },
        enumerable: true,
        configurable: true
    });
    PagerComponent.prototype.ngOnInit = function () {
        this.subscriptions.add(this.pagerContext.pageChange.subscribe(this.changePage.bind(this)));
        if (this.navigationService.enabled) {
            this.focusRoot.deactivate();
        }
    };
    PagerComponent.prototype.ngDoCheck = function () {
        this.updateCellContext();
    };
    PagerComponent.prototype.ngOnChanges = function (changes) {
        if (anyChanged(['pageSize', 'skip', 'total'], changes, false)) {
            this.pagerContext.notifyChanges({
                pageSize: this.pageSize,
                skip: this.skip,
                total: this.total
            });
        }
        if (changes.template) {
            changes.template.currentValue ? this.clearResponsiveClasses() : this.resizeHandler();
        }
        if (changes.options) {
            this.settings.responsive ? this.resizeHandler() : this.clearResponsiveClasses();
        }
    };
    PagerComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    };
    PagerComponent.prototype.changePage = function (event) {
        this.pageChange.emit(event);
    };
    PagerComponent.prototype.onInnerFocusIn = function (event, position) {
        var _this = this;
        this.zone.onStable.pipe(take(1)).subscribe(function () {
            if (position === 'start') {
                if (event.relatedTarget === _this.element.nativeElement) {
                    _this.focusFirstElement();
                }
                else {
                    _this.focusLastElement();
                }
            }
            else {
                _this.focusFirstElement();
            }
        });
    };
    PagerComponent.prototype.clearResponsiveClasses = function () {
        var element = this.element.nativeElement;
        this.renderer.removeClass(element, 'k-pager-sm');
        this.renderer.removeClass(element, 'k-pager-md');
    };
    PagerComponent.prototype.shouldTriggerPageChange = function (target, condition) {
        return this.navigationService.enabled &&
            target === this.element.nativeElement &&
            condition;
    };
    PagerComponent.prototype.focusFirstElement = function () {
        var first = findFocusableChild(this.element.nativeElement, true);
        if (first) {
            first.focus();
        }
    };
    PagerComponent.prototype.focusLastElement = function () {
        var last = findLastFocusableChild(this.element.nativeElement, true);
        if (last) {
            last.focus();
        }
    };
    PagerComponent.prototype.updateCellContext = function () {
        if (this.cellContext) {
            this.cellContext.focusGroup = this.focusGroup;
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], PagerComponent.prototype, "total", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], PagerComponent.prototype, "skip", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], PagerComponent.prototype, "pageSize", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PagerComponent.prototype, "options", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", PagerTemplateDirective)
    ], PagerComponent.prototype, "template", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PagerComponent.prototype, "pageChange", void 0);
    tslib_1.__decorate([
        HostBinding('class.k-pager-wrap'),
        tslib_1.__metadata("design:type", Boolean)
    ], PagerComponent.prototype, "pagerWrapClass", void 0);
    tslib_1.__decorate([
        HostBinding('class.k-grid-pager'),
        tslib_1.__metadata("design:type", Boolean)
    ], PagerComponent.prototype, "gridPagerClass", void 0);
    tslib_1.__decorate([
        HostBinding('class.k-widget'),
        tslib_1.__metadata("design:type", Boolean)
    ], PagerComponent.prototype, "widgetClass", void 0);
    tslib_1.__decorate([
        HostBinding('class.k-state-focused'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], PagerComponent.prototype, "isFocused", null);
    tslib_1.__decorate([
        HostBinding('attr.aria-label'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [])
    ], PagerComponent.prototype, "pagerAriaLabel", null);
    tslib_1.__decorate([
        HostListener('focusin', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PagerComponent.prototype, "onFocusIn", null);
    tslib_1.__decorate([
        HostListener('focusout'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], PagerComponent.prototype, "onFocusOut", null);
    tslib_1.__decorate([
        HostListener('keydown.escape'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], PagerComponent.prototype, "onEscape", null);
    tslib_1.__decorate([
        HostListener('keydown.enter', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PagerComponent.prototype, "onEnter", null);
    tslib_1.__decorate([
        HostListener('keydown.arrowleft', ['$event']),
        HostListener('keydown.pageup', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PagerComponent.prototype, "navigateToPreviousPage", null);
    tslib_1.__decorate([
        HostListener('keydown.arrowright', ['$event']),
        HostListener('keydown.pagedown', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PagerComponent.prototype, "navigateToNextPage", null);
    tslib_1.__decorate([
        HostListener('keydown.home', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PagerComponent.prototype, "navigateToFirstPage", null);
    tslib_1.__decorate([
        HostListener('keydown.end', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PagerComponent.prototype, "navigateToLastPage", null);
    PagerComponent = tslib_1.__decorate([
        Component({
            selector: 'kendo-pager',
            providers: [{
                    provide: FOCUS_ROOT_ACTIVE,
                    useValue: true
                }, {
                    provide: FocusRoot,
                    deps: [FOCUS_ROOT_ACTIVE],
                    useClass: FocusRoot
                }, {
                    provide: FocusGroup,
                    deps: [FocusRoot],
                    useClass: FocusGroup
                }],
            template: "\n        <div\n            *ngIf=\"navigationService.enabled\"\n            class=\"k-sr-only\"\n            [tabindex]=\"focusTrapTabIndex\"\n            [attr.aria-hidden]=\"true\"\n            (focusin)=\"onInnerFocusIn($event, 'start')\">\n        </div>\n        <ng-container\n            *ngIf=\"template?.templateRef\"\n            [ngTemplateOutlet]=\"template.templateRef\"\n            [ngTemplateOutletContext]=\"templateContext\">\n        </ng-container>\n        <ng-container *ngIf=\"!template?.templateRef\">\n            <kendo-pager-prev-buttons *ngIf=\"settings.previousNext\"></kendo-pager-prev-buttons>\n            <kendo-pager-numeric-buttons\n                *ngIf=\"settings.type === 'numeric'\"\n                [buttonCount]=\"settings.buttonCount\">\n            </kendo-pager-numeric-buttons>\n            <kendo-pager-input *ngIf=\"settings.type === 'input'\"></kendo-pager-input>\n            <kendo-pager-next-buttons *ngIf=\"settings.previousNext\"></kendo-pager-next-buttons>\n            <kendo-pager-info *ngIf='settings.info'></kendo-pager-info>\n            <kendo-pager-page-sizes\n                *ngIf=\"settings.pageSizes\"\n                [pageSizes]=\"settings.pageSizes\"\n                #pageSizes\n            ></kendo-pager-page-sizes>\n        </ng-container>\n        <div\n            *ngIf=\"navigationService.enabled\"\n            class=\"k-sr-only\"\n            [tabindex]=\"focusTrapTabIndex\"\n            [attr.aria-hidden]=\"true\"\n            (focusin)=\"onInnerFocusIn($event, 'end')\">\n        </div>\n        <kendo-resize-sensor *ngIf=\"settings.responsive\" (resize)=\"resizeHandler()\"></kendo-resize-sensor>\n  "
        }),
        tslib_1.__param(6, Optional()), tslib_1.__param(6, Inject(CELL_CONTEXT)),
        tslib_1.__metadata("design:paramtypes", [PagerContextService,
            NavigationService,
            ElementRef,
            Renderer2,
            NgZone,
            LocalizationService, Object, FocusRoot,
            FocusGroup])
    ], PagerComponent);
    return PagerComponent;
}());
export { PagerComponent };
