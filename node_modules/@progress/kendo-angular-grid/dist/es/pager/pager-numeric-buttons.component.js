/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Input } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { PagerContextService } from './pager-context.service';
import { PagerElementComponent } from './pager-element.component';
/**
 * Displays numeric buttons to enable navigation between the pages.
 */
var PagerNumericButtonsComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PagerNumericButtonsComponent, _super);
    function PagerNumericButtonsComponent(localization, cd, pagerContext) {
        var _this = _super.call(this, localization, pagerContext, cd) || this;
        _this.pagerContext = pagerContext;
        _this.numbersWrapClass = true;
        return _this;
    }
    Object.defineProperty(PagerNumericButtonsComponent.prototype, "buttons", {
        /**
         * @hidden
         *
         * @readonly
         * @type {number[]}
         * @memberOf PagerNumericButtonsComponent
         */
        get: function () {
            var result = [];
            for (var idx = this.start; idx <= this.end; idx++) {
                result.push(idx);
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerNumericButtonsComponent.prototype, "end", {
        /**
         * @hidden
         */
        get: function () {
            return Math.min((this.start + this.buttonCount) - 1, this.totalPages);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerNumericButtonsComponent.prototype, "start", {
        /**
         * @hidden
         */
        get: function () {
            var page = this.currentPage;
            var buttonCount = this.buttonCount;
            if (page > buttonCount) {
                var reminder = (page % buttonCount);
                return (reminder === 0) ? (page - buttonCount) + 1 : (page - reminder) + 1;
            }
            return 1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    PagerNumericButtonsComponent.prototype.pageLabel = function (num) {
        var pageText = this.textFor('pagerPage');
        if (pageText) {
            return pageText + ' ' + num;
        }
        return num.toString();
    };
    /**
     * @hidden
     */
    PagerNumericButtonsComponent.prototype.onSelectChange = function (e) {
        var target = e.target;
        var valueAsNumber = Number(target.value);
        if (!Number.isNaN(valueAsNumber)) {
            this.changePage(valueAsNumber - 1);
        }
        else {
            if (target.value === 'previousButtons') {
                this.changePage(this.start - 2);
            }
            else {
                this.changePage(this.end);
            }
        }
    };
    PagerNumericButtonsComponent.prototype.onChanges = function (_a) {
        var total = _a.total, skip = _a.skip, pageSize = _a.pageSize;
        this.total = total;
        this.skip = skip;
        this.pageSize = pageSize;
        this.cd.markForCheck();
    };
    tslib_1.__decorate([
        HostBinding('class.k-pager-numbers-wrap'),
        tslib_1.__metadata("design:type", Boolean)
    ], PagerNumericButtonsComponent.prototype, "numbersWrapClass", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], PagerNumericButtonsComponent.prototype, "buttonCount", void 0);
    PagerNumericButtonsComponent = tslib_1.__decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            selector: 'kendo-pager-numeric-buttons',
            template: "\n        <select\n            class=\"k-dropdown k-pager-nav\"\n            kendoGridFocusable\n            tabindex=\"0\"\n            [value]=\"(currentPage).toString()\"\n            (change)=\"onSelectChange($event)\">\n            <option *ngIf=\"start > 1\"\n                class=\"k-link\"\n                value=\"previousButtons\"\n                [attr.aria-label]=\"pageLabel(start - 1)\">...\n            </option>\n            <option *ngFor=\"let num of buttons\"\n                [value]=\"num.toString()\"\n                [attr.aria-label]=\"pageLabel(num)\"\n                [attr.aria-current]=\"currentPage == num ? 'page' : undefined\"\n                [ngClass]=\"{'k-link': true, 'k-state-selected':currentPage == num}\">\n                {{num}}\n            </option>\n            <option *ngIf=\"end < totalPages\"\n                value=\"nextButtons\"\n                class=\"k-link\"\n                [attr.aria-label]=\"pageLabel(end + 1)\">...\n            </option>\n        </select>\n        <ul [ngClass]=\"{'k-pager-numbers': true, 'k-reset': true}\">\n            <li *ngIf=\"start > 1\">\n                <span\n                    kendoGridFocusable\n                    tabindex=\"0\"\n                    class=\"k-link k-pager-nav\"\n                    [attr.aria-label]=\"pageLabel(start - 1)\"\n                    (click)=\"changePage(start - 2)\"\n                    (keydown.enter)=\"changePage(start - 2)\">...</span>\n            </li>\n            <li *ngFor=\"let num of buttons\">\n                <span\n                    kendoGridFocusable\n                    tabindex=\"0\"\n                    [attr.aria-label]=\"pageLabel(num)\"\n                    [ngClass]=\"{'k-link': true, 'k-state-selected':currentPage == num, 'k-pager-nav': true}\"\n                    (click)=\"changePage(num - 1)\"\n                    (keydown.enter)=\"changePage(num - 1)\">\n                    {{num}}\n                </span>\n            </li>\n            <li *ngIf=\"end < totalPages\">\n                <span\n                    kendoGridFocusable\n                    tabindex=\"0\"\n                    class=\"k-link k-pager-nav\"\n                    [attr.aria-label]=\"pageLabel(end + 1)\"\n                    (click)=\"changePage(end)\"\n                    (keydown.enter)=\"changePage(end)\">...</span>\n            </li>\n        </ul>\n    "
        }),
        tslib_1.__metadata("design:paramtypes", [LocalizationService,
            ChangeDetectorRef,
            PagerContextService])
    ], PagerNumericButtonsComponent);
    return PagerNumericButtonsComponent;
}(PagerElementComponent));
export { PagerNumericButtonsComponent };
