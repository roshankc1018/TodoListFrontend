/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Injectable, EventEmitter } from "@angular/core";
import { ColumnsContainer } from "../columns/columns-container";
import { expandColumns } from "../columns/column-common";
import { orderBy } from '@progress/kendo-data-query';
var NO_STICKY = { left: '0px', right: '0px' };
/**
 * @hidden
 */
var ColumnInfoService = /** @class */ (function () {
    function ColumnInfoService() {
        this.visibilityChange = new EventEmitter();
        this.lockedChange = new EventEmitter();
        this.stickyChange = new EventEmitter();
        this.columnRangeChange = new EventEmitter();
        this.columnsContainer = new ColumnsContainer(function () { return []; });
    }
    Object.defineProperty(ColumnInfoService.prototype, "lockedLeafColumns", {
        get: function () {
            return this.columnsContainer.lockedLeafColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnInfoService.prototype, "nonLockedLeafColumns", {
        get: function () {
            return this.columnsContainer.nonLockedLeafColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnInfoService.prototype, "isLocked", {
        get: function () {
            return this.lockedLeafColumns.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnInfoService.prototype, "totalLevels", {
        get: function () {
            return this.columnsContainer.totalLevels;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnInfoService.prototype, "leafNamedColumns", {
        get: function () {
            var columns = expandColumns(this.list().filterSort(function (column) { return !column.isColumnGroup; }))
                .filter(function (column) { return column.matchesMedia && column.displayTitle; });
            return orderBy(columns, [{ field: 'locked', dir: 'desc' }]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnInfoService.prototype, "unlockedRootCount", {
        get: function () {
            return this.list().rootColumns().filter(function (column) { return !column.locked && column.isVisible; }).length;
        },
        enumerable: true,
        configurable: true
    });
    ColumnInfoService.prototype.stickyColumnsStyles = function (column) {
        if (!this.stickyColumns) {
            this.stickyColumns = this.list().rootColumns().filter(function (column) { return column.sticky && !column.locked && column.isVisible; });
        }
        if (this.stickyColumns.length === 0) {
            return NO_STICKY;
        }
        var result = this.stickyColumns.reduce(function (acc, curr) {
            if (curr.leafIndex < column.leafIndex) {
                acc.left += curr.width;
            }
            else if (curr.leafIndex > column.leafIndex) {
                acc.right += curr.width;
            }
            return acc;
        }, { left: 0, right: 0 });
        return {
            left: result.left + "px",
            right: result.right + "px"
        };
    };
    ColumnInfoService.prototype.init = function (columns, list) {
        this.columnsContainer = columns;
        this.list = list;
        this.stickyColumns = null;
    };
    ColumnInfoService.prototype.changeVisibility = function (columns) {
        this.stickyColumns = null;
        this.visibilityChange.emit(columns);
    };
    ColumnInfoService.prototype.changeLocked = function (columns) {
        this.stickyColumns = null;
        this.lockedChange.emit(columns);
    };
    ColumnInfoService.prototype.changeStuck = function (columns) {
        this.stickyColumns = null;
        this.stickyChange.emit(columns);
    };
    ColumnInfoService = tslib_1.__decorate([
        Injectable()
    ], ColumnInfoService);
    return ColumnInfoService;
}());
export { ColumnInfoService };
