/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { getGroupRowArgs } from './utils';
var isChildIndex = function (targetIndex, parentIndex) { return parentIndex !== targetIndex && targetIndex.startsWith(parentIndex); };
var ɵ0 = isChildIndex;
/**
 * @hidden
 */
var GroupsService = /** @class */ (function () {
    function GroupsService() {
        this.changes = new Subject();
        this.rowState = new Set();
    }
    GroupsService.prototype.reset = function () {
        this.rowState.clear();
    };
    GroupsService.prototype.ngOnDestroy = function () {
        this.reset();
    };
    GroupsService.prototype.isExpanded = function (groupArgs) {
        if (this.userCallback) {
            return this.userCallback(groupArgs);
        }
        return !this.rowState.has(groupArgs.groupIndex);
    };
    GroupsService.prototype.isInExpandedGroup = function (groupItem) {
        var expanded = true;
        while (groupItem && expanded) {
            expanded = this.isExpanded({
                group: groupItem.data,
                groupIndex: groupItem.index,
                parentGroup: getGroupRowArgs(groupItem.parentGroup)
            });
            groupItem = groupItem.parentGroup;
        }
        return expanded;
    };
    GroupsService.prototype.toggleRow = function (groupItem) {
        var parentGroup = getGroupRowArgs(groupItem.parentGroup);
        var expand = !this.isExpanded({ group: groupItem.data, groupIndex: groupItem.index, parentGroup: parentGroup });
        this.changes.next({ group: groupItem.data, expand: expand, groupIndex: groupItem.index, parentGroup: parentGroup });
        // if usercallback is given, the rowState should be ignored
        if (this.userCallback) {
            return;
        }
        if (expand) {
            this.rowState.delete(groupItem.index);
        }
        else {
            this.rowState.add(groupItem.index);
        }
    };
    GroupsService.prototype.expandChildren = function (parentIndex) {
        var _this = this;
        this.rowState.forEach(function (index) { return isChildIndex(index, parentIndex) && _this.rowState.delete(index); });
    };
    GroupsService = tslib_1.__decorate([
        Injectable()
    ], GroupsService);
    return GroupsService;
}());
export { GroupsService };
export { ɵ0 };
