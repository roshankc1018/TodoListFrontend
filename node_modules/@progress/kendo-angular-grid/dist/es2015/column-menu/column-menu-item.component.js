/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ContentChild } from '@angular/core';
import { trigger, transition, style, animate, state } from '@angular/animations';
import { ColumnMenuItemContentTemplateDirective } from './column-menu-item-content-template.directive';
/**
 * Represents an item that can be placed inside a
 * [ColumnMenuTemplate]({% slug api_grid_columnmenutemplatedirective %}) directive.
 *
 * @example
 * ```ts-preview
 *
 * _@Component({
 *     selector: 'my-app',
 *     template: `
 *       <kendo-grid [data]="data" [columnMenu]="true" [resizable]="true" #grid>
 *          <ng-template kendoGridColumnMenuTemplate let-service="service" let-column="column">
 *              <kendo-grid-columnmenu-item icon="arrows-resizing" text="Fit column"
 *                  (itemClick)="grid.autoFitColumn(column); service.close()">
 *              </kendo-grid-columnmenu-item>
 *          </ng-template>
 *          <kendo-grid-column field="Field1"></kendo-grid-column>
 *          <kendo-grid-column field="Field2"></kendo-grid-column>
 *       </kendo-grid>
 *     `
 * })
 *
 * class AppComponent {
 *   public data: any[] = [{ Field1: 'Foo', Field2: 'Bar' }];
 * }
 *
 * ```
 */
let ColumnMenuItemComponent = class ColumnMenuItemComponent {
    /**
     * Represents an item that can be placed inside a
     * [ColumnMenuTemplate]({% slug api_grid_columnmenutemplatedirective %}) directive.
     *
     * @example
     * ```ts-preview
     *
     * _@Component({
     *     selector: 'my-app',
     *     template: `
     *       <kendo-grid [data]="data" [columnMenu]="true" [resizable]="true" #grid>
     *          <ng-template kendoGridColumnMenuTemplate let-service="service" let-column="column">
     *              <kendo-grid-columnmenu-item icon="arrows-resizing" text="Fit column"
     *                  (itemClick)="grid.autoFitColumn(column); service.close()">
     *              </kendo-grid-columnmenu-item>
     *          </ng-template>
     *          <kendo-grid-column field="Field1"></kendo-grid-column>
     *          <kendo-grid-column field="Field2"></kendo-grid-column>
     *       </kendo-grid>
     *     `
     * })
     *
     * class AppComponent {
     *   public data: any[] = [{ Field1: 'Foo', Field2: 'Bar' }];
     * }
     *
     * ```
     */
    constructor() {
        /**
         * Fires when the item is clicked.
         */
        this.itemClick = new EventEmitter();
        /**
         * Fires when the content is expanded.
         */
        this.expand = new EventEmitter();
        /**
         * Fires when the content is collapsed.
         */
        this.collapse = new EventEmitter();
        this.contentState = 'collapsed';
    }
    get iconClass() {
        return `k-i-${this.icon}`;
    }
    ngOnChanges(changes) {
        if (changes.expanded) {
            this.updateContentState();
        }
    }
    /**
     * @hidden
     */
    onClick(e) {
        this.itemClick.emit(e);
        if (this.contentTemplate) {
            this.expanded = !this.expanded;
            this.updateContentState();
            if (this.expanded) {
                this.expand.emit();
            }
            else {
                this.collapse.emit();
            }
        }
    }
    updateContentState() {
        this.contentState = this.expanded ? 'expanded' : 'collapsed';
    }
};
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ColumnMenuItemComponent.prototype, "itemClick", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ColumnMenuItemComponent.prototype, "expand", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ColumnMenuItemComponent.prototype, "collapse", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ColumnMenuItemComponent.prototype, "icon", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ColumnMenuItemComponent.prototype, "text", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ColumnMenuItemComponent.prototype, "selected", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ColumnMenuItemComponent.prototype, "disabled", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ColumnMenuItemComponent.prototype, "expanded", void 0);
tslib_1.__decorate([
    ContentChild(ColumnMenuItemContentTemplateDirective, { static: false }),
    tslib_1.__metadata("design:type", ColumnMenuItemContentTemplateDirective)
], ColumnMenuItemComponent.prototype, "contentTemplate", void 0);
ColumnMenuItemComponent = tslib_1.__decorate([
    Component({
        animations: [
            trigger('state', [
                state('collapsed', style({ display: 'none' })),
                state('expanded', style({ display: 'block' })),
                transition('collapsed => expanded', [
                    style({
                        height: '0px',
                        display: 'block'
                    }),
                    animate('100ms ease-in', style({
                        height: '*'
                    }))
                ]),
                transition('expanded => collapsed', [
                    style({
                        height: '*'
                    }),
                    animate('100ms ease-in', style({
                        height: '0px'
                    }))
                ])
            ])
        ],
        selector: 'kendo-grid-columnmenu-item',
        template: `
        <div
            class="k-columnmenu-item"
            (click)="onClick($event)"
            (keydown.enter)="onClick($event)"
            [class.k-state-selected]="selected"
            [class.k-state-disabled]="disabled"
            role="button"
            [attr.aria-expanded]="expanded">
           <span *ngIf="icon" class="k-icon" [ngClass]="iconClass">
           </span>
           {{ text }}
        </div>
        <div *ngIf="contentTemplate" [@state]="contentState" style="overflow:hidden;" class="k-columnmenu-item-content">
            <ng-container [ngTemplateOutlet]="contentTemplate.templateRef">
            </ng-container>
        <div>
    `
    })
], ColumnMenuItemComponent);
export { ColumnMenuItemComponent };
