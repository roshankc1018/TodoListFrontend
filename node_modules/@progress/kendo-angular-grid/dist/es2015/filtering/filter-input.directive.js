/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Inject, Input, NgZone, Renderer2, Self, ContentChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { debounceTime, filter } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { isChanged } from '../utils';
import { isDocumentAvailable, KendoInput } from '@progress/kendo-angular-common';
/**
 * @hidden
 */
let FilterInputDirective = class FilterInputDirective {
    constructor(valueAccessors, ngZone, element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.change = new EventEmitter();
        this.composing = false;
        this.filterDelay = 500;
        this.changeRequests = new Subject();
        this.accessor = valueAccessors[0];
        ngZone.runOutsideAngular(() => {
            const unsubscribeStart = renderer.listen(element.nativeElement, 'compositionstart', () => this.composing = true);
            const unsubscribeEnd = renderer.listen(element.nativeElement, 'compositionend', () => this.composing = false);
            this.unsubscribeEvents = () => {
                unsubscribeStart();
                unsubscribeEnd();
            };
        });
    }
    set value(value) {
        this.accessor.writeValue(value);
    }
    set disabled(value) {
        this.accessor.setDisabledState(value);
    }
    ngAfterViewInit() {
        this.addAriaAttributes();
        this.accessor.registerOnChange(x => this.filterDelay > 0 ?
            this.changeRequests.next(x) :
            this.change.emit(x));
        this.subscribeChanges();
    }
    ngOnChanges(changes) {
        if (isChanged('filterDelay', changes)) {
            this.unsubscribeChanges();
            this.subscribeChanges();
        }
    }
    ngOnDestroy() {
        this.unsubscribeChanges();
        this.unsubscribeEvents();
    }
    subscribeChanges() {
        this.changeRequestsSubscription = this.changeRequests
            .pipe(debounceTime(this.filterDelay), filter(() => !this.composing))
            .subscribe(x => this.change.emit(x));
    }
    unsubscribeChanges() {
        if (this.changeRequestsSubscription) {
            this.changeRequestsSubscription.unsubscribe();
        }
    }
    addAriaAttributes() {
        const ariaValue = this.columnLabel;
        if (this.kendoInput && this.kendoInput.focusableId && isDocumentAvailable()) {
            const focusableElement = this.element.nativeElement.querySelector(`#${this.kendoInput.focusableId}`);
            this.renderer.setAttribute(focusableElement, 'aria-label', ariaValue);
        }
        else {
            this.renderer.setAttribute(this.element.nativeElement, 'aria-label', ariaValue);
        }
    }
};
tslib_1.__decorate([
    ContentChild(KendoInput, { static: true }),
    tslib_1.__metadata("design:type", Object)
], FilterInputDirective.prototype, "kendoInput", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], FilterInputDirective.prototype, "filterDelay", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FilterInputDirective.prototype, "columnLabel", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], FilterInputDirective.prototype, "value", null);
FilterInputDirective = tslib_1.__decorate([
    Directive({
        selector: '[kendoFilterInput]'
    }),
    tslib_1.__param(0, Self()), tslib_1.__param(0, Inject(NG_VALUE_ACCESSOR)),
    tslib_1.__metadata("design:paramtypes", [Array, NgZone,
        ElementRef,
        Renderer2])
], FilterInputDirective);
export { FilterInputDirective };
