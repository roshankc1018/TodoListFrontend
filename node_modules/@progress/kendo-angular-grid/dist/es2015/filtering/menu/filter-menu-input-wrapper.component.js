/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { MenuTabbingService } from './menu-tabbing.service';
import { DropDownListComponent } from '@progress/kendo-angular-dropdowns';
import { Component, Input, ViewChild } from '@angular/core';
import { FilterService } from '../filter.service';
import { FilterInputWrapperComponent } from "../filter-input-wrapper.component";
import { replaceMessagePlaceholder } from '../../utils';
/**
 * @hidden
 */
let FilterMenuInputWrapperComponent = class FilterMenuInputWrapperComponent extends FilterInputWrapperComponent {
    constructor(localizationService) {
        super(null);
        this.localizationService = localizationService;
    }
    /**
     * @hidden
     */
    get hostClasses() {
        return false;
    }
    ngAfterViewInit() {
        if (this.isFirstDropDown && this.filterService && this.filterService.menuTabbingService) {
            this.filterService.menuTabbingService.firstFocusable = this.firstOperatorDropDown;
            this.firstOperatorDropDown.focus();
        }
    }
    operatorChange(dataItem) {
        this.currentOperator = dataItem;
    }
    filterChange(filter) {
        this.applyFilter(filter);
    }
    /**
     * The current filter for the associated column field.
     * @readonly
     * @type {FilterDescriptor}
     */
    get currentFilter() {
        return this._currentFilter;
    }
    /**
     * The current filter for the associated column field.
     * @readonly
     * @type {FilterDescriptor}
     */
    set currentFilter(value) {
        this._currentFilter = value;
    }
    updateFilter(filter) {
        Object.assign(this.currentFilter, filter);
        return this.filter;
    }
    onChange(value) {
        this.filterChange(this.updateFilter({
            field: this.column.field,
            operator: this.currentOperator,
            value: value
        }));
    }
    onShiftTab(e) {
        e.stopImmediatePropagation();
        if ((!this.menuTabbingService || !this.menuTabbingService.isColumnMenu) && this.isFirstDropDown && this.filterService.menuTabbingService.lastFocusable) {
            e.preventDefault();
            this.filterService.menuTabbingService.lastFocusable.focus();
        }
    }
    get filterMenuDropDownLabel() {
        const localizationMsg = this.localizationService.get('filterMenuOperatorsDropDownLabel') || '';
        const columnName = this.column ? this.column.title || this.column.field : '';
        return replaceMessagePlaceholder(localizationMsg, 'columnName', columnName);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", FilterService)
], FilterMenuInputWrapperComponent.prototype, "filterService", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], FilterMenuInputWrapperComponent.prototype, "isFirstDropDown", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", MenuTabbingService)
], FilterMenuInputWrapperComponent.prototype, "menuTabbingService", void 0);
tslib_1.__decorate([
    ViewChild(DropDownListComponent, { static: false }),
    tslib_1.__metadata("design:type", DropDownListComponent)
], FilterMenuInputWrapperComponent.prototype, "firstOperatorDropDown", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], FilterMenuInputWrapperComponent.prototype, "currentFilter", null);
FilterMenuInputWrapperComponent = tslib_1.__decorate([
    Component({
        selector: 'kendo-grid-filter-menu-input-wrapper',
        template: `
        <kendo-dropdownlist
            kendoFilterMenuDropDown
            [filterMenuDropDownLabel]="filterMenuDropDownLabel"
            [data]="operators"
            (valueChange)="operatorChange($event)"
            [value]="currentOperator"
            [valuePrimitive]="true"
            textField="text"
            valueField="value"
            (keydown.shift.tab)="onShiftTab($event)">
        </kendo-dropdownlist>
        <ng-content></ng-content>
    `
    }),
    tslib_1.__metadata("design:paramtypes", [LocalizationService])
], FilterMenuInputWrapperComponent);
export { FilterMenuInputWrapperComponent };
