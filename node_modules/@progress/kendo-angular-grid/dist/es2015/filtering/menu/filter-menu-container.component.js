/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { MenuTabbingService } from './menu-tabbing.service';
import { Component, Input, SkipSelf, Output, EventEmitter, ChangeDetectorRef, ElementRef, ViewChild } from '@angular/core';
import { ColumnComponent } from "../../columns/column.component";
import { FilterService } from "../filter.service";
import { removeFilter, filtersByField } from "../base-filter-cell.component";
import { isPresent, isNullOrEmptyString } from "../../utils";
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { cloneFilters } from '../../common/filter-descriptor-differ';
const isNoValueOperator = operator => (operator === "isnull"
    || operator === "isnotnull"
    || operator === "isempty"
    || operator === "isnotempty");
const ɵ0 = isNoValueOperator;
const validFilters = ({ value, operator }) => !isNullOrEmptyString(value) || isNoValueOperator(operator);
const ɵ1 = validFilters;
const trimFilters = filter => {
    filter.filters = filter.filters.filter(validFilters);
    return filter;
};
const ɵ2 = trimFilters;
const findParent = (filters, field, parent) => {
    return filters.reduce((acc, filter) => {
        if (acc) {
            return acc;
        }
        if (filter.filters) {
            return findParent(filter.filters, field, filter);
        }
        else if (filter.field === field) {
            return parent;
        }
        return acc;
    }, undefined); // tslint:disable-line:align
};
const ɵ3 = findParent;
const parentLogicOfDefault = (filter, field, def = "and") => {
    const parent = findParent(((filter || {}).filters || []), field);
    return isPresent(parent) ? parent.logic : def;
};
const ɵ4 = parentLogicOfDefault;
/**
 * @hidden
 */
let FilterMenuContainerComponent = class FilterMenuContainerComponent {
    constructor(parentService, childService, localization, cd, menuTabbingService) {
        this.parentService = parentService;
        this.childService = childService;
        this.localization = localization;
        this.cd = cd;
        this.close = new EventEmitter();
        /**
         * @hidden
         */
        this.actionsClass = 'k-action-buttons k-button-group';
        this._templateContext = {};
        this.menuTabbingService = menuTabbingService;
    }
    get filter() {
        return this._filter;
    }
    /**
     * The current root filter.
     * @type {CompositeFilterDescriptor}
     */
    set filter(value) {
        this._filter = cloneFilters(value);
    }
    get childFilter() {
        if (!isPresent(this._childFilter)) {
            this._childFilter = {
                filters: filtersByField(this.filter, (this.column || {}).field),
                logic: parentLogicOfDefault(this.filter, (this.column || {}).field)
            };
        }
        return this._childFilter;
    }
    ngOnInit() {
        this.subscription = this.childService.changes.subscribe(filter => this._childFilter = filter);
        this.subscription.add(this.localization.changes.subscribe(() => this.cd.markForCheck()));
    }
    ngAfterViewChecked() {
        if (!this.menuTabbingService.isColumnMenu || (this.isLast && this.isExpanded)) {
            this.menuTabbingService.lastFocusable = this.disabled ?
                this.resetButton.nativeElement : this.filterButton.nativeElement;
        }
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        this.menuTabbingService.lastFocusable = undefined;
    }
    get disabled() {
        return !this.childFilter.filters.some(validFilters);
    }
    get templateContext() {
        this._templateContext.column = this.column;
        this._templateContext.filter = this.childFilter;
        this._templateContext.filterService = this.childService;
        // tslint:disable-next-line:no-string-literal
        this._templateContext["$implicit"] = this.childFilter;
        return this._templateContext;
    }
    get hasTemplate() {
        return isPresent(this.column) && isPresent(this.column.filterMenuTemplateRef);
    }
    submit() {
        const filter = trimFilters(this.childFilter);
        if (filter.filters.length) {
            const root = this.filter || {
                filters: [],
                logic: "and"
            };
            removeFilter(root, this.column.field);
            root.filters.push(filter);
            this.parentService.filter(root);
        }
        this.close.emit();
        return false;
    }
    reset() {
        const root = this.filter || {
            filters: [],
            logic: "and"
        };
        removeFilter(root, this.column.field);
        this.parentService.filter(root);
        this.close.emit();
    }
    onTab(e, buttonType) {
        if (this.menuTabbingService.firstFocusable && (!this.menuTabbingService.isColumnMenu || this.isLast)) {
            e.preventDefault();
            if (buttonType === 'reset') {
                this.disabled ? this.menuTabbingService.firstFocusable.focus() : this.filterButton.nativeElement.focus();
            }
            else {
                this.menuTabbingService.firstFocusable.focus();
            }
        }
    }
    get clearText() {
        return this.localization.get("filterClearButton");
    }
    get filterText() {
        return this.localization.get("filterFilterButton");
    }
};
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], FilterMenuContainerComponent.prototype, "close", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", ColumnComponent)
], FilterMenuContainerComponent.prototype, "column", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], FilterMenuContainerComponent.prototype, "isLast", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], FilterMenuContainerComponent.prototype, "isExpanded", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", MenuTabbingService)
], FilterMenuContainerComponent.prototype, "menuTabbingService", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], FilterMenuContainerComponent.prototype, "filter", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FilterMenuContainerComponent.prototype, "actionsClass", void 0);
tslib_1.__decorate([
    ViewChild('resetButton', { static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], FilterMenuContainerComponent.prototype, "resetButton", void 0);
tslib_1.__decorate([
    ViewChild('filterButton', { static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], FilterMenuContainerComponent.prototype, "filterButton", void 0);
FilterMenuContainerComponent = tslib_1.__decorate([
    Component({
        providers: [
            FilterService,
            MenuTabbingService
        ],
        selector: 'kendo-grid-filter-menu-container',
        template: `
        <form (submit)="submit()" (reset)="reset()"
            class="k-filter-menu k-group k-reset k-state-border-up">
            <div class="k-filter-menu-container">
                <ng-container [ngSwitch]="hasTemplate">
                    <ng-container *ngSwitchCase="false">
                        <ng-container
                            kendoFilterMenuHost
                            [filterService]="childService"
                            [column]="column"
                            [filter]="childFilter"
                            [menuTabbingService]="menuTabbingService">
                        </ng-container>
                    </ng-container>
                    <ng-container *ngSwitchCase="true">
                        <ng-template
                            *ngIf="column.filterMenuTemplateRef"
                            [ngTemplateOutlet]="column.filterMenuTemplateRef"
                            [ngTemplateOutletContext]="templateContext"
                            >
                        </ng-template>
                    </ng-container>
                </ng-container>
                <div [ngClass]="actionsClass">
                    <button
                        #resetButton
                        type="reset"
                        class="k-button"
                        (keydown.tab)="onTab($event, 'reset')">{{clearText}}</button>
                    <button #filterButton
                        type="submit"
                        class="k-button k-primary"
                        [disabled]="disabled"
                        (keydown.tab)="onTab($event, 'filter')">{{filterText}}</button>
                </div>
            </div>
        </form>
    `
    }),
    tslib_1.__param(0, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [FilterService,
        FilterService,
        LocalizationService,
        ChangeDetectorRef,
        MenuTabbingService])
], FilterMenuContainerComponent);
export { FilterMenuContainerComponent };
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };
