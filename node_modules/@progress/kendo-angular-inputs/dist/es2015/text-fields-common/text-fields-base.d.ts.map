{"version":3,"file":"text-fields-base.d.ts","sources":["text-fields-base.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { Subscription } from 'rxjs';\nimport { NgControl } from '@angular/forms';\nimport { ElementRef, EventEmitter, NgZone, Renderer2, ChangeDetectorRef, Injector } from '@angular/core';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\n/**\n * @hidden\n */\nexport declare abstract class TextFieldsBase {\n    protected localizationService: LocalizationService;\n    protected ngZone: NgZone;\n    protected changeDetector: ChangeDetectorRef;\n    protected renderer: Renderer2;\n    protected injector: Injector;\n    protected hostElement: ElementRef;\n    /**\n     * Sets the `title` attribute of the internal textarea input element of the component.\n     */\n    title: string;\n    /**\n     * Sets the disabled state of the TextArea component.\n     *\n     * @default false\n     */\n    disabled: boolean;\n    /**\n     * Sets the read-only state of the TextArea component.\n     *\n     * @default false\n     */\n    readonly: boolean;\n    /**\n     * Provides a value for the TextArea component.\n     */\n    value: string;\n    /**\n     * Determines whether the whole value will be selected when the TextArea is clicked. Defaults to `false`.\n     *\n     * @default false\n     */\n    selectOnFocus: boolean;\n    /**\n     * The hint, which is displayed when the Textarea is empty.\n     */\n    placeholder: string;\n    /**\n     * Fires each time the user focuses the internal textarea element of the component.\n     * This event is useful when you need to distinguish between focusing the textarea element and focusing one of its adornments.\n     */\n    inputFocus: EventEmitter<any>;\n    /**\n     * Fires each time the internal textarea element gets blurred.\n     * This event is useful when adornments are used, in order to distinguish between blurring the textarea element and blurring the whole TextArea component.\n     */\n    inputBlur: EventEmitter<any>;\n    /**\n     * Represents the visible textarea element of the component.\n     */\n    input: ElementRef;\n    readonly disabledClass: boolean;\n    direction: string;\n    /**\n     * @hidden\n     */\n    protected control: NgControl;\n    protected subscriptions: Subscription;\n    protected _isFocused: boolean;\n    protected focusChangedProgrammatically: boolean;\n    constructor(localizationService: LocalizationService, ngZone: NgZone, changeDetector: ChangeDetectorRef, renderer: Renderer2, injector: Injector, hostElement: ElementRef);\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    handleInputBlur: () => void;\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled: boolean): void;\n    ngChange: Function;\n    ngTouched: Function;\n}\n"]}