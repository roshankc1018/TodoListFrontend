{"version":3,"file":"textarea.component.d.ts","sources":["textarea.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ElementRef, EventEmitter, NgZone, Renderer2, ChangeDetectorRef, Injector, AfterViewChecked } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { TextFieldsBase } from '../text-fields-common/text-fields-base';\nimport { TextAreaFlow } from './models/flow';\nimport { TextAreaResize } from './models/resize';\n/**\n * Represents the [Kendo UI TextArea component for Angular]({% slug overview_textarea %}).\n */\nexport declare class TextAreaComponent extends TextFieldsBase implements ControlValueAccessor, AfterViewChecked {\n    protected localizationService: LocalizationService;\n    protected ngZone: NgZone;\n    protected changeDetector: ChangeDetectorRef;\n    protected renderer: Renderer2;\n    protected injector: Injector;\n    protected hostElement: ElementRef;\n    /**\n     * @hidden\n     */\n    focusableId: string;\n    hostClass: boolean;\n    readonly flowCol: boolean;\n    readonly flowRow: boolean;\n    /**\n     * Specifies the flow direction of the TextArea sections. This property is useful when adornments are used, in order to specify\n     * their position in relation to the textarea element.\n     *\n     * The possible values are:\n     * * `vertical`(Default) &mdash;TextArea sections are placed from top to bottom.\n     * * `horizontal`&mdash;TextArea sections are placed from left to right in `ltr`, and from right to left in `rtl` mode.\n     */\n    flow: TextAreaFlow;\n    /**\n     *  Specifies the visible height of the textarea element in lines.\n     */\n    rows: number;\n    /**\n     * Specifies the visible width of the textarea element (in average character width).\n     */\n    cols: number;\n    /**\n     * Specifies the maximum number of characters that the user can enter in the TextArea component.\n     */\n    maxlength: number;\n    /**\n     * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n    tabindex: number;\n    /**\n     * @hidden\n     */\n    tabIndex: number;\n    /**\n     * Configures the resize behavior of the TextArea.\n     *\n     * The possible values are:\n     * * `vertical`(Default)&mdash;The TextArea component can be resized only vertically.\n     * * `horizontal`&mdash;The TextArea component can be resized only horizontally.\n     * * `both`&mdash;The TextArea component can be resized in both (horizontal and vertical) directions.\n     * * `auto`&mdash;Specifies whether the TextArea component will adjust its height automatically, based on the content.\n     * * `none`&mdash;The TextArea cannot be resized.\n     *\n     */\n    resizable: TextAreaResize;\n    /**\n     * Fires each time the user focuses the TextArea component.\n     *\n     * > To wire the event programmatically, use the `onFocus` property.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-textarea (focus)=\"handleFocus()\"></kendo-textarea>\n     * `\n     * })\n     * class AppComponent {\n     *   public handleFocus(): void {\n     *      console.log('Component is focused');\n     *   }\n     * }\n     * ```\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the TextArea component gets blurred.\n     *\n     * > To wire the event programmatically, use the `onBlur` property.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-textarea (blur)=\"handleBlur()\"></kendo-textarea>\n     * `\n     * })\n     * class AppComponent {\n     *   public handleBlur(): void {\n     *      console.log('Component is blurred');\n     *   }\n     * }\n     * ```\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * Fires each time the value is changed or the component is blurred\n     * ([see example]({% slug overview_textarea %}#toc-events)).\n     * When the component value is changed programmatically or via its form control binding, the valueChange event is not emitted.\n     */\n    valueChange: EventEmitter<any>;\n    private initialHeight;\n    private resizeSubscription;\n    constructor(localizationService: LocalizationService, ngZone: NgZone, changeDetector: ChangeDetectorRef, renderer: Renderer2, injector: Injector, hostElement: ElementRef);\n    ngAfterViewInit(): void;\n    ngOnInit(): void;\n    ngOnChanges(changes: any): void;\n    ngAfterViewChecked(): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: string): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: () => any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: () => any): void;\n    updateValue(value: string): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    readonly resizableClass: string;\n    /**\n     * @hidden\n     */\n    handleInput: (ev: any) => void;\n    /**\n     * @hidden\n     */\n    handleInputFocus: () => void;\n    /**\n     * Focuses the TextArea component.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"textarea.focus()\">Focus the textarea</button>\n     *  <kendo-textarea #textarea></kendo-textarea>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    focus(): void;\n    /**\n     * Blurs the TextArea component.\n     */\n    blur(): void;\n    private resize;\n    private isFocused;\n    private handleBlur;\n    private setSelection;\n    private selectAll;\n}\n"]}