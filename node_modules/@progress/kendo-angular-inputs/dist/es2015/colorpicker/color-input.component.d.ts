/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnChanges, SimpleChanges, EventEmitter, ElementRef } from '@angular/core';
import { RGBA } from './models';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class ColorInputComponent implements OnChanges {
    private localization;
    private host;
    /**
     * The color value that will be parsed and populate the hex & rgba inputs.
     * Required input property.
     */
    value: string;
    /**
     * Sets whether the alpha slider will be shown.
     */
    opacity: boolean;
    /**
     * Sets the disabled state of the ColorInput.
     */
    disabled: boolean;
    /**
     * Sets the read-only state of the ColorInput.
     */
    readonly: boolean;
    /**
     * Emits a parsed rgba string color.
     */
    valueChange: EventEmitter<string>;
    colorInputClass: boolean;
    opacityInput: ElementRef;
    /**
     * The rgba inputs values.
     */
    rgba: RGBA;
    hex: string;
    /**
     * Indicates whether any of the inputs are focused.
     */
    private readonly isFocused;
    /**
     * Indicates whether any of the rgba inputs have value.
     */
    private readonly rgbaInputValid;
    constructor(localization: LocalizationService, host: ElementRef);
    ngOnChanges(changes: SimpleChanges): void;
    handleRgbaValueChange(): void;
    handleHexValueChange(hex: string): void;
    handleRgbaInputBlur(): void;
    handleHexInputBlur(): void;
    /**
     * @hidden
     */
    textFor(key: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ColorInputComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<ColorInputComponent, "kendo-colorinput", never, { "opacity": "opacity"; "disabled": "disabled"; "readonly": "readonly"; "value": "value"; }, { "valueChange": "valueChange"; }, never, never>;
}

//# sourceMappingURL=color-input.component.d.ts.map