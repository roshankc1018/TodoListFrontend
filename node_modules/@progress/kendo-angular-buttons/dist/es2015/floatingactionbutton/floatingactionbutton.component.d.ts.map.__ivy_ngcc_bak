{"version":3,"file":"floatingactionbutton.component.d.ts","sources":["floatingactionbutton.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { AnimationBuilder } from '@angular/animations';\nimport { AfterViewInit, ElementRef, EventEmitter, NgZone, Renderer2, OnDestroy, TemplateRef } from '@angular/core';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { PopupService } from '@progress/kendo-angular-popup';\nimport { FocusService } from '../focusable/focus.service';\nimport { KeyEvents } from '../navigation/key-events';\nimport { NavigationService } from '../navigation/navigation.service';\nimport { FabAlign } from './models/align';\nimport { FabOffset } from './models/offset';\nimport { DialItemAnimation } from './models/item-animation.interface';\nimport { FabPositionMode } from './models/position-mode';\nimport { DialItemClickEvent } from './models/item-click.event';\nimport { ButtonSize } from '../common/models/size';\nimport { ButtonThemeColor } from '../common/models/theme-color';\nimport { ButtonShape } from '../common/models/shape';\nimport { PreventableEvent } from '../preventable-event';\nimport { DialItemTemplateDirective } from './templates/dial-item-template.directive';\nimport { FloatingActionButtonTemplateDirective } from './templates/fab-template.directive';\n/**\n *\n * Represents the [Kendo UI FloatingActionButton component for Angular]({% slug overview_floatingactionbutton %}).\n * Used to specify the primary or the most common action in an application.\n *\n */\nexport declare class FloatingActionButtonComponent implements AfterViewInit, OnDestroy {\n    renderer: Renderer2;\n    private element;\n    private focusService;\n    private navigationService;\n    private ngZone;\n    private popupService;\n    private builder;\n    private localizationService;\n    readonly fixedClass: boolean;\n    readonly absoluteClass: boolean;\n    direction: string;\n    button: ElementRef<HTMLButtonElement>;\n    popupTemplate: TemplateRef<any>;\n    dialItemTemplate: DialItemTemplateDirective;\n    fabTemplate: FloatingActionButtonTemplateDirective;\n    /**\n     * Specifies the theme color of the FloatingActionButton\n     * ([see example]({% slug appearance_floatingactionbutton %}#toc-themeColor)).\n     * The theme color will be applied as background color of the component.\n     *\n     * The possible values are:\n     * * `primary` (Default)&mdash;Applies coloring based on the `primary` theme color.\n     * * `secondary`&mdash;Applies coloring based on the `secondary` theme color.\n     * * `tertiary`&mdash; Applies coloring based on the `tertiary` theme color.\n     * * `inherit`&mdash; Applies inherited coloring value.\n     * * `info`&mdash;Applies coloring based on the `info` theme color.\n     * * `success`&mdash; Applies coloring based on the `success` theme color.\n     * * `warning`&mdash; Applies coloring based on the `warning` theme color.\n     * * `error`&mdash; Applies coloring based on the `error` theme color.\n     * * `dark`&mdash; Applies coloring based on the `dark` theme color.\n     * * `light`&mdash; Applies coloring based on the `light` theme color.\n     * * `inverse`&mdash; Applies coloring based on the `inverse` theme color.\n     *\n     */\n    themeColor: ButtonThemeColor;\n    /**\n     * Specifies the size of the FloatingActionButton\n     * ([see example]({% slug appearance_floatingactionbutton %}#toc-size)).\n     *\n     * The possible values are:\n     * * `small`\n     * * `medium` (Default)\n     * * `large`\n     *\n     */\n    size: ButtonSize;\n    /**\n     * Specifies the shape of the FloatingActionButton\n     * ([see example]({% slug appearance_floatingactionbutton %}#toc-shape)).\n     *\n     * The possible values are:\n     * * `pill` (Default)&mdash;Applies border radius equal to half of the height of the FloatingActionButton.\n     * * `circle`&mdash;Applies circle shape on the FloatingActionButton.\n     * * `rectangle`&mdash;Applies rectangular shape on the FloatingActionButton.\n     * * `rounded`&mdash;Applies rounded shape on the FloatingActionButton.\n     * * `square`&mdash;Applies square shape on the FloatingActionButton.\n     *\n     */\n    shape: ButtonShape;\n    /**\n     * Specifies whether the FloatingActionButton is disabled.\n     */\n    disabled: boolean;\n    /**\n     * Specifies the horizontal and vertical alignment of the FloatingActionButton\n     * ([see example]({% slug positioning_floatingactionbutton %}#toc-align)).\n     *\n     * The possible values are:\n     * * `{ horizontal: 'start'|'center'|'end', vertical: 'top'|'middle'|'bottom' }`\n     *\n     * The default value is:\n     * * `{ horizontal: 'end', vertical: 'bottom' }`\n     *\n     */\n    align: FabAlign;\n    /**\n     * Specifies the horizontal and vertical offset position of the FloatingActionButton\n     * ([see example]({% slug positioning_floatingactionbutton %}#toc-offset)).\n     *\n     * * The default value is:\n     * * `{ x: '16px', y: '16px' }`\n     */\n    offset: FabOffset;\n    /**\n     * Specifies the positionMode of the FloatingActionButton\n     * ([see example]({% slug positioning_floatingactionbutton %}#toc-positionMode)).\n     *\n     * * The possible values are:\n     * * `absolute`&mdash;Positions the FloatingActionButton absolutely to its first positioned parent element.\n     * * `fixed` (Default)&mdash;Positions the FloatingActionButton relative to the viewport. It always stays in the same place even if the page is scrolled.\n     */\n    positionMode: FabPositionMode;\n    /**\n     * Defines the name of an existing icon in a Kendo UI theme.\n     * If provided, the icon will be rendered inside the FloatingActionButton by a `span.k-icon` element.\n     */\n    icon: string;\n    /**\n     * Defines a CSS class or multiple classes separated by spaces which are applied to a `span` element.\n     * Allows the usage of custom icons, rendered inside the FloatingActionButton by a `span` element.\n     */\n    iconClass: string;\n    /**\n     * The CSS classes that will be rendered on the main button.\n     * Supports the type of values that are supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).\n     */\n    buttonClass: any;\n    /**\n     * The CSS classes that will be rendered on the dial items `ul` element.\n     * Supports the type of values that are supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).\n     */\n    dialClass: any;\n    /**\n     * Specifies the text content of the FloatingActionButton.\n     */\n    text: string;\n    /**\n     * Specifies the animation settings of the FloatingActionButton dial items.\n     * ([see example]({% slug dialitems_floatingactionbutton %}#toc-animation)).\n     *\n     * The possible values are:\n     * * Boolean\n     *    * (Default) `true`&mdash;Applies the default [`DialItemAnimation`]({% slug api_buttons_dialitemanimation %}) settings.\n     *    * `false`\n     * * `DialItemAnimation`\n     *    * `duration`&mdash;Specifies the animation duration in milliseconds for each dial item. Defaults to `180ms`.\n     *    * `gap`&mdash;Specifies the animation duration gap in milliseconds after each dial item is animated. Defaults to `90ms`.\n     */\n    dialItemAnimation: boolean | DialItemAnimation;\n    /**\n     * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the FloatingActionButton.\n     */\n    tabIndex: number;\n    /**\n     * Specifies the collection of the dial items that will be rendered in the FloatingActionButton popup.\n     */\n    dialItems: any[];\n    /**\n     * Fires each time the FloatingActionButton gets blurred.\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * Fires each time the FloatingActionButton gets focused.\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time a dial item is clicked.\n     */\n    dialItemClick: EventEmitter<DialItemClickEvent>;\n    /**\n     * Fires each time the popup is about to open.\n     * This event is preventable. If you cancel the event, the popup will remain closed\n     * ([more information and example]({% slug overview_floatingactionbutton %}#toc-events)).\n     */\n    open: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the popup is about to close.\n     * This event is preventable. If you cancel the event, the popup will remain open\n     * ([more information and example]({% slug overview_floatingactionbutton %}#toc-events)).\n     */\n    close: EventEmitter<PreventableEvent>;\n    /**\n     * @hidden\n     */\n    readonly componentTabIndex: number;\n    /**\n     * @hidden\n     */\n    id: string;\n    private _themeColor;\n    private _size;\n    private _shape;\n    private _disabled;\n    private _align;\n    private _offset;\n    private subscriptions;\n    private popupMouseDownListener;\n    private rtl;\n    private animationEnd;\n    private popupRef;\n    constructor(renderer: Renderer2, element: ElementRef, focusService: FocusService, navigationService: NavigationService, ngZone: NgZone, popupService: PopupService, builder: AnimationBuilder, localizationService: LocalizationService);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Indicates whether the FloatingActionButton is currently open.\n     */\n    readonly isOpen: boolean;\n    /**\n     * Focuses the FloatingActionButton.\n     */\n    focus(): void;\n    /**\n     * Blurs the FloatingActionButton.\n     */\n    blur(): void;\n    /**\n     * Toggles the visibility of the FloatingActionButton dial items popup.\n     *\n     * If you use the `toggleDial` method to open or close the dial items,\n     * the `open` and `close` events do not fire ([more information and examples]({% slug openstate_floatingactionbutton %}#toc-events)).\n     *\n     * @param open - The state of dial items popup.\n     */\n    toggleDial(open?: boolean): void;\n    /**\n     * @hidden\n     */\n    readonly role: string;\n    /**\n     * @hidden\n     */\n    readonly ariaExpanded: boolean;\n    /**\n     * @hidden\n     */\n    readonly ariaHasPopup: boolean;\n    /**\n     * @hidden\n     */\n    readonly iconClasses: string[];\n    /**\n     * @hidden\n     */\n    clickHandler(): void;\n    /**\n     * @hidden\n     */\n    keyDownHandler(event: any): void;\n    /**\n     * @hidden\n     */\n    keyHandler(event: KeyboardEvent, keyEvent?: KeyEvents): void;\n    /**\n     * @hidden\n     */\n    onItemClick(event: MouseEvent): void;\n    /**\n     * @hidden\n     */\n    focusHandler(): void;\n    /**\n     * @hidden\n     */\n    blurHandler(): void;\n    private handleClasses;\n    private onEnterPressed;\n    private emitItemClick;\n    private subscribeNavigationEvents;\n    private onArrowKeyNavigate;\n    private onNavigationEnterPress;\n    private onNavigationClose;\n    private alignClass;\n    private applyClasses;\n    private toggleDialWithEvents;\n    private openPopup;\n    private closePopup;\n    private openDial;\n    private closeDial;\n    private isValidAnimation;\n    private positionPopup;\n    private offsetStyles;\n    private readonly hasDialItems;\n    /**\n     * Gets the CSS prop name of the selected vertical position (`top`/`bottom`);\n     */\n    private readonly verticalPosition;\n    /**\n     * Gets the offset according to the selected vertical position.\n     */\n    private readonly verticalOffset;\n    /**\n     * Gets the CSS prop name of the selected horizontal position (`left`/`right`);\n     */\n    private readonly horizontalPosition;\n    /**\n     * Gets the offset according to the selected horizontal position.\n     */\n    private readonly horizontalOffset;\n    private playerFor;\n    private playAnimation;\n    private durationSettings;\n    private animationGap;\n    private animationDuration;\n}\n"]}