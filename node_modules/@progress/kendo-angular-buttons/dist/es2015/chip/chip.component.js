/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, HostBinding, Input, Output, EventEmitter, ElementRef, Renderer2, NgZone } from '@angular/core';
import { isDocumentAvailable } from '@progress/kendo-angular-common';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from '../package-metadata';
import { closest } from '../util';
/**
 * Displays a Chip that represents an input, attribute or an action.
 */
let ChipComponent = class ChipComponent {
    constructor(element, renderer, ngZone, localizationService) {
        this.element = element;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.localizationService = localizationService;
        /**
         * Changes the visual appearance by using alternative styling options.
         *
         * The available values are:
         * * `filled`
         * * `outlined`
         */
        this.look = 'filled';
        /**
         * Specifies the selected state of the Chip.
         */
        this.selected = false;
        /**
         * Specifies if the Chip will be removable or not.
         * If the property is set to `true`, the Chip renders a remove icon.
         */
        this.removable = false;
        /**
         * Specifies the Chip type.
         *
         * The possible values are:
         * - `none` (default)
         * - `success`
         * - `error`
         * - `warning`
         * - `info`
         */
        this.type = 'none';
        /**
         * If set to `true`, the Chip will be disabled.
         */
        this.disabled = false;
        /**
         * Fires each time the user clicks the remove icon of the Chip.
         */
        this.remove = new EventEmitter();
        /**
         * Fires each time the user clicks the content of the Chip.
         */
        this.contentClick = new EventEmitter();
        this.tabIndex = 0;
        this.hostClass = true;
        this.focused = false;
        validatePackage(packageMetadata);
        this.direction = localizationService.rtl ? 'rtl' : 'ltr';
    }
    get outlineClass() {
        return this.look === 'outlined';
    }
    get filledClass() {
        return this.look === 'filled';
    }
    get hasIconClass() {
        return this.icon || this.iconClass ? true : false;
    }
    get disabledClass() {
        return this.disabled;
    }
    get selectedClass() {
        return this.selected;
    }
    get focusedClass() {
        return this.focused;
    }
    ngOnInit() {
        this.dynamicRTLSubscription = this.localizationService.changes
            .subscribe(({ rtl }) => this.direction = rtl ? 'rtl' : 'ltr');
    }
    ngOnDestroy() {
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
        if (this.detachDomEvents) {
            this.detachDomEvents();
        }
    }
    ngAfterViewInit() {
        const chip = this.element.nativeElement;
        const typeClass = this.typeClass();
        if (this.type !== 'none') {
            this.renderer.addClass(chip, typeClass);
        }
        this.attachElementEventHandlers(chip);
    }
    /**
     * @hidden
     */
    get iconClasses() {
        const classes = [];
        if (this.iconClass) {
            classes.push(`${this.iconClass}`);
        }
        if (this.icon) {
            classes.push(`k-icon k-i-${this.icon}`);
        }
        return classes;
    }
    /**
     * @hidden
     */
    get selectedIconClasses() {
        if (this.selectedIcon) {
            return `${this.selectedIcon}`;
        }
        return `k-icon k-i-check`;
    }
    /**
     * @hidden
     */
    get removeIconClasses() {
        if (this.removeIcon) {
            return `${this.removeIcon}`;
        }
        return `k-icon k-i-close-circle`;
    }
    /**
     * @hidden
     */
    typeClass() {
        return {
            'none': '',
            'success': 'k-chip-success',
            'warning': 'k-chip-warning',
            'error': 'k-chip-error',
            'info': 'k-chip-info'
        }[this.type];
    }
    /**
     * Focuses the Chip component.
     */
    focus() {
        if (isDocumentAvailable()) {
            this.element.nativeElement.focus();
        }
    }
    /**
     * Blurs the Chip component.
     */
    blur() {
        if (isDocumentAvailable()) {
            this.element.nativeElement.blur();
        }
    }
    /**
     * @hidden
     */
    onRemoveClick(e) {
        if (this.removable) {
            this.remove.emit({ sender: this, originalEvent: e });
        }
    }
    attachElementEventHandlers(chip) {
        this.ngZone.runOutsideAngular(() => {
            const focusListener = this.renderer.listen(chip, 'focus', () => {
                this.renderer.addClass(chip, 'k-chip-focused');
            });
            const blurListener = this.renderer.listen(chip, 'blur', () => {
                this.renderer.removeClass(chip, 'k-chip-focused');
            });
            const contentClickListener = this.renderer.listen(chip, 'click', (e) => {
                const isRemoveClicked = closest(e.target, '.k-remove-icon');
                if (!isRemoveClicked) {
                    this.ngZone.run(() => {
                        this.contentClick.emit({ sender: this, originalEvent: e });
                    });
                }
            });
            this.detachDomEvents = () => {
                focusListener();
                blurListener();
                contentClickListener();
            };
        });
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ChipComponent.prototype, "look", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ChipComponent.prototype, "label", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ChipComponent.prototype, "icon", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ChipComponent.prototype, "iconClass", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ChipComponent.prototype, "selected", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ChipComponent.prototype, "selectedIcon", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ChipComponent.prototype, "removable", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ChipComponent.prototype, "removeIcon", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ChipComponent.prototype, "type", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ChipComponent.prototype, "disabled", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ChipComponent.prototype, "remove", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ChipComponent.prototype, "contentClick", void 0);
tslib_1.__decorate([
    HostBinding('attr.tabindex'),
    tslib_1.__metadata("design:type", Number)
], ChipComponent.prototype, "tabIndex", void 0);
tslib_1.__decorate([
    HostBinding('class.k-chip'),
    tslib_1.__metadata("design:type", Boolean)
], ChipComponent.prototype, "hostClass", void 0);
tslib_1.__decorate([
    HostBinding('class.k-chip-outline'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ChipComponent.prototype, "outlineClass", null);
tslib_1.__decorate([
    HostBinding('class.k-chip-filled'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ChipComponent.prototype, "filledClass", null);
tslib_1.__decorate([
    HostBinding('class.k-chip-has-icon'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ChipComponent.prototype, "hasIconClass", null);
tslib_1.__decorate([
    HostBinding('class.k-chip-disabled'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ChipComponent.prototype, "disabledClass", null);
tslib_1.__decorate([
    HostBinding('class.k-chip-selected'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ChipComponent.prototype, "selectedClass", null);
tslib_1.__decorate([
    HostBinding('class.k-chip-focused'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ChipComponent.prototype, "focusedClass", null);
tslib_1.__decorate([
    HostBinding('attr.dir'),
    tslib_1.__metadata("design:type", String)
], ChipComponent.prototype, "direction", void 0);
ChipComponent = tslib_1.__decorate([
    Component({
        selector: 'kendo-chip',
        template: `
        <span class="k-selected-icon-wrapper">
            <span *ngIf="selected"
                class="k-selected-icon"
                [ngClass]="selectedIconClasses"
            >
            </span>
        </span>

        <span *ngIf="icon || iconClass"
            class="k-chip-icon"
            [ngClass]="iconClasses"
        >
        </span>

        <span class="k-chip-content">
            <span class="k-chip-label" *ngIf="label">
                {{ label }}
            </span>
            <ng-content *ngIf="!label"></ng-content>
        </span>

        <span *ngIf="removable"
            class="k-remove-icon"
            (click)="onRemoveClick($event)"
        >
            <span [ngClass]="removeIconClasses"></span>
        </span>
    `,
        providers: [
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.chip'
            }
        ]
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        Renderer2,
        NgZone,
        LocalizationService])
], ChipComponent);
export { ChipComponent };
