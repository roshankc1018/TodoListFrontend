/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, HostBinding, Input, Output, EventEmitter, ElementRef, Renderer2, NgZone } from '@angular/core';
import { isDocumentAvailable } from '@progress/kendo-angular-common';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from '../package-metadata';
import { closest } from '../util';
/**
 * Displays a Chip that represents an input, attribute or an action.
 */
var ChipComponent = /** @class */ (function () {
    function ChipComponent(element, renderer, ngZone, localizationService) {
        this.element = element;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.localizationService = localizationService;
        /**
         * Changes the visual appearance by using alternative styling options.
         *
         * The available values are:
         * * `filled`
         * * `outlined`
         */
        this.look = 'filled';
        /**
         * Specifies the selected state of the Chip.
         */
        this.selected = false;
        /**
         * Specifies if the Chip will be removable or not.
         * If the property is set to `true`, the Chip renders a remove icon.
         */
        this.removable = false;
        /**
         * Specifies the Chip type.
         *
         * The possible values are:
         * - `none` (default)
         * - `success`
         * - `error`
         * - `warning`
         * - `info`
         */
        this.type = 'none';
        /**
         * If set to `true`, the Chip will be disabled.
         */
        this.disabled = false;
        /**
         * Fires each time the user clicks the remove icon of the Chip.
         */
        this.remove = new EventEmitter();
        /**
         * Fires each time the user clicks the content of the Chip.
         */
        this.contentClick = new EventEmitter();
        this.tabIndex = 0;
        this.hostClass = true;
        this.focused = false;
        validatePackage(packageMetadata);
        this.direction = localizationService.rtl ? 'rtl' : 'ltr';
    }
    Object.defineProperty(ChipComponent.prototype, "outlineClass", {
        get: function () {
            return this.look === 'outlined';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChipComponent.prototype, "filledClass", {
        get: function () {
            return this.look === 'filled';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChipComponent.prototype, "hasIconClass", {
        get: function () {
            return this.icon || this.iconClass ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChipComponent.prototype, "disabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChipComponent.prototype, "selectedClass", {
        get: function () {
            return this.selected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChipComponent.prototype, "focusedClass", {
        get: function () {
            return this.focused;
        },
        enumerable: true,
        configurable: true
    });
    ChipComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dynamicRTLSubscription = this.localizationService.changes
            .subscribe(function (_a) {
            var rtl = _a.rtl;
            return _this.direction = rtl ? 'rtl' : 'ltr';
        });
    };
    ChipComponent.prototype.ngOnDestroy = function () {
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
        if (this.detachDomEvents) {
            this.detachDomEvents();
        }
    };
    ChipComponent.prototype.ngAfterViewInit = function () {
        var chip = this.element.nativeElement;
        var typeClass = this.typeClass();
        if (this.type !== 'none') {
            this.renderer.addClass(chip, typeClass);
        }
        this.attachElementEventHandlers(chip);
    };
    Object.defineProperty(ChipComponent.prototype, "iconClasses", {
        /**
         * @hidden
         */
        get: function () {
            var classes = [];
            if (this.iconClass) {
                classes.push("" + this.iconClass);
            }
            if (this.icon) {
                classes.push("k-icon k-i-" + this.icon);
            }
            return classes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChipComponent.prototype, "selectedIconClasses", {
        /**
         * @hidden
         */
        get: function () {
            if (this.selectedIcon) {
                return "" + this.selectedIcon;
            }
            return "k-icon k-i-check";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChipComponent.prototype, "removeIconClasses", {
        /**
         * @hidden
         */
        get: function () {
            if (this.removeIcon) {
                return "" + this.removeIcon;
            }
            return "k-icon k-i-close-circle";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    ChipComponent.prototype.typeClass = function () {
        return {
            'none': '',
            'success': 'k-chip-success',
            'warning': 'k-chip-warning',
            'error': 'k-chip-error',
            'info': 'k-chip-info'
        }[this.type];
    };
    /**
     * Focuses the Chip component.
     */
    ChipComponent.prototype.focus = function () {
        if (isDocumentAvailable()) {
            this.element.nativeElement.focus();
        }
    };
    /**
     * Blurs the Chip component.
     */
    ChipComponent.prototype.blur = function () {
        if (isDocumentAvailable()) {
            this.element.nativeElement.blur();
        }
    };
    /**
     * @hidden
     */
    ChipComponent.prototype.onRemoveClick = function (e) {
        if (this.removable) {
            this.remove.emit({ sender: this, originalEvent: e });
        }
    };
    ChipComponent.prototype.attachElementEventHandlers = function (chip) {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            var focusListener = _this.renderer.listen(chip, 'focus', function () {
                _this.renderer.addClass(chip, 'k-chip-focused');
            });
            var blurListener = _this.renderer.listen(chip, 'blur', function () {
                _this.renderer.removeClass(chip, 'k-chip-focused');
            });
            var contentClickListener = _this.renderer.listen(chip, 'click', function (e) {
                var isRemoveClicked = closest(e.target, '.k-remove-icon');
                if (!isRemoveClicked) {
                    _this.ngZone.run(function () {
                        _this.contentClick.emit({ sender: _this, originalEvent: e });
                    });
                }
            });
            _this.detachDomEvents = function () {
                focusListener();
                blurListener();
                contentClickListener();
            };
        });
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], ChipComponent.prototype, "look", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], ChipComponent.prototype, "label", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], ChipComponent.prototype, "icon", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], ChipComponent.prototype, "iconClass", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], ChipComponent.prototype, "selected", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], ChipComponent.prototype, "selectedIcon", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], ChipComponent.prototype, "removable", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], ChipComponent.prototype, "removeIcon", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], ChipComponent.prototype, "type", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], ChipComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], ChipComponent.prototype, "remove", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], ChipComponent.prototype, "contentClick", void 0);
    tslib_1.__decorate([
        HostBinding('attr.tabindex'),
        tslib_1.__metadata("design:type", Number)
    ], ChipComponent.prototype, "tabIndex", void 0);
    tslib_1.__decorate([
        HostBinding('class.k-chip'),
        tslib_1.__metadata("design:type", Boolean)
    ], ChipComponent.prototype, "hostClass", void 0);
    tslib_1.__decorate([
        HostBinding('class.k-chip-outline'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], ChipComponent.prototype, "outlineClass", null);
    tslib_1.__decorate([
        HostBinding('class.k-chip-filled'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], ChipComponent.prototype, "filledClass", null);
    tslib_1.__decorate([
        HostBinding('class.k-chip-has-icon'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], ChipComponent.prototype, "hasIconClass", null);
    tslib_1.__decorate([
        HostBinding('class.k-chip-disabled'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], ChipComponent.prototype, "disabledClass", null);
    tslib_1.__decorate([
        HostBinding('class.k-chip-selected'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], ChipComponent.prototype, "selectedClass", null);
    tslib_1.__decorate([
        HostBinding('class.k-chip-focused'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], ChipComponent.prototype, "focusedClass", null);
    tslib_1.__decorate([
        HostBinding('attr.dir'),
        tslib_1.__metadata("design:type", String)
    ], ChipComponent.prototype, "direction", void 0);
    ChipComponent = tslib_1.__decorate([
        Component({
            selector: 'kendo-chip',
            template: "\n        <span class=\"k-selected-icon-wrapper\">\n            <span *ngIf=\"selected\"\n                class=\"k-selected-icon\"\n                [ngClass]=\"selectedIconClasses\"\n            >\n            </span>\n        </span>\n\n        <span *ngIf=\"icon || iconClass\"\n            class=\"k-chip-icon\"\n            [ngClass]=\"iconClasses\"\n        >\n        </span>\n\n        <span class=\"k-chip-content\">\n            <span class=\"k-chip-label\" *ngIf=\"label\">\n                {{ label }}\n            </span>\n            <ng-content *ngIf=\"!label\"></ng-content>\n        </span>\n\n        <span *ngIf=\"removable\"\n            class=\"k-remove-icon\"\n            (click)=\"onRemoveClick($event)\"\n        >\n            <span [ngClass]=\"removeIconClasses\"></span>\n        </span>\n    ",
            providers: [
                LocalizationService,
                {
                    provide: L10N_PREFIX,
                    useValue: 'kendo.chip'
                }
            ]
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef,
            Renderer2,
            NgZone,
            LocalizationService])
    ], ChipComponent);
    return ChipComponent;
}());
export { ChipComponent };
