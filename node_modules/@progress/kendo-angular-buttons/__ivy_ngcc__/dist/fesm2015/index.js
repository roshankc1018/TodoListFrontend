/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { __decorate, __metadata, __param } from 'tslib';
import { Injectable, EventEmitter, Input, Output, HostBinding, HostListener, Directive, Optional, ElementRef, Renderer2, NgZone, isDevMode, ContentChildren, QueryList, Component, NgModule, TemplateRef, ViewContainerRef, InjectionToken, Inject, ContentChild, ViewChild, ChangeDetectorRef } from '@angular/core';
import { BehaviorSubject, Subject, fromEvent, merge, Subscription } from 'rxjs';
import { Keys, isChanged, isDocumentAvailable, hasObservers, guid, EventsModule } from '@progress/kendo-angular-common';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { filter, take } from 'rxjs/operators';
import { validatePackage } from '@progress/kendo-licensing';
import { CommonModule } from '@angular/common';
import { PopupService, PopupModule } from '@progress/kendo-angular-popup';
import { sequence, query, style, stagger, animate, AnimationBuilder } from '@angular/animations';

/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@progress/kendo-angular-l10n';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@progress/kendo-angular-popup';
import * as ɵngcc4 from '@angular/animations';
import * as ɵngcc5 from '@progress/kendo-angular-common';

const _c0 = [[["", "kendoButton", ""]]];
const _c1 = ["[kendoButton]"];
function ListComponent_li_1_1_ng_template_0_Template(rf, ctx) { }
const _c2 = function (a0, a1) { return { templateRef: a0, $implicit: a1 }; };
function ListComponent_li_1_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ListComponent_li_1_1_ng_template_0_Template, 0, 0, "ng-template", 5);
} if (rf & 2) {
    const dataItem_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction2(1, _c2, ctx_r3.itemTemplate == null ? null : ctx_r3.itemTemplate.templateRef, dataItem_r1));
} }
function ListComponent_li_1_ng_template_2_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 8);
} if (rf & 2) {
    const dataItem_r1 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r7.getIconClasses(dataItem_r1));
} }
function ListComponent_li_1_ng_template_2_img_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "img", 9);
} if (rf & 2) {
    const dataItem_r1 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("src", dataItem_r1.imageUrl, ɵngcc0.ɵɵsanitizeUrl);
} }
function ListComponent_li_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ListComponent_li_1_ng_template_2_span_0_Template, 1, 1, "span", 6);
    ɵngcc0.ɵɵtemplate(1, ListComponent_li_1_ng_template_2_img_1_Template, 1, 1, "img", 7);
    ɵngcc0.ɵɵtext(2);
} if (rf & 2) {
    const dataItem_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", dataItem_r1.icon || dataItem_r1.iconClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", dataItem_r1.imageUrl);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.getText(dataItem_r1), " ");
} }
const _c3 = function (a1) { return { "k-item": true, "k-state-disabled": a1 }; };
function ListComponent_li_1_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 2);
    ɵngcc0.ɵɵlistener("click", function ListComponent_li_1_Template_li_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r13); const index_r2 = restoredCtx.index; const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onClick(index_r2); })("blur", function ListComponent_li_1_Template_li_blur_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.onBlur(); });
    ɵngcc0.ɵɵtemplate(1, ListComponent_li_1_1_Template, 1, 4, undefined, 3);
    ɵngcc0.ɵɵtemplate(2, ListComponent_li_1_ng_template_2_Template, 3, 3, "ng-template", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const dataItem_r1 = ctx.$implicit;
    const index_r2 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("index", index_r2)("ngClass", ɵngcc0.ɵɵpureFunction1(5, _c3, dataItem_r1.disabled));
    ɵngcc0.ɵɵattribute("aria-disabled", dataItem_r1.disabled ? true : false);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.itemTemplate == null ? null : ctx_r0.itemTemplate.templateRef);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !(ctx_r0.itemTemplate == null ? null : ctx_r0.itemTemplate.templateRef));
} }
const _c4 = ["button"];
const _c5 = ["arrowButton"];
const _c6 = ["popupTemplate"];
const _c7 = ["container"];
function SplitButtonComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "kendo-button-list", 6);
    ɵngcc0.ɵɵlistener("onItemClick", function SplitButtonComponent_ng_template_6_Template_kendo_button_list_onItemClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onItemClick($event); })("keydown", function SplitButtonComponent_ng_template_6_Template_kendo_button_list_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.keyDownHandler($event); })("keypress", function SplitButtonComponent_ng_template_6_Template_kendo_button_list_keypress_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.keyPressHandler($event); })("keyup", function SplitButtonComponent_ng_template_6_Template_kendo_button_list_keyup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.keyUpHandler($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("id", ctx_r3.listId)("data", ctx_r3.data)("textField", ctx_r3.textField)("itemTemplate", ctx_r3.itemTemplate);
    ɵngcc0.ɵɵattribute("dir", ctx_r3.dir);
} }
const _c8 = ["*"];
const _c9 = ["buttonList"];
function DropDownButtonComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "kendo-button-list", 4, 5);
    ɵngcc0.ɵɵlistener("onItemClick", function DropDownButtonComponent_ng_template_3_Template_kendo_button_list_onItemClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onItemClick($event); })("keydown", function DropDownButtonComponent_ng_template_3_Template_kendo_button_list_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.keyDownHandler($event); })("keypress", function DropDownButtonComponent_ng_template_3_Template_kendo_button_list_keypress_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.keyPressHandler($event); })("keyup", function DropDownButtonComponent_ng_template_3_Template_kendo_button_list_keyup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.keyUpHandler($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("id", ctx_r2.listId)("data", ctx_r2.data)("textField", ctx_r2.textField)("itemTemplate", ctx_r2.itemTemplate);
    ɵngcc0.ɵɵattribute("dir", ctx_r2.dir);
} }
function ChipComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 7);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r0.selectedIconClasses);
} }
function ChipComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 8);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r1.iconClasses);
} }
function ChipComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.label, " ");
} }
function ChipComponent_ng_content_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 0, ["*ngIf", "!label"]);
} }
function ChipComponent_span_6_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 10);
    ɵngcc0.ɵɵlistener("click", function ChipComponent_span_6_Template_span_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onRemoveClick($event); });
    ɵngcc0.ɵɵelement(1, "span", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r4.removeIconClasses);
} }
function FloatingActionButtonComponent_2_ng_template_0_Template(rf, ctx) { }
function FloatingActionButtonComponent_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, FloatingActionButtonComponent_2_ng_template_0_Template, 0, 0, "ng-template", 4);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1.fabTemplate == null ? null : ctx_r1.fabTemplate.templateRef);
} }
function FloatingActionButtonComponent_ng_container_3_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 7);
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r6.iconClasses);
} }
function FloatingActionButtonComponent_ng_container_3_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r7.text);
} }
function FloatingActionButtonComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FloatingActionButtonComponent_ng_container_3_span_1_Template, 1, 1, "span", 5);
    ɵngcc0.ɵɵtemplate(2, FloatingActionButtonComponent_ng_container_3_span_2_Template, 2, 1, "span", 6);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.icon || ctx_r2.iconClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.text);
} }
function FloatingActionButtonComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "ul", 9);
    ɵngcc0.ɵɵlistener("click", function FloatingActionButtonComponent_ng_template_4_Template_ul_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onItemClick($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r4.dialClass)("dialItems", ctx_r4.dialItems)("dialItemTemplate", ctx_r4.dialItemTemplate == null ? null : ctx_r4.dialItemTemplate.templateRef)("align", ctx_r4.align);
    ɵngcc0.ɵɵattribute("aria-labelledby", ctx_r4.id);
} }
const _c10 = function (a0, a1) { return { keydown: a0, click: a1 }; };
const _c11 = ["kendoDialList", ""];
function DialListComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "li", 1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const idx_r2 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("item", ctx_r0.dialItems[idx_r2])("index", idx_r2)("dialItemTemplate", ctx_r0.dialItemTemplate)("isFocused", ctx_r0.isFocused(idx_r2))("ngClass", item_r1.cssClass)("ngStyle", item_r1.cssStyle)("align", ctx_r0.align);
} }
const _c12 = ["kendoDialItem", ""];
function DialItemComponent_0_ng_template_0_Template(rf, ctx) { }
const _c13 = function (a0, a1, a2) { return { $implicit: a0, index: a1, isFocused: a2 }; };
function DialItemComponent_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DialItemComponent_0_ng_template_0_Template, 0, 0, "ng-template", 1);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.dialItemTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(2, _c13, ctx_r0.item, ctx_r0.index, ctx_r0.isFocused));
} }
function DialItemComponent_ng_container_1_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3.item.label);
} }
function DialItemComponent_ng_container_1_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 5);
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r4.iconClasses);
} }
function DialItemComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DialItemComponent_ng_container_1_span_1_Template, 2, 1, "span", 2);
    ɵngcc0.ɵɵtemplate(2, DialItemComponent_ng_container_1_span_2_Template, 1, 1, "span", 3);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.item.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.item.icon || ctx_r1.item.iconClass);
} }
let KendoButtonService = class KendoButtonService {
    /**
     * @hidden
     */
    constructor() {
        this.buttonLookChange = new BehaviorSubject('default');
        this.buttonClicked = new Subject();
        this.buttonClicked$ = this.buttonClicked.asObservable();
    }
    click(button) {
        this.buttonClicked.next(button);
    }
    setButtonLook(look) {
        this.buttonLookChange.next(look);
    }
};
KendoButtonService.ɵfac = function KendoButtonService_Factory(t) { return new (t || KendoButtonService)(); };
KendoButtonService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: KendoButtonService, factory: function (t) { return KendoButtonService.ɵfac(t); } });

/**
 * @hidden
 */
const packageMetadata = {
    name: '@progress/kendo-angular-buttons',
    productName: 'Kendo UI for Angular',
    productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],
    publishDate: 1630565192,
    version: '',
    licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/?utm_medium=product&utm_source=kendoangular&utm_campaign=kendo-ui-angular-purchase-license-keys-warning'
};

const SPAN_TAG_NAME = 'SPAN';
/**
 * Represents the Kendo UI Button component for Angular.
 */
let ButtonDirective = class ButtonDirective {
    constructor(element, renderer, service, localization, ngZone) {
        this.service = service;
        this.ngZone = ngZone;
        /**
         * Provides visual styling that indicates if the Button is active.
         * By default, `toggleable` is set to `false`.
         */
        this.toggleable = false;
        /**
         * Adds visual weight to the Button and makes it primary.
         */
        this.primary = false;
        /**
         * Changes the visual appearance by using alternative styling options
         * ([more information and examples]({% slug appearance_button %})).
         *
         * The available values are:
         * * [`ButtonLook`]({% slug api_buttons_buttonlook %}) = `flat` | `outline`
         * * `clear`
         */
        this.look = 'default';
        /**
         * @hidden
         */
        this.role = 'button';
        /**
         * Fires each time the selected state of a toggleable button is changed.
         *
         * The event argument is the new selected state (boolean).
         */
        this.selectedChange = new EventEmitter();
        /**
         * Fires each time the user clicks the button.
         */
        this.click = new EventEmitter();
        this.isDisabled = false;
        this.isIcon = false;
        this.isIconClass = false;
        this._focused = false;
        this.domEvents = [];
        validatePackage(packageMetadata);
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        this.localizationChangeSubscription = localization.changes
            .subscribe(({ rtl }) => this.direction = rtl ? 'rtl' : 'ltr');
        this.element = element.nativeElement;
        this.renderer = renderer;
    }
    /**
     * Backwards-compatible alias
     *
     * @hidden
     */
    get togglable() {
        return this.toggleable;
    }
    /**
     * @hidden
     */
    set togglable(value) {
        this.toggleable = value;
    }
    /**
     * Sets the selected state of the Button.
     */
    get selected() {
        return this._selected || false;
    }
    set selected(value) {
        this._selected = value;
    }
    /**
     * @hidden
     */
    set tabIndex(index) {
        this.element.tabIndex = index;
    }
    get tabIndex() {
        return this.element.tabIndex;
    }
    /**
     * Defines the name for an existing icon in a Kendo UI theme.
     * The icon is rendered inside the Button by a `span.k-icon` element.
     */
    set icon(icon) {
        if (icon) {
            this.iconSetter(icon, () => {
                this.isIcon = true;
                const classes = 'k-icon k-i-' + icon;
                this.addIcon(classes);
            });
        }
        else {
            this.isIcon = false;
            this.updateIconNode();
        }
    }
    /**
     * Defines a CSS class&mdash;or multiple classes separated by spaces&mdash;
     * which are applied to a `span` element inside the Button. Allows the usage of custom icons.
     */
    set iconClass(iconClassName) {
        if (iconClassName) {
            this.iconSetter(iconClassName, () => {
                this.isIconClass = true;
                this.addIcon(iconClassName);
            });
        }
        else {
            this.isIconClass = false;
            this.updateIconNode();
        }
    }
    /**
     * Defines a URL which is used for an `img` element inside the Button.
     * The URL can be relative or absolute. If relative, it is evaluated with relation to the web page URL.
     */
    set imageUrl(imageUrl) {
        if (imageUrl) {
            this.iconSetter(imageUrl, this.addImgIcon.bind(this));
        }
        else {
            this.removeImageNode();
        }
    }
    /**
     * If set to `true`, it disables the Button.
     */
    set disabled(disabled) {
        this.isDisabled = disabled;
        this.renderer.setProperty(this.element, 'disabled', disabled);
    }
    get disabled() {
        return this.isDisabled;
    }
    set isFocused(isFocused) {
        this.toggleClass('k-state-focused', isFocused);
        this._focused = isFocused;
    }
    get isFocused() {
        return this._focused;
    }
    get classButton() {
        return true;
    }
    get classPrimary() {
        return this.primary;
    }
    get isToggleable() {
        return this.toggleable;
    }
    get isFlat() {
        return this.look === 'flat';
    }
    get isBare() {
        return this.look === 'bare';
    }
    get isOutline() {
        return this.look === 'outline';
    }
    get isClear() {
        return this.look === 'clear';
    }
    get roleSetter() {
        return this.role;
    }
    get classDisabled() {
        return this.isDisabled;
    }
    get classActive() {
        return this.selected;
    }
    get getDirection() {
        return this.direction;
    }
    /**
     * @hidden
     */
    onFocus() {
        this.isFocused = true;
    }
    /**
     * @hidden
     */
    onBlur() {
        this.isFocused = false;
    }
    ngOnInit() {
        const isSpan = this.element.tagName === SPAN_TAG_NAME;
        if (this.service) {
            this.buttonLookChangeSubscription = this.service.buttonLookChange
                .pipe(filter((look) => look !== 'default'))
                .subscribe((look) => this.look = look);
        }
        if (!this.element.hasAttribute('role') && this.togglable) {
            this.toggleAriaPressed(this.toggleable);
        }
        if (this.role) {
            this.setAttribute('role', this.role);
        }
        this.ngZone.runOutsideAngular(() => {
            this.domEvents.push(this.renderer.listen(this.element, 'click', this._onButtonClick.bind(this)));
            this.domEvents.push(this.renderer.listen(this.element, 'keydown', (event) => {
                if (isSpan && (event.keyCode === Keys.Space || event.keyCode === Keys.Enter)) {
                    this.click.emit(event);
                    this._onButtonClick();
                }
            }));
        });
    }
    ngOnChanges(change) {
        if (isChanged('togglable', change) || isChanged('toggleable', change)) {
            this.toggleAriaPressed(this.toggleable);
        }
    }
    ngAfterViewChecked() {
        this.setIconTextClasses();
    }
    ngOnDestroy() {
        this.imageNode = null;
        this.iconNode = null;
        this.renderer = null;
        this.localizationChangeSubscription.unsubscribe();
        if (this.service && this.buttonLookChangeSubscription) {
            this.buttonLookChangeSubscription.unsubscribe();
        }
        clearTimeout(this.deferTimeout);
        this.domEvents.forEach(unbindHandler => unbindHandler());
    }
    /**
     * Focuses the Button component.
     */
    focus() {
        if (isDocumentAvailable()) {
            this.element.focus();
            this.isFocused = true;
        }
    }
    /**
     * Blurs the Button component.
     */
    blur() {
        if (isDocumentAvailable()) {
            this.element.blur();
            this.isFocused = false;
        }
    }
    /**
     * @hidden
     */
    setAttribute(attribute, value) {
        this.renderer.setAttribute(this.element, attribute, value);
    }
    /**
     * @hidden
     */
    removeAttribute(attribute) {
        this.renderer.removeAttribute(this.element, attribute);
    }
    /**
     * @hidden
     *
     * Internal setter that triggers selectedChange
     */
    setSelected(value) {
        const changed = this.selected !== value;
        this.selected = value;
        this.setAttribute('aria-pressed', this.selected.toString());
        this.toggleClass('k-state-selected', this.selected);
        if (changed && hasObservers(this.selectedChange)) {
            this.ngZone.run(() => {
                this.selectedChange.emit(value);
            });
        }
    }
    toggleAriaPressed(shouldSet) {
        if (!isDocumentAvailable()) {
            return;
        }
        if (shouldSet) {
            this.setAttribute('aria-pressed', this.selected.toString());
        }
        else {
            this.removeAttribute('aria-pressed');
        }
    }
    hasText() {
        if (isDocumentAvailable()) {
            return String(this.element.textContent).trim().length > 0;
        }
        else {
            return false;
        }
    }
    addImgIcon(imageUrl) {
        let renderer = this.renderer;
        if (this.imageNode) {
            renderer.setProperty(this.imageNode, 'src', imageUrl);
        }
        else if (isDocumentAvailable()) {
            this.imageNode = renderer.createElement('img');
            renderer.setProperty(this.imageNode, 'src', imageUrl);
            renderer.setProperty(this.imageNode, 'className', 'k-image');
            renderer.setAttribute(this.imageNode, 'role', 'presentation');
            this.prependChild(this.imageNode);
        }
    }
    addIcon(classNames) {
        let renderer = this.renderer;
        if (this.iconNode) {
            renderer.setProperty(this.iconNode, 'className', classNames);
        }
        else if (isDocumentAvailable()) {
            this.iconNode = renderer.createElement('span');
            renderer.setProperty(this.iconNode, 'className', classNames);
            renderer.setAttribute(this.iconNode, 'role', 'presentation');
            this.prependChild(this.iconNode);
        }
    }
    prependChild(node) {
        this.defer(() => {
            if (this.renderer && node !== this.element.firstChild) {
                this.renderer.insertBefore(this.element, node, this.element.firstChild);
            }
        });
    }
    defer(callback) {
        this.ngZone.runOutsideAngular(() => {
            this.deferTimeout = setTimeout(callback, 0);
        });
    }
    iconSetter(icon, insertIcon) {
        if (icon) {
            insertIcon(icon);
        }
        this.setIconTextClasses();
    }
    removeImageNode() {
        if (this.imageNode && this.renderer.parentNode(this.imageNode)) {
            this.renderer.removeChild(this.element, this.imageNode);
            this.imageNode = null;
        }
    }
    removeIconNode() {
        if (this.iconNode && this.renderer.parentNode(this.iconNode)) {
            this.renderer.removeChild(this.element, this.iconNode);
            this.iconNode = null;
        }
    }
    updateIconNode() {
        if (!this.isIcon && !this.isIconClass) {
            this.removeIconNode();
        }
    }
    setIconTextClasses() {
        const hasIcon = this.isIcon || this.isIconClass || this.imageNode;
        const hasText = this.hasText();
        this.toggleClass('k-button-icon', hasIcon && !hasText);
        this.toggleClass('k-button-icontext', hasIcon && hasText);
    }
    toggleClass(className, add) {
        if (add) {
            this.renderer.addClass(this.element, className);
        }
        else {
            this.renderer.removeClass(this.element, className);
        }
    }
    _onButtonClick() {
        if (!this.disabled && this.service) {
            this.ngZone.run(() => {
                this.service.click(this);
            });
        }
        if (this.togglable && !this.service) {
            this.setSelected(!this.selected);
        }
    }
};
ButtonDirective.ɵfac = function ButtonDirective_Factory(t) { return new (t || ButtonDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(KendoButtonService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
ButtonDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ButtonDirective, selectors: [["button", "kendoButton", ""], ["span", "kendoButton", ""]], hostVars: 21, hostBindings: function ButtonDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focus", function ButtonDirective_focus_HostBindingHandler() { return ctx.onFocus(); })("blur", function ButtonDirective_blur_HostBindingHandler() { return ctx.onBlur(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.roleSetter)("aria-disabled", ctx.classDisabled)("dir", ctx.getDirection);
        ɵngcc0.ɵɵclassProp("k-button", ctx.classButton)("k-primary", ctx.classPrimary)("k-toggle-button", ctx.isToggleable)("k-flat", ctx.isFlat)("k-bare", ctx.isBare)("k-outline", ctx.isOutline)("k-button-clear", ctx.isClear)("k-state-disabled", ctx.classDisabled)("k-state-selected", ctx.classActive);
    } }, inputs: { toggleable: "toggleable", primary: "primary", look: "look", role: "role", togglable: "togglable", selected: "selected", tabIndex: "tabIndex", icon: "icon", iconClass: "iconClass", imageUrl: "imageUrl", disabled: "disabled" }, outputs: { selectedChange: "selectedChange", click: "click" }, exportAs: ["kendoButton"], features: [ɵngcc0.ɵɵProvidersFeature([
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.button'
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature] });
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ButtonDirective.prototype, "toggleable", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], ButtonDirective.prototype, "togglable", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ButtonDirective.prototype, "primary", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ButtonDirective.prototype, "look", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], ButtonDirective.prototype, "selected", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], ButtonDirective.prototype, "tabIndex", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], ButtonDirective.prototype, "icon", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], ButtonDirective.prototype, "iconClass", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], ButtonDirective.prototype, "imageUrl", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], ButtonDirective.prototype, "disabled", null);
__decorate([
    Input(),
    __metadata("design:type", String)
], ButtonDirective.prototype, "role", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ButtonDirective.prototype, "selectedChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ButtonDirective.prototype, "click", void 0);
__decorate([
    HostBinding('class.k-button'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ButtonDirective.prototype, "classButton", null);
__decorate([
    HostBinding('class.k-primary'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ButtonDirective.prototype, "classPrimary", null);
__decorate([
    HostBinding('class.k-toggle-button'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ButtonDirective.prototype, "isToggleable", null);
__decorate([
    HostBinding('class.k-flat'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ButtonDirective.prototype, "isFlat", null);
__decorate([
    HostBinding('class.k-bare'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ButtonDirective.prototype, "isBare", null);
__decorate([
    HostBinding('class.k-outline'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ButtonDirective.prototype, "isOutline", null);
__decorate([
    HostBinding('class.k-button-clear'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ButtonDirective.prototype, "isClear", null);
__decorate([
    HostBinding('attr.role'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], ButtonDirective.prototype, "roleSetter", null);
__decorate([
    HostBinding('attr.aria-disabled'),
    HostBinding('class.k-state-disabled'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ButtonDirective.prototype, "classDisabled", null);
__decorate([
    HostBinding('class.k-state-selected'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ButtonDirective.prototype, "classActive", null);
__decorate([
    HostBinding('attr.dir'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], ButtonDirective.prototype, "getDirection", null);
__decorate([
    HostListener('focus'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ButtonDirective.prototype, "onFocus", null);
__decorate([
    HostListener('blur'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ButtonDirective.prototype, "onBlur", null);
ButtonDirective = __decorate([ __param(2, Optional()),
    __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        KendoButtonService,
        LocalizationService,
        NgZone])
], ButtonDirective);

/* tslint:disable:no-null-keyword */
/* tslint:disable:no-bitwise */
const resolvedPromise = Promise.resolve(null);
/**
 * @hidden
 */
const isPresent = (value) => value !== null && value !== undefined;
/**
 * @hidden
 */
const tick = (f) => (resolvedPromise.then(f));
/**
 * @hidden
 */
function isDocumentNode(container) {
    return container.nodeType === 9;
}
/**
 * @hidden
 */
function closest(element, selector) {
    if (element.closest) {
        return element.closest(selector);
    }
    const matches = Element.prototype.matches ?
        (el, sel) => el.matches(sel)
        : (el, sel) => el.msMatchesSelector(sel);
    let node = element;
    while (node && !isDocumentNode(node)) {
        if (matches(node, selector)) {
            return node;
        }
        node = node.parentNode;
    }
}

/**
 * @hidden
 */
class PreventableEvent {
    constructor() {
        this.prevented = false;
    }
    /**
     * Prevents the default action for a specified event.
     * In this way, the source component suppresses the built-in behavior that follows the event.
     */
    preventDefault() {
        this.prevented = true;
    }
    /**
     * If the event is prevented by any of its subscribers, returns `true`.
     *
     * @returns `true` if the default action was prevented. Otherwise, returns `false`.
     */
    isDefaultPrevented() {
        return this.prevented;
    }
}

/**
 * @hidden
 */
const tabindex = 'tabindex';
/**
 * Represents the Kendo UI ButtonGroup component for Angular.
 */
let ButtonGroupComponent = class ButtonGroupComponent {
    constructor(service, localization, element) {
        this.service = service;
        this.element = element;
        /**
         * By default, the selection mode of the ButtonGroup is set to `multiple`.
         */
        this.selection = 'multiple';
        /**
         * Changes the visual appearance by using alternative styling options
         * ([more information and examples]({% slug styling_buttongroup %})).
         * The `look` property of the ButtonGroup takes precedence over the `look` property
         * of the individual buttons that are part of the group.
         *
         * The available values are:
         * * `flat`
         * * `outline`
         */
        this.look = 'default';
        /**
         * Fires every time keyboard navigation occurs.
         */
        this.navigate = new EventEmitter();
        this._tabIndex = 0;
        this.currentTabIndex = 0;
        this.localizationChangeSubscription = localization.changes.subscribe(({ rtl }) => this.direction = rtl ? 'rtl' : 'ltr');
    }
    /**
     * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    set tabIndex(value) {
        this._tabIndex = value;
        this.currentTabIndex = value;
    }
    get tabIndex() {
        return this._tabIndex;
    }
    get wrapperClass() {
        return true;
    }
    get disabledClass() {
        return this.disabled;
    }
    get stretchedClass() {
        return !!this.width;
    }
    get isFlat() {
        return this.look === 'flat';
    }
    get isBare() {
        return this.look === 'bare';
    }
    get isOutline() {
        return this.look === 'outline';
    }
    get getRole() {
        return this.isSelectionSingle() ? 'radiogroup' : 'group';
    }
    get dir() {
        return this.direction;
    }
    get ariaDisabled() {
        return this.disabled;
    }
    get wrapperWidth() {
        return this.width;
    }
    get wrapperTabIndex() {
        return this.disabled ? undefined : this.currentTabIndex;
    }
    /**
     * @hidden
     */
    keydown(event) {
        if (!this.disabled) {
            this.navigateFocus(event);
        }
    }
    /**
     * @hidden
     */
    onFocus() {
        this.currentTabIndex = -1;
        const focusedIndex = this.buttons.toArray().findIndex(current => current.element.tabIndex !== -1);
        const index = focusedIndex === -1 ? 0 : focusedIndex;
        this.focus(this.buttons.filter((_current, i) => {
            return i === index;
        }));
    }
    /**
     * @hidden
     */
    focusout(event) {
        if (event.relatedTarget && event.relatedTarget.parentNode !== this.element.nativeElement) {
            this.defocus(this.buttons.toArray());
            this.currentTabIndex = this.tabIndex;
        }
    }
    ngOnInit() {
        this.service.setButtonLook(this.look);
        this.subscription = this.service.buttonClicked$.subscribe((button) => {
            let newSelectionValue;
            if (this.isSelectionSingle()) {
                newSelectionValue = true;
                this.deactivate(this.buttons.filter(current => current !== button));
            }
            else {
                this.defocus(this.buttons.toArray());
                newSelectionValue = !button.selected;
            }
            if (button.togglable) {
                button.setSelected(newSelectionValue);
            }
            button.setAttribute(tabindex, "0");
        });
    }
    ngOnChanges(change) {
        if (isChanged('disabled', change)) {
            this.buttons.forEach((button) => {
                if (isPresent(this.disabled)) {
                    button.disabled = this.disabled;
                }
            });
        }
    }
    ngAfterContentInit() {
        this.buttons.forEach((button) => {
            if (button.selected) {
                button.setAttribute(tabindex, "0");
            }
            else {
                button.setAttribute(tabindex, "-1");
            }
        });
    }
    ngAfterViewChecked() {
        if (this.buttons.length) {
            this.buttons.first.renderer.addClass(this.buttons.first.element, 'k-group-start');
            this.buttons.last.renderer.addClass(this.buttons.last.element, 'k-group-end');
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
        this.localizationChangeSubscription.unsubscribe();
    }
    ngAfterContentChecked() {
        this.verifySettings();
    }
    navigateFocus(event) {
        let focusedIndex = this.buttons.toArray().findIndex(current => current.element.tabIndex !== -1);
        const firstIndex = 0;
        const lastIndex = this.buttons.length - 1;
        const eventArgs = new PreventableEvent();
        if (event.keyCode === Keys.ArrowRight && focusedIndex < lastIndex) {
            this.navigate.emit(eventArgs);
            if (!eventArgs.isDefaultPrevented()) {
                this.defocus(this.buttons.toArray());
                this.focus(this.buttons.filter((_current, index) => {
                    return index === focusedIndex + 1;
                }));
            }
        }
        if (event.keyCode === Keys.ArrowLeft && focusedIndex > firstIndex) {
            this.navigate.emit(eventArgs);
            if (!eventArgs.isDefaultPrevented()) {
                this.defocus(this.buttons.toArray());
                this.focus(this.buttons.filter((_current, index) => {
                    return index === focusedIndex - 1;
                }));
            }
        }
    }
    deactivate(buttons) {
        buttons.forEach((button) => {
            button.setSelected(false);
            button.setAttribute(tabindex, "-1");
        });
    }
    activate(buttons) {
        buttons.forEach((button) => {
            button.setSelected(true);
            button.setAttribute(tabindex, "0");
            button.focus();
        });
    }
    defocus(buttons) {
        buttons.forEach((button) => {
            button.setAttribute(tabindex, "-1");
        });
    }
    focus(buttons) {
        buttons.forEach((button) => {
            button.setAttribute(tabindex, "0");
            button.focus();
        });
    }
    verifySettings() {
        if (isDevMode()) {
            if (this.isSelectionSingle() && this.buttons.filter(button => button.selected).length > 1) {
                throw new Error('Having multiple selected buttons with single selection mode is not supported');
            }
        }
    }
    isSelectionSingle() {
        return this.selection === 'single';
    }
};
ButtonGroupComponent.ɵfac = function ButtonGroupComponent_Factory(t) { return new (t || ButtonGroupComponent)(ɵngcc0.ɵɵdirectiveInject(KendoButtonService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ButtonGroupComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ButtonGroupComponent, selectors: [["kendo-buttongroup"]], contentQueries: function ButtonGroupComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ButtonDirective, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.buttons = _t);
    } }, hostVars: 18, hostBindings: function ButtonGroupComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function ButtonGroupComponent_keydown_HostBindingHandler($event) { return ctx.keydown($event); })("focus", function ButtonGroupComponent_focus_HostBindingHandler() { return ctx.onFocus(); })("focusout", function ButtonGroupComponent_focusout_HostBindingHandler($event) { return ctx.focusout($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.getRole)("dir", ctx.dir)("aria-disabled", ctx.ariaDisabled)("tabindex", ctx.wrapperTabIndex);
        ɵngcc0.ɵɵstyleProp("width", ctx.wrapperWidth);
        ɵngcc0.ɵɵclassProp("k-button-group", ctx.wrapperClass)("k-state-disabled", ctx.disabledClass)("k-button-group-stretched", ctx.stretchedClass)("k-button-group-flat", ctx.isFlat)("k-button-group-bare", ctx.isBare)("k-button-group-outline", ctx.isOutline);
    } }, inputs: { selection: "selection", look: "look", tabIndex: "tabIndex", disabled: "disabled", width: "width" }, outputs: { navigate: "navigate" }, exportAs: ["kendoButtonGroup"], features: [ɵngcc0.ɵɵProvidersFeature([
            KendoButtonService,
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.buttongroup'
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ButtonGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
__decorate([
    Input('disabled'),
    __metadata("design:type", Boolean)
], ButtonGroupComponent.prototype, "disabled", void 0);
__decorate([
    Input('selection'),
    __metadata("design:type", String)
], ButtonGroupComponent.prototype, "selection", void 0);
__decorate([
    Input('width'),
    __metadata("design:type", String)
], ButtonGroupComponent.prototype, "width", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ButtonGroupComponent.prototype, "look", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], ButtonGroupComponent.prototype, "tabIndex", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ButtonGroupComponent.prototype, "navigate", void 0);
__decorate([
    ContentChildren(ButtonDirective),
    __metadata("design:type", QueryList)
], ButtonGroupComponent.prototype, "buttons", void 0);
__decorate([
    HostBinding('class.k-button-group'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ButtonGroupComponent.prototype, "wrapperClass", null);
__decorate([
    HostBinding('class.k-state-disabled'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ButtonGroupComponent.prototype, "disabledClass", null);
__decorate([
    HostBinding('class.k-button-group-stretched'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ButtonGroupComponent.prototype, "stretchedClass", null);
__decorate([
    HostBinding('class.k-button-group-flat'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ButtonGroupComponent.prototype, "isFlat", null);
__decorate([
    HostBinding('class.k-button-group-bare'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ButtonGroupComponent.prototype, "isBare", null);
__decorate([
    HostBinding('class.k-button-group-outline'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ButtonGroupComponent.prototype, "isOutline", null);
__decorate([
    HostBinding('attr.role'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], ButtonGroupComponent.prototype, "getRole", null);
__decorate([
    HostBinding('attr.dir'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], ButtonGroupComponent.prototype, "dir", null);
__decorate([
    HostBinding('attr.aria-disabled'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ButtonGroupComponent.prototype, "ariaDisabled", null);
__decorate([
    HostBinding('style.width'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], ButtonGroupComponent.prototype, "wrapperWidth", null);
__decorate([
    HostBinding('attr.tabindex'),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], ButtonGroupComponent.prototype, "wrapperTabIndex", null);
__decorate([
    HostListener('keydown', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ButtonGroupComponent.prototype, "keydown", null);
__decorate([
    HostListener('focus'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ButtonGroupComponent.prototype, "onFocus", null);
__decorate([
    HostListener('focusout', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ButtonGroupComponent.prototype, "focusout", null);
ButtonGroupComponent = __decorate([ __metadata("design:paramtypes", [KendoButtonService,
        LocalizationService,
        ElementRef])
], ButtonGroupComponent);

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmodules'] }})
 * definition for the Button directive.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the Button module
 * import { ButtonModule } from '@progress/kendo-angular-buttons';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, ButtonModule], // import Button module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
let ButtonModule = class ButtonModule {
};
ButtonModule.ɵfac = function ButtonModule_Factory(t) { return new (t || ButtonModule)(); };
ButtonModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ButtonModule });
ButtonModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});

/**
 * @hidden
 *
 * The exported package module.
 *
 * The package exports:
 * - `ButtonGroupComponent`&mdash;The ButtonGroupComponent component class.
 */
let ButtonGroupModule = class ButtonGroupModule {
};
ButtonGroupModule.ɵfac = function ButtonGroupModule_Factory(t) { return new (t || ButtonGroupModule)(); };
ButtonGroupModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ButtonGroupModule });
ButtonGroupModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, ButtonModule]] });

/**
 * Used for rendering the list item content.
 *
 * To define the item template, nest a `<ng-template>` tag with the `kendo<ComponentName>ItemTemplate` directive inside the component tag.
 *
 * For the DropDownButton, use the `kendoDropDownButtonItemTemplate` directive.
 * For the SplitButton, use the `kendoSplitButtonItemTemplate` directive.
 *
 * The template context is set to the current component. To get a reference to the current data item, use the `let-dataItem` directive.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-splitbutton [data]="listItems">
 *    <ng-template kendoSplitButtonItemTemplate let-dataItem>
 *      <span>{{dataItem}} option</span>
 *    </ng-template>
 *  </kendo-splitbutton>
 *  <kendo-dropdownbutton [data]="listItems">
 *    <ng-template kendoDropDownButtonItemTemplate let-dataItem>
 *      <span>{{dataItem}} option</span>
 *    </ng-template>
 *  </kendo-dropdownbutton>
 * `
 * })
 * class AppComponent {
 *   public listItems: Array<any> = [{
 *      text: 'item1',
 *      icon: 'refresh',
 *      disabled: false,
 *      click: (dataItem: any) => {
 *          //action
 *      }
 *  }, {
 *      text: 'item2',
 *      icon: 'refresh',
 *      disabled: false,
 *      click: (dataItem: any) => {
 *          //action
 *      }
 *  }]
 * }
 * ```
 *
 * For more examples, refer to the article on the [DropDownList templates]({% slug overview_ddl %}#templates).
 */
let ButtonItemTemplateDirective = class ButtonItemTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
ButtonItemTemplateDirective.ɵfac = function ButtonItemTemplateDirective_Factory(t) { return new (t || ButtonItemTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
ButtonItemTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ButtonItemTemplateDirective, selectors: [["", "kendoDropDownButtonItemTemplate", ""], ["", "kendoSplitButtonItemTemplate", ""]] });
ButtonItemTemplateDirective = __decorate([ __metadata("design:paramtypes", [TemplateRef])
], ButtonItemTemplateDirective);

/**
 * @hidden
 */
let ListComponent = class ListComponent {
    constructor() {
        this.onItemClick = new EventEmitter();
        this.onItemBlur = new EventEmitter();
        validatePackage(packageMetadata);
    }
    getText(dataItem) {
        if (dataItem) {
            return this.textField ? dataItem[this.textField] : dataItem.text || dataItem;
        }
        return undefined;
    }
    getIconClasses(dataItem) {
        const icon = dataItem.icon ? 'k-icon k-i-' + dataItem.icon : undefined;
        const classes = {};
        classes[icon || dataItem.iconClass] = true;
        return classes;
    }
    onClick(index) {
        this.onItemClick.emit(index);
    }
    onBlur() {
        this.onItemBlur.emit();
    }
};
ListComponent.ɵfac = function ListComponent_Factory(t) { return new (t || ListComponent)(); };
ListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListComponent, selectors: [["kendo-button-list"]], inputs: { data: "data", textField: "textField", itemTemplate: "itemTemplate" }, outputs: { onItemClick: "onItemClick", onItemBlur: "onItemBlur" }, decls: 2, vars: 1, consts: [["unselectable", "on", 1, "k-list", "k-reset"], ["role", "menuitem", "unselectable", "on", "tabindex", "-1", "kendoButtonFocusable", "", 3, "index", "ngClass", "click", "blur", 4, "ngFor", "ngForOf"], ["role", "menuitem", "unselectable", "on", "tabindex", "-1", "kendoButtonFocusable", "", 3, "index", "ngClass", "click", "blur"], [4, "ngIf"], [3, "ngIf"], [3, "templateContext"], [3, "ngClass", 4, "ngIf"], ["class", "k-image", "alt", "", 3, "src", 4, "ngIf"], [3, "ngClass"], ["alt", "", 1, "k-image", 3, "src"]], template: function ListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ul", 0);
        ɵngcc0.ɵɵtemplate(1, ListComponent_li_1_Template, 3, 7, "li", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.data);
    } }, directives: function () { return [ɵngcc2.NgForOf, FocusableDirective, ɵngcc2.NgClass, ɵngcc2.NgIf, TemplateContextDirective]; }, encapsulation: 2 });
__decorate([
    Input(),
    __metadata("design:type", Array)
], ListComponent.prototype, "data", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ListComponent.prototype, "textField", void 0);
__decorate([
    Input(),
    __metadata("design:type", ButtonItemTemplateDirective)
], ListComponent.prototype, "itemTemplate", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ListComponent.prototype, "onItemClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ListComponent.prototype, "onItemBlur", void 0);
ListComponent = __decorate([ __metadata("design:paramtypes", [])
], ListComponent);

/**
 * @hidden
 */
let FocusService = class FocusService {
    /**
     * @hidden
     */
    constructor() {
        this.onFocus = new EventEmitter();
    }
    isFocused(index) {
        return index === this.focused;
    }
    focus(index) {
        if (this.isFocused(index)) {
            return;
        }
        this.focused = index;
        this.onFocus.emit(index);
    }
    resetFocus() {
        this.focused = -1;
    }
    get focused() {
        return this.focusedIndex;
    }
    set focused(index) {
        this.focusedIndex = index;
        this.onFocus.emit(index);
    }
};
FocusService.ɵfac = function FocusService_Factory(t) { return new (t || FocusService)(); };
FocusService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FocusService, factory: function (t) { return FocusService.ɵfac(t); } });

/**
 * @hidden
 */
let FocusableDirective = class FocusableDirective {
    constructor(focusService, elementRef, renderer) {
        this.focusService = focusService;
        this.renderer = renderer;
        this.element = elementRef.nativeElement;
        this.subscribeEvents();
    }
    ngOnInit() {
        if (this.index === this.focusService.focused) {
            this.renderer.addClass(this.element, 'k-state-focused');
        }
        else {
            this.renderer.removeClass(this.element, 'k-state-focused');
        }
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this.unsubscribeEvents();
    }
    subscribeEvents() {
        if (!isDocumentAvailable()) {
            return;
        }
        this.focusSubscription = this.focusService.onFocus.subscribe((index) => {
            if (this.index === index) {
                this.renderer.addClass(this.element, 'k-state-focused');
                this.element.focus();
            }
            else {
                this.renderer.removeClass(this.element, 'k-state-focused');
            }
        });
    }
    unsubscribeEvents() {
        if (!isDocumentAvailable()) {
            return;
        }
        if (this.focusSubscription) {
            this.focusSubscription.unsubscribe();
        }
    }
};
FocusableDirective.ɵfac = function FocusableDirective_Factory(t) { return new (t || FocusableDirective)(ɵngcc0.ɵɵdirectiveInject(FocusService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
FocusableDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FocusableDirective, selectors: [["", "kendoButtonFocusable", ""]], inputs: { index: "index" } });
__decorate([
    Input(),
    __metadata("design:type", Number)
], FocusableDirective.prototype, "index", void 0);
FocusableDirective = __decorate([ __metadata("design:paramtypes", [FocusService, ElementRef, Renderer2])
], FocusableDirective);

/**
 * @hidden
 */
let TemplateContextDirective = class TemplateContextDirective {
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
    set templateContext(context) {
        if (this.insertedViewRef) {
            this.viewContainerRef.remove(this.viewContainerRef.indexOf(this.insertedViewRef));
            this.insertedViewRef = undefined;
        }
        if (context.templateRef) {
            this.insertedViewRef = this.viewContainerRef.createEmbeddedView(context.templateRef, context);
        }
    }
};
TemplateContextDirective.ɵfac = function TemplateContextDirective_Factory(t) { return new (t || TemplateContextDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
TemplateContextDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TemplateContextDirective, selectors: [["", "templateContext", ""]], inputs: { templateContext: "templateContext" } });
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], TemplateContextDirective.prototype, "templateContext", null);
TemplateContextDirective = __decorate([ __metadata("design:paramtypes", [ViewContainerRef])
], TemplateContextDirective);

const EXPORTED_DIRECTIVES = [
    ListComponent,
    FocusableDirective,
    ButtonItemTemplateDirective,
    TemplateContextDirective
];
/**
 * @hidden
 */
let ListModule = class ListModule {
};
ListModule.ɵfac = function ListModule_Factory(t) { return new (t || ListModule)(); };
ListModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ListModule });
ListModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });

/**
 * @hidden
 */
var KeyEvents;
(function (KeyEvents) {
    KeyEvents[KeyEvents["keydown"] = 0] = "keydown";
    KeyEvents[KeyEvents["keypress"] = 1] = "keypress";
    KeyEvents[KeyEvents["keyup"] = 2] = "keyup";
})(KeyEvents || (KeyEvents = {}));

/**
 * @hidden
 */
var NavigationAction;
(function (NavigationAction) {
    NavigationAction[NavigationAction["Undefined"] = 0] = "Undefined";
    NavigationAction[NavigationAction["Open"] = 1] = "Open";
    NavigationAction[NavigationAction["Close"] = 2] = "Close";
    NavigationAction[NavigationAction["Enter"] = 3] = "Enter";
    NavigationAction[NavigationAction["EnterPress"] = 4] = "EnterPress";
    NavigationAction[NavigationAction["EnterUp"] = 5] = "EnterUp";
    NavigationAction[NavigationAction["Tab"] = 6] = "Tab";
    NavigationAction[NavigationAction["Esc"] = 7] = "Esc";
    NavigationAction[NavigationAction["Navigate"] = 8] = "Navigate";
})(NavigationAction || (NavigationAction = {}));

/* tslint:disable:deprecation */
/**
 * @hidden
 */
class ListButton {
    constructor(focusService, navigationService, wrapperRef, _zone, localization, cdr) {
        this.focusService = focusService;
        this.navigationService = navigationService;
        this.wrapperRef = wrapperRef;
        this._zone = _zone;
        this.cdr = cdr;
        this._open = false;
        this._disabled = false;
        this._active = false;
        this._popupSettings = { animate: true, popupClass: '' };
        this.listId = guid();
        this._isFocused = false;
        this.focusService = focusService;
        this.navigationService = navigationService;
        this.wrapper = wrapperRef.nativeElement;
        this.localizationChangeSubscription = localization.changes.subscribe(({ rtl }) => (this.direction = rtl ? 'rtl' : 'ltr'));
        this.subscribeEvents();
    }
    get popupClasses() {
        const popupClasses = ['k-list-container', 'k-reset', 'k-group'];
        if (this._popupSettings.popupClass) {
            popupClasses.push(this._popupSettings.popupClass);
        }
        return popupClasses.join(' ');
    }
    get openState() {
        return this._open;
    }
    set openState(open) {
        this._open = open;
    }
    /**
     * @hidden
     */
    togglePopupVisibility() {
        if (this._disabled) {
            return;
        }
        this.openState = !this.openState;
        if (!this.openState) {
            this.focusService.focus(-1);
        }
    }
    /**
     * @hidden
     */
    onItemClick(index) {
        this.emitItemClickHandler(index);
        setTimeout(() => this.focusWrapper(), 1);
    }
    ngOnDestroy() {
        this.openState = false;
        this.unsubscribeEvents();
        clearTimeout(this.focusFirstTimeout);
        clearTimeout(this.blurTimeout);
        if (this.localizationChangeSubscription) {
            this.localizationChangeSubscription.unsubscribe();
        }
    }
    subscribeEvents() {
        if (!isDocumentAvailable()) {
            return;
        }
        this.subscribeListItemFocusEvent();
        this.subscribeComponentBlurredEvent();
        this.subscribeNavigationEvents();
    }
    subscribeListItemFocusEvent() {
        this.focusSubscription = this.focusService.onFocus.subscribe(() => {
            this._isFocused = true;
        });
    }
    subscribeComponentBlurredEvent() {
        this._zone.runOutsideAngular(() => {
            this.tabSubscription = this.navigationService.tab.pipe(filter(() => this._isFocused)).subscribe(this.handleTab.bind(this));
            this.componentBlurredSubscription = fromEvent(document, 'click')
                .pipe(filter((event) => !this.wrapperContains(event.target)), filter(() => this._isFocused))
                .subscribe(() => this._zone.run(() => this.blurWrapper()));
        });
    }
    subscribeNavigationEvents() {
        this.navigationSubscription = this.navigationService.navigate.subscribe(this.focusService.focus.bind(this.focusService));
        this.enterUpSubscription = this.navigationService.enterup.subscribe(() => {
            this.enterHandler();
            this.focusWrapper();
        });
        this.openSubscription = this.navigationService.open.subscribe(() => {
            if (!this._open) {
                this.togglePopupVisibility();
                this.focusFirstItem();
            }
            else {
                this.focusWrapper();
            }
        });
        this.closeSubscription = merge(this.navigationService.close, this.navigationService.esc).subscribe(() => this.focusWrapper());
    }
    enterHandler() { } // tslint:disable-line
    unsubscribeEvents() {
        if (!isDocumentAvailable()) {
            return;
        }
        this.unsubscribe(this.componentBlurredSubscription);
        this.unsubscribe(this.focusSubscription);
        this.unsubscribe(this.navigationSubscription);
        this.unsubscribe(this.enterPressSubscription);
        this.unsubscribe(this.enterUpSubscription);
        this.unsubscribe(this.openSubscription);
        this.unsubscribe(this.closeSubscription);
        this.unsubscribe(this.tabSubscription);
    }
    unsubscribe(subscription) {
        if (subscription) {
            subscription.unsubscribe();
        }
    }
    /**
     * @hidden
     */
    keyDownHandler(event) {
        this.keyHandler(event);
    }
    /**
     * @hidden
     */
    keyPressHandler(event) {
        this.keyHandler(event, KeyEvents.keypress);
    }
    /**
     * @hidden
     */
    keyUpHandler(event) {
        this.keyHandler(event, KeyEvents.keyup);
    }
    /**
     * @hidden
     */
    keyHandler(event, keyEvent) {
        if (this._disabled) {
            return;
        }
        let focused = this.focusService.focused || 0;
        const eventData = event;
        const action = this.navigationService.process({
            altKey: eventData.altKey,
            current: focused,
            keyCode: eventData.keyCode,
            keyEvent: keyEvent,
            max: this._data ? this._data.length - 1 : 0,
            min: 0
        });
        if (action !== NavigationAction.Undefined &&
            action !== NavigationAction.Tab &&
            (action !== NavigationAction.Enter || (action === NavigationAction.Enter && this._open))) {
            if (event.keyCode === Keys.Space && action === NavigationAction.EnterUp) {
                this._open = false;
            }
            else {
                eventData.preventDefault();
            }
        }
    }
    emitItemClickHandler(index) {
        const dataItem = this._data[index];
        if (this._itemClick) {
            this._itemClick.emit(dataItem);
        }
        if (dataItem && dataItem.click && !dataItem.disabled) {
            dataItem.click(dataItem);
        }
    }
    focusFirstItem() {
        if (this._data && isPresent(this._data[0])) {
            this.focusFirstTimeout = setTimeout(() => this.focusService.focus(0), 1);
        }
    }
    focusWrapper() {
        if (this._open) {
            this.togglePopupVisibility();
            this.focusButton();
        }
    }
    wrapperContains(element) {
        return this.wrapper === element || this.wrapper.contains(element);
    }
    blurWrapper(emit = true) {
        if (this._open) {
            this.togglePopupVisibility();
        }
        this._isFocused = false;
        if (emit) {
            this._blur.emit();
            this.cdr.markForCheck();
        }
    }
    focusButton() {
        if (this.button) {
            this.button.nativeElement.focus();
        }
    }
    handleTab() {
        this.focusButton();
        this.blurWrapper(false);
    }
}
ListButton.ɵfac = function ListButton_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };
ListButton.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ListButton });

/**
 * @hidden
 */
const NAVIGATION_CONFIG = new InjectionToken('navigation.config');

/**
 * @hidden
 */
let NavigationService = class NavigationService {
    constructor(config) {
        this.navigate = new EventEmitter();
        this.open = new EventEmitter();
        this.close = new EventEmitter();
        this.enter = new EventEmitter();
        this.enterpress = new EventEmitter();
        this.enterup = new EventEmitter();
        this.tab = new EventEmitter();
        this.esc = new EventEmitter();
        this.useLeftRightArrows = config.useLeftRightArrows;
    }
    process(args) {
        const keyCode = args.keyCode;
        const keyEvent = args.keyEvent;
        let index;
        let action = NavigationAction.Undefined;
        if (keyEvent === KeyEvents.keypress) {
            if (this.isEnter(keyCode)) {
                action = NavigationAction.EnterPress;
            }
        }
        else if (keyEvent === KeyEvents.keyup) {
            if (this.isEnter(keyCode)) {
                action = NavigationAction.EnterUp;
            }
        }
        else {
            if (args.altKey && keyCode === Keys.ArrowDown) {
                action = NavigationAction.Open;
            }
            else if (args.altKey && keyCode === Keys.ArrowUp) {
                action = NavigationAction.Close;
            }
            else if (this.isEnter(keyCode)) {
                action = NavigationAction.Enter;
            }
            else if (keyCode === Keys.Escape) {
                action = NavigationAction.Esc;
            }
            else if (keyCode === Keys.Tab) {
                action = NavigationAction.Tab;
            }
            else if (keyCode === Keys.ArrowUp || (this.useLeftRightArrows && keyCode === Keys.ArrowLeft)) {
                const step = args.flipNavigation ? 1 : -1;
                const start = args.flipNavigation ? args.min : args.max;
                const end = args.flipNavigation ? args.max : args.min;
                index = this.next({
                    current: args.current,
                    start: start,
                    end: end,
                    step: step
                });
                action = NavigationAction.Navigate;
            }
            else if (keyCode === Keys.ArrowDown || (this.useLeftRightArrows && keyCode === Keys.ArrowRight)) {
                const step = args.flipNavigation ? -1 : 1;
                const start = args.flipNavigation ? args.max : args.min;
                const end = args.flipNavigation ? args.min : args.max;
                index = this.next({
                    current: args.current,
                    start: start,
                    end: end,
                    step: step
                });
                action = NavigationAction.Navigate;
            }
            else if (keyCode === Keys.Home) {
                index = args.min;
                action = NavigationAction.Navigate;
            }
            else if (keyCode === Keys.End) {
                index = args.max;
                action = NavigationAction.Navigate;
            }
        }
        if (action !== NavigationAction.Undefined) {
            this[NavigationAction[action].toLowerCase()].emit(index);
        }
        return action;
    }
    isEnter(keyCode) {
        return keyCode === Keys.Enter || keyCode === Keys.Space;
    }
    next(args) {
        if (!isPresent(args.current)) {
            return args.start;
        }
        else {
            return args.current !== args.end ? args.current + args.step : args.end;
        }
    }
};
NavigationService.ɵfac = function NavigationService_Factory(t) { return new (t || NavigationService)(ɵngcc0.ɵɵinject(NAVIGATION_CONFIG)); };
NavigationService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NavigationService, factory: function (t) { return NavigationService.ɵfac(t); } });
NavigationService = __decorate([ __param(0, Inject(NAVIGATION_CONFIG)),
    __metadata("design:paramtypes", [Object])
], NavigationService);

const NAVIGATION_SETTINGS = {
    useLeftRightArrows: true
};
const ɵ0 = NAVIGATION_SETTINGS;
const NAVIGATION_SETTINGS_PROVIDER = {
    provide: NAVIGATION_CONFIG,
    useValue: ɵ0
};
/**
 * Represents the Kendo UI SplitButton component for Angular.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-splitbutton [data]="data" icon="paste"
 *      (itemClick)="onSplitButtonItemClick($event)"
 *      (buttonClick)="onSplitButtonClick()">Paste</kendo-splitbutton>
 * `
 * })
 *
 * class AppComponent {
 *   public data: Array<any> = [{
 *       text: 'Keep Text Only',
 *       icon: 'paste-plain-text',
 *       click: () => { console.log('Keep Text Only click handler'); }
 *   }, {
 *       text: 'Paste as HTML',
 *       icon: 'paste-as-html'
 *   }, {
 *       text: 'Paste Markdown',
 *       icon: 'paste-markdown'
 *   }, {
 *       text: 'Set Default Paste'
 *   }];
 *
 *   public onSplitButtonClick(dataItem: any): void {
 *       console.log('Paste');
 *   }
 *
 *   public onSplitButtonItemClick(dataItem: any): void {
 *       if (dataItem) {
 *           console.log(dataItem.text);
 *       }
 *   }
 * }
 * ```
 */
let SplitButtonComponent = class SplitButtonComponent extends ListButton {
    constructor(focusService, navigationService, wrapperRef, zone, popupService, elRef, localization, cdr) {
        super(focusService, navigationService, wrapperRef, zone, localization, cdr);
        this.popupService = popupService;
        this.elRef = elRef;
        /**
         * Sets the text of the SplitButton.
         */
        this.text = '';
        /**
         * Defines an icon to be rendered next to the button text
         * ([see example]({% slug databinding_splitbutton %}#toc-arrays-of-complex-data)).
         */
        this.icon = '';
        /**
         * Defines an icon with a custom CSS class to be rendered next to the button text
         * ([see example]({% slug databinding_splitbutton %}#toc-arrays-of-complex-data)).
         */
        this.iconClass = '';
        /**
         * Defines the type attribute of the main button
         */
        this.type = 'button';
        /**
         * Defines the location of an image to be displayed next to the button text
         * ([see example]({% slug databinding_splitbutton %}#toc-arrays-of-complex-data)).
         */
        this.imageUrl = '';
        /**
         * Changes the visual appearance by using alternative styling options.
         *
         * The available values are:
         * * `flat`
         * * `outline`
         */
        this.look = 'default';
        /**
         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabIndex = 0;
        /**
         * Specifies the name of the [font icon]({% slug icons %}#toc-list-of-font-icons) that will
         * be rendered for the button which opens the popup.
         */
        this.arrowButtonIcon = 'arrow-s';
        /**
         * Fires each time the user clicks the main button.
         *
         * @example
         * ```ts
         * _@Component({
         *    selector: 'my-app',
         *    template: `
         *        <kendo-splitbutton (buttonClick)="onSplitButtonClick()" [data]="data">
         *            Reply
         *        </kendo-splitbutton>
         *    `
         * })
         * class AppComponent {
         *    public data: Array<any> = ['Reply All', 'Forward', 'Reply & Delete'];
         *
         *    public onSplitButtonClick(): void {
         *      console.log('SplitButton click');
         *    }
         * }
         * ```
         *
         */
        this.buttonClick = new EventEmitter();
        /**
         * Fires each time the user clicks on the drop-down list. The event data contains the data item bound to the clicked list item.
         *
         * @example
         * ```ts
         * _@Component({
         *     selector: 'my-app',
         *    template: `
         *        <kendo-splitbutton (itemClick)="onSplitButtonItemClick($event)" [data]="data">
         *          Reply
         *      </kendo-splitbutton>
         *    `
         * })
         * class AppComponent {
         *    public data: Array<any> = ['Reply All', 'Forward', 'Reply & Delete'];
         *
         *   public onSplitButtonItemClick(dataItem?: string): void {
         *        if (dataItem) {
         *            console.log(dataItem);
         *       }
         *    }
         * }
         * ```
         *
         */
        this.itemClick = new EventEmitter();
        /**
         * Fires each time the SplitButton gets focused.
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the SplitButton gets blurred.
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel the event, the popup will remain closed.
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel the event, the popup will remain open.
         */
        this.close = new EventEmitter();
        this.listId = guid();
        /**
         * @hidden
         */
        this.activeArrow = false;
        this.buttonText = '';
        this.lockFocus = false;
        this._itemClick = this.itemClick;
        this._blur = this.onBlur;
    }
    /**
     * When set to `true`, disables a SplitButton item
     * ([see example]({% slug databinding_splitbutton %}#toc-arrays-of-complex-data)).
     */
    set disabled(value) {
        if (this.isOpen) {
            this.toggle(false);
        }
        this._disabled = value;
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * Configures the popup of the SplitButton.
     *
     * The available options are:
     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     * - `appendTo: "root" | "component" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.
     * - `align: "left" | "center" | "right"`&mdash;Specifies the alignment of the popup.
     */
    set popupSettings(settings) {
        this._popupSettings = Object.assign({ animate: true, popupClass: '' }, settings);
    }
    get popupSettings() {
        return this._popupSettings;
    }
    /**
     * Sets the data of the SplitButton.
     *
     * > The data has to be provided in an array-like list.
     */
    set data(data) {
        this._data = data || [];
    }
    get data() {
        if (!this._data) {
            this.data = [];
        }
        return this._data;
    }
    /**
     * @hidden
     */
    set openState(open) {
        if (this.disabled) {
            return;
        }
        const eventArgs = new PreventableEvent();
        if (open) {
            this.open.emit(eventArgs);
        }
        else {
            this.close.emit(eventArgs);
        }
        if (eventArgs.isDefaultPrevented()) {
            return;
        }
        this._toggle(open);
    }
    /**
     * @hidden
     */
    get openState() {
        return this._open;
    }
    /**
     * @hidden
     */
    get active() {
        return this._active;
    }
    /**
     * @hidden
     */
    get componentTabIndex() {
        return this.disabled ? -1 : this.tabIndex;
    }
    set isFocused(value) {
        this._isFocused = value;
    }
    get isFocused() {
        return this._isFocused && !this._disabled;
    }
    get isFlat() {
        return this.look === 'flat';
    }
    get isOutline() {
        return this.look === 'outline';
    }
    get widgetClasses() {
        return true;
    }
    get dir() {
        return this.direction;
    }
    /**
     * @hidden
     */
    get ariaLabel() {
        return `${this.buttonText} splitbutton`;
    }
    /**
     * @hidden
     */
    onButtonFocus() {
        if (!this.isFocused) {
            this._isFocused = true;
            this.onFocus.emit();
        }
    }
    /**
     * @hidden
     */
    onArrowButtonClick() {
        this.lockFocus = true;
        this.togglePopupVisibility();
    }
    /**
     * @hidden
     */
    toggleButtonActiveState(enable) {
        this._active = enable;
    }
    /**
     * @hidden
     */
    toggleArrowButtonActiveState(enable) {
        this.activeArrow = enable;
    }
    /**
     * @hidden
     */
    onButtonClick() {
        this.lockFocus = true;
        this.buttonClick.emit();
    }
    /**
     * @hidden
     */
    onButtonBlur() {
        if (!this.isOpen && !this.lockFocus) {
            this.blurWrapper();
        }
        this.lockFocus = false;
    }
    /**
     * @hidden
     */
    keydown(event) {
        this.keyDownHandler(event);
        if (event.keyCode === Keys.Space) {
            this._active = true;
        }
    }
    /**
     * @hidden
     */
    keypress(event) {
        this.keyPressHandler(event);
    }
    /**
     * @hidden
     */
    keyup(event) {
        this._active = false;
        if (event.keyCode !== Keys.Space) {
            this.keyUpHandler(event);
        }
    }
    /**
     * @hidden
     */
    ngAfterViewInit() {
        this.updateButtonText();
    }
    /**
     * @hidden
     */
    ngOnChanges(changes) {
        if (changes.hasOwnProperty('text')) {
            this.updateButtonText();
        }
        if (isChanged("popupSettings", changes) && isPresent(this.popupRef)) {
            const popup = this.popupRef.popup.instance;
            const newSettings = changes.popupSettings.currentValue;
            popup.popupClass = newSettings.popupClass;
            popup.animate = newSettings.animate;
            popup.popupAlign = this.popupAlign;
        }
    }
    /**
     * @hidden
     */
    togglePopupVisibility() {
        super.togglePopupVisibility();
        if (isDocumentAvailable() && this.lockFocus) {
            this.button.nativeElement.focus();
        }
    }
    /**
     * @hidden
     */
    wrapperContains(element) {
        return (this.wrapper === element || this.wrapper.contains(element) || (this.popupRef && this.popupRef.popupElement.contains(element)));
    }
    /**
     * @hidden
     */
    get anchorAlign() {
        let align = { horizontal: this.popupSettings.align || 'left', vertical: 'bottom' };
        if (this.direction === 'rtl' && !isPresent(this.popupSettings.align)) {
            align.horizontal = 'right';
        }
        return align;
    }
    /**
     * @hidden
     */
    get popupAlign() {
        let align = { horizontal: this.popupSettings.align || 'left', vertical: 'top' };
        if (this.direction === 'rtl' && !isPresent(this.popupSettings.align)) {
            align.horizontal = 'right';
        }
        return align;
    }
    /**
     * Focuses the SplitButton component.
     */
    focus() {
        if (isDocumentAvailable()) {
            this.button.nativeElement.focus();
        }
    }
    /**
     * Blurs the SplitButton component.
     */
    blur() {
        if (isDocumentAvailable()) {
            this.button.nativeElement.blur();
            this.blurWrapper();
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.destroyPopup();
    }
    /**
     * Toggles the visibility of the popup.
     * If the `toggle` method is used to open or close the popup, the `open` and `close` events will not be fired.
     *
     * @param open - The state of the popup.
     */
    toggle(open) {
        if (this.disabled) {
            return;
        }
        tick(() => this._toggle(open === undefined ? !this._open : open));
    }
    /**
     * Returns the current open state of the popup.
     */
    get isOpen() {
        return this.openState;
    }
    enterHandler() {
        if (this.disabled) {
            return;
        }
        if (this.openState) {
            let focused = this.focusService.focused;
            if (isPresent(focused) && focused !== -1) {
                this.emitItemClickHandler(focused);
            }
        }
        else {
            this.buttonClick.emit();
        }
    }
    updateButtonText() {
        if (isDocumentAvailable()) {
            let innerText = this.wrapper.innerText
                .split('\n')
                .join('')
                .trim();
            //setTimout is needed because of `Expression has changed after it was checked.` error;
            setTimeout(() => (this.buttonText = innerText), 0);
        }
    }
    get appendTo() {
        const { appendTo } = this.popupSettings;
        if (!appendTo || appendTo === 'root') {
            return undefined;
        }
        return appendTo === 'component' ? this.containerRef : appendTo;
    }
    _toggle(open) {
        this._open = open;
        this.destroyPopup();
        if (this._open) {
            this.createPopup();
        }
    }
    createPopup() {
        this.popupRef = this.popupService.open({
            anchor: this.elRef,
            anchorAlign: this.anchorAlign,
            animate: this.popupSettings.animate,
            appendTo: this.appendTo,
            content: this.popupTemplate,
            popupAlign: this.popupAlign,
            popupClass: this.popupClasses
        });
        this.popupRef.popupAnchorViewportLeave.subscribe(() => (this.openState = false));
        this.popupRef.popupOpen.subscribe(this.focusFirstItem.bind(this));
    }
    destroyPopup() {
        if (this.popupRef) {
            this.popupRef.close();
            this.popupRef = null;
        }
    }
};
SplitButtonComponent.ɵfac = function SplitButtonComponent_Factory(t) { return new (t || SplitButtonComponent)(ɵngcc0.ɵɵdirectiveInject(FocusService), ɵngcc0.ɵɵdirectiveInject(NavigationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.PopupService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
SplitButtonComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SplitButtonComponent, selectors: [["kendo-splitbutton"]], contentQueries: function SplitButtonComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ButtonItemTemplateDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemTemplate = _t.first);
    } }, viewQuery: function SplitButtonComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c4, 7);
        ɵngcc0.ɵɵviewQuery(_c5, 7, ElementRef);
        ɵngcc0.ɵɵviewQuery(_c6, 7);
        ɵngcc0.ɵɵviewQuery(_c7, 7, ViewContainerRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.button = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.arrowButton = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.popupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.containerRef = _t.first);
    } }, hostVars: 11, hostBindings: function SplitButtonComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function SplitButtonComponent_keydown_HostBindingHandler($event) { return ctx.keydown($event); })("keypress", function SplitButtonComponent_keypress_HostBindingHandler($event) { return ctx.keypress($event); })("keyup", function SplitButtonComponent_keyup_HostBindingHandler($event) { return ctx.keyup($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("dir", ctx.dir);
        ɵngcc0.ɵɵclassProp("k-state-focused", ctx.isFocused)("k-flat", ctx.isFlat)("k-outline", ctx.isOutline)("k-split-button", ctx.widgetClasses)("k-button-group", ctx.widgetClasses);
    } }, inputs: { text: "text", icon: "icon", iconClass: "iconClass", type: "type", imageUrl: "imageUrl", look: "look", tabIndex: "tabIndex", arrowButtonIcon: "arrowButtonIcon", disabled: "disabled", popupSettings: "popupSettings", data: "data", textField: "textField", buttonClass: "buttonClass", arrowButtonClass: "arrowButtonClass" }, outputs: { buttonClick: "buttonClick", itemClick: "itemClick", onFocus: "focus", onBlur: "blur", open: "open", close: "close" }, exportAs: ["kendoSplitButton"], features: [ɵngcc0.ɵɵProvidersFeature([
            FocusService,
            NavigationService,
            NAVIGATION_SETTINGS_PROVIDER,
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.splitbutton'
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c8, decls: 10, vars: 23, consts: [["kendoButton", "", "role", "listbox", 3, "type", "look", "tabindex", "disabled", "icon", "iconClass", "imageUrl", "ngClass", "focus", "click", "blur", "mousedown", "mouseup"], ["button", ""], ["kendoButton", "", "type", "button", 3, "disabled", "icon", "look", "tabindex", "ngClass", "click", "mousedown", "mouseup"], ["arrowButton", ""], ["popupTemplate", ""], ["container", ""], [3, "id", "data", "textField", "itemTemplate", "onItemClick", "keydown", "keypress", "keyup"]], template: function SplitButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "button", 0, 1);
        ɵngcc0.ɵɵlistener("focus", function SplitButtonComponent_Template_button_focus_0_listener() { return ctx.onButtonFocus(); })("click", function SplitButtonComponent_Template_button_click_0_listener() { return ctx.onButtonClick(); })("blur", function SplitButtonComponent_Template_button_blur_0_listener() { return ctx.onButtonBlur(); })("mousedown", function SplitButtonComponent_Template_button_mousedown_0_listener() { return ctx.toggleButtonActiveState(true); })("mouseup", function SplitButtonComponent_Template_button_mouseup_0_listener() { return ctx.toggleButtonActiveState(false); });
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵprojection(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "button", 2, 3);
        ɵngcc0.ɵɵlistener("click", function SplitButtonComponent_Template_button_click_4_listener() { return ctx.onArrowButtonClick(); })("mousedown", function SplitButtonComponent_Template_button_mousedown_4_listener() { return ctx.toggleArrowButtonActiveState(true); })("mouseup", function SplitButtonComponent_Template_button_mouseup_4_listener() { return ctx.toggleArrowButtonActiveState(false); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, SplitButtonComponent_ng_template_6_Template, 1, 5, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementContainer(8, null, 5);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-state-active", ctx.active);
        ɵngcc0.ɵɵproperty("type", ctx.type)("look", ctx.look)("tabindex", ctx.componentTabIndex)("disabled", ctx.disabled)("icon", ctx.icon)("iconClass", ctx.iconClass)("imageUrl", ctx.imageUrl)("ngClass", ctx.buttonClass);
        ɵngcc0.ɵɵattribute("aria-disabled", ctx.disabled)("aria-expanded", ctx.openState)("aria-haspopup", true)("aria-owns", ctx.listId)("aria-label", ctx.ariaLabel);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.text, "");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassProp("k-state-active", ctx.activeArrow);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("icon", ctx.arrowButtonIcon)("look", ctx.look)("tabindex", -1)("ngClass", ctx.arrowButtonClass);
    } }, directives: [ButtonDirective, ɵngcc2.NgClass, ListComponent], encapsulation: 2 });
__decorate([
    Input(),
    __metadata("design:type", String)
], SplitButtonComponent.prototype, "text", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SplitButtonComponent.prototype, "icon", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SplitButtonComponent.prototype, "iconClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SplitButtonComponent.prototype, "type", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SplitButtonComponent.prototype, "imageUrl", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SplitButtonComponent.prototype, "look", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], SplitButtonComponent.prototype, "disabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], SplitButtonComponent.prototype, "popupSettings", null);
__decorate([
    Input(),
    __metadata("design:type", Number)
], SplitButtonComponent.prototype, "tabIndex", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SplitButtonComponent.prototype, "textField", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], SplitButtonComponent.prototype, "data", null);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SplitButtonComponent.prototype, "buttonClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SplitButtonComponent.prototype, "arrowButtonClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SplitButtonComponent.prototype, "arrowButtonIcon", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], SplitButtonComponent.prototype, "buttonClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], SplitButtonComponent.prototype, "itemClick", void 0);
__decorate([
    Output('focus'),
    __metadata("design:type", EventEmitter)
], SplitButtonComponent.prototype, "onFocus", void 0);
__decorate([
    Output('blur'),
    __metadata("design:type", EventEmitter)
], SplitButtonComponent.prototype, "onBlur", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], SplitButtonComponent.prototype, "open", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], SplitButtonComponent.prototype, "close", void 0);
__decorate([
    ContentChild(ButtonItemTemplateDirective, { static: false }),
    __metadata("design:type", ButtonItemTemplateDirective)
], SplitButtonComponent.prototype, "itemTemplate", void 0);
__decorate([
    ViewChild('button', { static: true }),
    __metadata("design:type", ElementRef)
], SplitButtonComponent.prototype, "button", void 0);
__decorate([
    ViewChild('arrowButton', { static: true, read: ElementRef }),
    __metadata("design:type", ElementRef)
], SplitButtonComponent.prototype, "arrowButton", void 0);
__decorate([
    ViewChild('popupTemplate', { static: true }),
    __metadata("design:type", TemplateRef)
], SplitButtonComponent.prototype, "popupTemplate", void 0);
__decorate([
    ViewChild('container', { read: ViewContainerRef, static: true }),
    __metadata("design:type", ViewContainerRef)
], SplitButtonComponent.prototype, "containerRef", void 0);
__decorate([
    HostBinding('class.k-state-focused'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], SplitButtonComponent.prototype, "isFocused", null);
__decorate([
    HostBinding('class.k-flat'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], SplitButtonComponent.prototype, "isFlat", null);
__decorate([
    HostBinding('class.k-outline'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], SplitButtonComponent.prototype, "isOutline", null);
__decorate([
    HostBinding('class.k-split-button'),
    HostBinding('class.k-button-group'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], SplitButtonComponent.prototype, "widgetClasses", null);
__decorate([
    HostBinding('attr.dir'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], SplitButtonComponent.prototype, "dir", null);
__decorate([
    HostListener('keydown', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], SplitButtonComponent.prototype, "keydown", null);
__decorate([
    HostListener('keypress', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], SplitButtonComponent.prototype, "keypress", null);
__decorate([
    HostListener('keyup', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], SplitButtonComponent.prototype, "keyup", null);
SplitButtonComponent = __decorate([ __metadata("design:paramtypes", [FocusService,
        NavigationService,
        ElementRef,
        NgZone,
        PopupService,
        ElementRef,
        LocalizationService,
        ChangeDetectorRef])
], SplitButtonComponent);

/**
 * @hidden
 *
 * The exported package module.
 *
 * The package exports:
 * - `SplitButtonComponent`&mdash;The SplitButtonComponent component class.
 */
let SplitButtonModule = class SplitButtonModule {
};
SplitButtonModule.ɵfac = function SplitButtonModule_Factory(t) { return new (t || SplitButtonModule)(); };
SplitButtonModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SplitButtonModule });
SplitButtonModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, PopupModule, ButtonModule, ListModule], ListModule] });

const NAVIGATION_SETTINGS$1 = {
    useLeftRightArrows: true
};
const ɵ0$1 = NAVIGATION_SETTINGS$1;
const NAVIGATION_SETTINGS_PROVIDER$1 = {
    provide: NAVIGATION_CONFIG,
    useValue: ɵ0$1
};
/**
 * Represents the Kendo UI DropDownButton component for Angular.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-dropdownbutton [data]="data">
 *    User Settings
 *  </kendo-dropdownbutton>
 * `
 * })
 * class AppComponent {
 *   public data: Array<any> = [{
 *       text: 'My Profile'
 *   }, {
 *       text: 'Friend Requests'
 *   }, {
 *       text: 'Account Settings'
 *   }, {
 *       text: 'Support'
 *   }, {
 *       text: 'Log Out'
 *   }];
 * }
 * ```
 */
let DropDownButtonComponent = class DropDownButtonComponent extends ListButton {
    constructor(focusService, navigationService, wrapperRef, zone, popupService, elRef, localization, cdr) {
        super(focusService, navigationService, wrapperRef, zone, localization, cdr);
        this.popupService = popupService;
        this.elRef = elRef;
        /**
         * Defines the name of an existing icon in a Kendo UI theme.
         */
        this.icon = '';
        /**
         * Defines the list of CSS classes which are used for styling the Button with custom icons.
         */
        this.iconClass = '';
        /**
         * Defines a URL for styling the button with a custom image.
         */
        this.imageUrl = '';
        /**
         * Adds visual weight to the default button and makes it primary.
         */
        this.primary = false;
        /**
         * Changes the visual appearance by using alternative styling options.
         *
         * The available values are:
         * * `flat`
         * * `outline`
         */
        this.look = 'default';
        /**
         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabIndex = 0;
        /**
         * Fires each time the user clicks on a drop-down list item. The event data contains the data item bound to the clicked list item.
         */
        this.itemClick = new EventEmitter();
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel the event, the popup will remain closed.
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel the event, the popup will remain open.
         */
        this.close = new EventEmitter();
        /**
         * Fires each time the DropDownButton gets focused.
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the DropDownButton gets blurred.
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        this.listId = guid();
        this._itemClick = this.itemClick;
        this._blur = this.onBlur;
    }
    /**
     * Configures the popup of the DropDownButton.
     *
     * The available options are:
     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     * - `appendTo: "root" | "component" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.
     * - `align: "left" | "center" | "right"`&mdash;Specifies the alignment of the popup.
     */
    set popupSettings(settings) {
        this._popupSettings = Object.assign({ animate: true, popupClass: '' }, settings);
    }
    get popupSettings() {
        return this._popupSettings;
    }
    /**
     * Sets the disabled state of the DropDownButton.
     */
    set disabled(value) {
        if (value && this.openState) {
            this.openState = false;
        }
        this._disabled = value;
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * Sets or gets the data of the DropDownButton.
     *
     * > The data has to be provided in an array-like list.
     */
    set data(data) {
        this._data = data || [];
    }
    get data() {
        return this._data;
    }
    /**
     * @hidden
     */
    set openState(open) {
        if (this.disabled) {
            return;
        }
        const eventArgs = new PreventableEvent();
        if (open) {
            this.open.emit(eventArgs);
        }
        else {
            this.close.emit(eventArgs);
        }
        if (eventArgs.isDefaultPrevented()) {
            return;
        }
        this._toggle(open);
    }
    /**
     * @hidden
     */
    get openState() {
        return this._open;
    }
    /**
     * @hidden
     */
    get componentTabIndex() {
        return this.disabled ? (-1) : this.tabIndex;
    }
    get appendTo() {
        const { appendTo } = this.popupSettings;
        if (!appendTo || appendTo === 'root') {
            return undefined;
        }
        return appendTo === 'component' ? this.container : appendTo;
    }
    get focused() {
        return this._isFocused && !this._disabled;
    }
    get isFlat() {
        return this.look === 'flat';
    }
    get isOutline() {
        return this.look === 'outline';
    }
    get widgetClasses() {
        return true;
    }
    get dir() {
        return this.direction;
    }
    /**
     * @hidden
     */
    get active() {
        return this._active;
    }
    /**
     * @hidden
     */
    keydown(event) {
        this.keyDownHandler(event);
        if (event.keyCode === Keys.Space) {
            this._active = true;
        }
    }
    /**
     * @hidden
     */
    keypress(event) {
        this.keyPressHandler(event);
    }
    /**
     * @hidden
     */
    keyup(event) {
        this.keyUpHandler(event);
        this._active = false;
    }
    /**
     * @hidden
     */
    mousedown(event) {
        if (this._disabled) {
            event.preventDefault();
        }
        this._active = true;
    }
    /**
     * @hidden
     */
    mouseup(event) {
        if (this._disabled) {
            event.preventDefault();
        }
        this._active = false;
    }
    /**
     * @hidden
     */
    openPopup() {
        this.togglePopupVisibility();
    }
    /**
     * @hidden
     */
    onButtonBlur() {
        if (!this.isOpen) {
            this.blurWrapper();
        }
    }
    /**
     * @hidden
     */
    get anchorAlign() {
        let align = { horizontal: this.popupSettings.align || 'left', vertical: 'bottom' };
        if (this.direction === 'rtl' && !isPresent(this.popupSettings.align)) {
            align.horizontal = 'right';
        }
        return align;
    }
    /**
     * @hidden
     */
    get popupAlign() {
        let align = { horizontal: this.popupSettings.align || 'left', vertical: 'top' };
        if (this.direction === 'rtl' && !isPresent(this.popupSettings.align)) {
            align.horizontal = 'right';
        }
        return align;
    }
    /**
     * Focuses the DropDownButton component.
     */
    focus() {
        if (isDocumentAvailable()) {
            this.button.nativeElement.focus();
        }
    }
    /**
     * Blurs the DropDownButton component.
     */
    blur() {
        if (isDocumentAvailable()) {
            this.button.nativeElement.blur();
            this.blurWrapper();
        }
    }
    ngOnChanges(changes) {
        if (isChanged("popupSettings", changes) && isPresent(this.popupRef)) {
            const popup = this.popupRef.popup.instance;
            const newSettings = changes.popupSettings.currentValue;
            popup.popupClass = newSettings.popupClass;
            popup.animate = newSettings.animate;
            popup.popupAlign = this.popupAlign;
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.destroyPopup();
    }
    /**
     * Toggles the visibility of the popup.
     * If the `toggle` method is used to open or close the popup, the `open` and `close` events will not be fired.
     *
     * @param open - The state of the popup.
     */
    toggle(open) {
        if (this.disabled) {
            return;
        }
        tick(() => (this._toggle((open === undefined) ? !this._open : open)));
    }
    /**
     * Returns the current open state of the popup.
     */
    get isOpen() {
        return this.openState;
    }
    /**
     * @hidden
     */
    handleFocus() {
        if (!this._disabled && !this._isFocused) {
            this._isFocused = true;
            this.onFocus.emit();
        }
    }
    /**
     * @hidden
     */
    wrapperContains(element) {
        return this.wrapper === element
            || this.wrapper.contains(element)
            || (this.popupRef && this.popupRef.popupElement.contains(element));
    }
    subscribeNavigationEvents() {
        this.navigationSubscription = this.navigationService.navigate
            .subscribe(this.onArrowKeyNavigate.bind(this));
        this.enterUpSubscription = this.navigationService.enterup.subscribe(this.onNavigationEnterUp.bind(this));
        this.openSubscription = this.navigationService.open.subscribe(this.onNavigationOpen.bind(this));
        this.closeSubscription = merge(this.navigationService.close, this.navigationService.esc).subscribe(this.onNavigationClose.bind(this));
    }
    onNavigationEnterUp() {
        if (!this._disabled && !this.openState) {
            this._active = false;
        }
        if (this.openState) {
            let focused = this.focusService.focused;
            if (isPresent(focused) && focused !== -1) {
                this.emitItemClickHandler(focused);
            }
        }
        this.togglePopupVisibility();
        if (!this.openState && isDocumentAvailable()) {
            this.button.nativeElement.focus();
        }
    }
    onNavigationOpen() {
        if (!this._disabled && !this.openState) {
            this.togglePopupVisibility();
        }
    }
    onNavigationClose() {
        if (this.openState) {
            this.togglePopupVisibility();
            if (isDocumentAvailable()) {
                this.button.nativeElement.focus();
            }
        }
    }
    onArrowKeyNavigate(index) {
        this.focusService.focus(index);
    }
    _toggle(open) {
        if (this._open === open) {
            return;
        }
        this._open = open;
        this.destroyPopup();
        if (this._open) {
            this.createPopup();
        }
    }
    createPopup() {
        this.popupRef = this.popupService.open({
            anchor: this.elRef,
            anchorAlign: this.anchorAlign,
            animate: this.popupSettings.animate,
            appendTo: this.appendTo,
            content: this.popupTemplate,
            popupAlign: this.popupAlign,
            popupClass: this.popupClasses
        });
        this.popupRef.popupAnchorViewportLeave.subscribe(() => this.openState = false);
        this.popupRef.popupOpen.subscribe(this.focusFirstItem.bind(this));
    }
    destroyPopup() {
        if (this.popupRef) {
            this.popupRef.close();
            this.popupRef = null;
        }
    }
};
DropDownButtonComponent.ɵfac = function DropDownButtonComponent_Factory(t) { return new (t || DropDownButtonComponent)(ɵngcc0.ɵɵdirectiveInject(FocusService), ɵngcc0.ɵɵdirectiveInject(NavigationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.PopupService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
DropDownButtonComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DropDownButtonComponent, selectors: [["kendo-dropdownbutton"]], contentQueries: function DropDownButtonComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ButtonItemTemplateDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemTemplate = _t.first);
    } }, viewQuery: function DropDownButtonComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c4, 7);
        ɵngcc0.ɵɵviewQuery(_c9, 5);
        ɵngcc0.ɵɵviewQuery(_c6, 7);
        ɵngcc0.ɵɵviewQuery(_c7, 7, ViewContainerRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.button = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.buttonList = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.popupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
    } }, hostVars: 9, hostBindings: function DropDownButtonComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function DropDownButtonComponent_keydown_HostBindingHandler($event) { return ctx.keydown($event); })("keypress", function DropDownButtonComponent_keypress_HostBindingHandler($event) { return ctx.keypress($event); })("keyup", function DropDownButtonComponent_keyup_HostBindingHandler($event) { return ctx.keyup($event); })("mousedown", function DropDownButtonComponent_mousedown_HostBindingHandler($event) { return ctx.mousedown($event); })("mouseup", function DropDownButtonComponent_mouseup_HostBindingHandler($event) { return ctx.mouseup($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("dir", ctx.dir);
        ɵngcc0.ɵɵclassProp("k-state-focused", ctx.focused)("k-flat", ctx.isFlat)("k-outline", ctx.isOutline)("k-dropdown-button", ctx.widgetClasses);
    } }, inputs: { icon: "icon", iconClass: "iconClass", imageUrl: "imageUrl", primary: "primary", look: "look", tabIndex: "tabIndex", popupSettings: "popupSettings", disabled: "disabled", data: "data", textField: "textField", buttonClass: "buttonClass" }, outputs: { itemClick: "itemClick", open: "open", close: "close", onFocus: "focus", onBlur: "blur" }, exportAs: ["kendoDropDownButton"], features: [ɵngcc0.ɵɵProvidersFeature([
            FocusService,
            NavigationService,
            NAVIGATION_SETTINGS_PROVIDER$1,
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.dropdownbutton'
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c8, decls: 7, vars: 14, consts: [["kendoButton", "", "role", "menu", "type", "button", 3, "tabindex", "disabled", "icon", "iconClass", "imageUrl", "ngClass", "look", "primary", "click", "focus", "blur"], ["button", ""], ["popupTemplate", ""], ["container", ""], [3, "id", "data", "textField", "itemTemplate", "onItemClick", "keydown", "keypress", "keyup"], ["buttonList", ""]], template: function DropDownButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "button", 0, 1);
        ɵngcc0.ɵɵlistener("click", function DropDownButtonComponent_Template_button_click_0_listener() { return ctx.openPopup(); })("focus", function DropDownButtonComponent_Template_button_focus_0_listener() { return ctx.handleFocus(); })("blur", function DropDownButtonComponent_Template_button_blur_0_listener() { return ctx.onButtonBlur(); });
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, DropDownButtonComponent_ng_template_3_Template, 2, 5, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementContainer(5, null, 3);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-state-active", ctx.active);
        ɵngcc0.ɵɵproperty("tabindex", ctx.componentTabIndex)("disabled", ctx.disabled)("icon", ctx.icon)("iconClass", ctx.iconClass)("imageUrl", ctx.imageUrl)("ngClass", ctx.buttonClass)("look", ctx.look)("primary", ctx.primary);
        ɵngcc0.ɵɵattribute("aria-disabled", ctx.disabled)("aria-expanded", ctx.openState)("aria-haspopup", true)("aria-owns", ctx.listId);
    } }, directives: [ButtonDirective, ɵngcc2.NgClass, ListComponent], encapsulation: 2 });
__decorate([
    Input(),
    __metadata("design:type", String)
], DropDownButtonComponent.prototype, "icon", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DropDownButtonComponent.prototype, "iconClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DropDownButtonComponent.prototype, "imageUrl", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DropDownButtonComponent.prototype, "popupSettings", null);
__decorate([
    Input(),
    __metadata("design:type", String)
], DropDownButtonComponent.prototype, "textField", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DropDownButtonComponent.prototype, "disabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DropDownButtonComponent.prototype, "data", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DropDownButtonComponent.prototype, "primary", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DropDownButtonComponent.prototype, "look", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DropDownButtonComponent.prototype, "buttonClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], DropDownButtonComponent.prototype, "tabIndex", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DropDownButtonComponent.prototype, "itemClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DropDownButtonComponent.prototype, "open", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DropDownButtonComponent.prototype, "close", void 0);
__decorate([
    Output('focus'),
    __metadata("design:type", EventEmitter)
], DropDownButtonComponent.prototype, "onFocus", void 0);
__decorate([
    Output('blur'),
    __metadata("design:type", EventEmitter)
], DropDownButtonComponent.prototype, "onBlur", void 0);
__decorate([
    HostBinding('class.k-state-focused'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], DropDownButtonComponent.prototype, "focused", null);
__decorate([
    HostBinding('class.k-flat'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], DropDownButtonComponent.prototype, "isFlat", null);
__decorate([
    HostBinding('class.k-outline'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], DropDownButtonComponent.prototype, "isOutline", null);
__decorate([
    HostBinding('class.k-dropdown-button'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], DropDownButtonComponent.prototype, "widgetClasses", null);
__decorate([
    HostBinding('attr.dir'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], DropDownButtonComponent.prototype, "dir", null);
__decorate([
    ContentChild(ButtonItemTemplateDirective, { static: false }),
    __metadata("design:type", ButtonItemTemplateDirective)
], DropDownButtonComponent.prototype, "itemTemplate", void 0);
__decorate([
    ViewChild('button', { static: true }),
    __metadata("design:type", ElementRef)
], DropDownButtonComponent.prototype, "button", void 0);
__decorate([
    ViewChild('buttonList', { static: false }),
    __metadata("design:type", ListComponent)
], DropDownButtonComponent.prototype, "buttonList", void 0);
__decorate([
    ViewChild('popupTemplate', { static: true }),
    __metadata("design:type", TemplateRef)
], DropDownButtonComponent.prototype, "popupTemplate", void 0);
__decorate([
    ViewChild('container', { read: ViewContainerRef, static: true }),
    __metadata("design:type", ViewContainerRef)
], DropDownButtonComponent.prototype, "container", void 0);
__decorate([
    HostListener('keydown', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], DropDownButtonComponent.prototype, "keydown", null);
__decorate([
    HostListener('keypress', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], DropDownButtonComponent.prototype, "keypress", null);
__decorate([
    HostListener('keyup', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], DropDownButtonComponent.prototype, "keyup", null);
__decorate([
    HostListener('mousedown', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], DropDownButtonComponent.prototype, "mousedown", null);
__decorate([
    HostListener('mouseup', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], DropDownButtonComponent.prototype, "mouseup", null);
DropDownButtonComponent = __decorate([ __metadata("design:paramtypes", [FocusService,
        NavigationService,
        ElementRef,
        NgZone,
        PopupService,
        ElementRef,
        LocalizationService,
        ChangeDetectorRef])
], DropDownButtonComponent);

/**
 * @hidden
 *
 * The exported package module.
 *
 * The package exports:
 * - `DropDownButtonComponent`&mdash;The DropDownButtonComponent component class.
 */
let DropDownButtonModule = class DropDownButtonModule {
};
DropDownButtonModule.ɵfac = function DropDownButtonModule_Factory(t) { return new (t || DropDownButtonModule)(); };
DropDownButtonModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DropDownButtonModule });
DropDownButtonModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, PopupModule, ListModule, ButtonModule], ListModule] });

/**
 * Displays a Chip that represents an input, attribute or an action.
 */
let ChipComponent = class ChipComponent {
    constructor(element, renderer, ngZone, localizationService) {
        this.element = element;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.localizationService = localizationService;
        /**
         * Changes the visual appearance by using alternative styling options.
         *
         * The available values are:
         * * `filled`
         * * `outlined`
         */
        this.look = 'filled';
        /**
         * Specifies the selected state of the Chip.
         */
        this.selected = false;
        /**
         * Specifies if the Chip will be removable or not.
         * If the property is set to `true`, the Chip renders a remove icon.
         */
        this.removable = false;
        /**
         * Specifies the Chip type.
         *
         * The possible values are:
         * - `none` (default)
         * - `success`
         * - `error`
         * - `warning`
         * - `info`
         */
        this.type = 'none';
        /**
         * If set to `true`, the Chip will be disabled.
         */
        this.disabled = false;
        /**
         * Fires each time the user clicks the remove icon of the Chip.
         */
        this.remove = new EventEmitter();
        /**
         * Fires each time the user clicks the content of the Chip.
         */
        this.contentClick = new EventEmitter();
        this.tabIndex = 0;
        this.hostClass = true;
        this.focused = false;
        validatePackage(packageMetadata);
        this.direction = localizationService.rtl ? 'rtl' : 'ltr';
    }
    get outlineClass() {
        return this.look === 'outlined';
    }
    get filledClass() {
        return this.look === 'filled';
    }
    get hasIconClass() {
        return this.icon || this.iconClass ? true : false;
    }
    get disabledClass() {
        return this.disabled;
    }
    get selectedClass() {
        return this.selected;
    }
    get focusedClass() {
        return this.focused;
    }
    ngOnInit() {
        this.dynamicRTLSubscription = this.localizationService.changes
            .subscribe(({ rtl }) => this.direction = rtl ? 'rtl' : 'ltr');
    }
    ngOnDestroy() {
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
        if (this.detachDomEvents) {
            this.detachDomEvents();
        }
    }
    ngAfterViewInit() {
        const chip = this.element.nativeElement;
        const typeClass = this.typeClass();
        if (this.type !== 'none') {
            this.renderer.addClass(chip, typeClass);
        }
        this.attachElementEventHandlers(chip);
    }
    /**
     * @hidden
     */
    get iconClasses() {
        const classes = [];
        if (this.iconClass) {
            classes.push(`${this.iconClass}`);
        }
        if (this.icon) {
            classes.push(`k-icon k-i-${this.icon}`);
        }
        return classes;
    }
    /**
     * @hidden
     */
    get selectedIconClasses() {
        if (this.selectedIcon) {
            return `${this.selectedIcon}`;
        }
        return `k-icon k-i-check`;
    }
    /**
     * @hidden
     */
    get removeIconClasses() {
        if (this.removeIcon) {
            return `${this.removeIcon}`;
        }
        return `k-icon k-i-close-circle`;
    }
    /**
     * @hidden
     */
    typeClass() {
        return {
            'none': '',
            'success': 'k-chip-success',
            'warning': 'k-chip-warning',
            'error': 'k-chip-error',
            'info': 'k-chip-info'
        }[this.type];
    }
    /**
     * Focuses the Chip component.
     */
    focus() {
        if (isDocumentAvailable()) {
            this.element.nativeElement.focus();
        }
    }
    /**
     * Blurs the Chip component.
     */
    blur() {
        if (isDocumentAvailable()) {
            this.element.nativeElement.blur();
        }
    }
    /**
     * @hidden
     */
    onRemoveClick(e) {
        if (this.removable) {
            this.remove.emit({ sender: this, originalEvent: e });
        }
    }
    attachElementEventHandlers(chip) {
        this.ngZone.runOutsideAngular(() => {
            const focusListener = this.renderer.listen(chip, 'focus', () => {
                this.renderer.addClass(chip, 'k-chip-focused');
            });
            const blurListener = this.renderer.listen(chip, 'blur', () => {
                this.renderer.removeClass(chip, 'k-chip-focused');
            });
            const contentClickListener = this.renderer.listen(chip, 'click', (e) => {
                const isRemoveClicked = closest(e.target, '.k-remove-icon');
                if (!isRemoveClicked) {
                    this.ngZone.run(() => {
                        this.contentClick.emit({ sender: this, originalEvent: e });
                    });
                }
            });
            this.detachDomEvents = () => {
                focusListener();
                blurListener();
                contentClickListener();
            };
        });
    }
};
ChipComponent.ɵfac = function ChipComponent_Factory(t) { return new (t || ChipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService)); };
ChipComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ChipComponent, selectors: [["kendo-chip"]], hostVars: 16, hostBindings: function ChipComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("tabindex", ctx.tabIndex)("dir", ctx.direction);
        ɵngcc0.ɵɵclassProp("k-chip", ctx.hostClass)("k-chip-outline", ctx.outlineClass)("k-chip-filled", ctx.filledClass)("k-chip-has-icon", ctx.hasIconClass)("k-chip-disabled", ctx.disabledClass)("k-chip-selected", ctx.selectedClass)("k-chip-focused", ctx.focusedClass);
    } }, inputs: { look: "look", selected: "selected", removable: "removable", type: "type", disabled: "disabled", label: "label", icon: "icon", iconClass: "iconClass", selectedIcon: "selectedIcon", removeIcon: "removeIcon" }, outputs: { remove: "remove", contentClick: "contentClick" }, features: [ɵngcc0.ɵɵProvidersFeature([
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.chip'
            }
        ])], ngContentSelectors: _c8, decls: 7, vars: 5, consts: [[1, "k-selected-icon-wrapper"], ["class", "k-selected-icon", 3, "ngClass", 4, "ngIf"], ["class", "k-chip-icon", 3, "ngClass", 4, "ngIf"], [1, "k-chip-content"], ["class", "k-chip-label", 4, "ngIf"], [4, "ngIf"], ["class", "k-remove-icon", 3, "click", 4, "ngIf"], [1, "k-selected-icon", 3, "ngClass"], [1, "k-chip-icon", 3, "ngClass"], [1, "k-chip-label"], [1, "k-remove-icon", 3, "click"], [3, "ngClass"]], template: function ChipComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵtemplate(1, ChipComponent_span_1_Template, 1, 1, "span", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, ChipComponent_span_2_Template, 1, 1, "span", 2);
        ɵngcc0.ɵɵelementStart(3, "span", 3);
        ɵngcc0.ɵɵtemplate(4, ChipComponent_span_4_Template, 2, 1, "span", 4);
        ɵngcc0.ɵɵtemplate(5, ChipComponent_ng_content_5_Template, 1, 0, "ng-content", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, ChipComponent_span_6_Template, 2, 1, "span", 6);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.selected);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.icon || ctx.iconClass);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.label);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.label);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.removable);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgClass], encapsulation: 2 });
__decorate([
    Input(),
    __metadata("design:type", String)
], ChipComponent.prototype, "look", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ChipComponent.prototype, "label", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ChipComponent.prototype, "icon", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ChipComponent.prototype, "iconClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ChipComponent.prototype, "selected", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ChipComponent.prototype, "selectedIcon", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ChipComponent.prototype, "removable", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ChipComponent.prototype, "removeIcon", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ChipComponent.prototype, "type", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ChipComponent.prototype, "disabled", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ChipComponent.prototype, "remove", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ChipComponent.prototype, "contentClick", void 0);
__decorate([
    HostBinding('attr.tabindex'),
    __metadata("design:type", Number)
], ChipComponent.prototype, "tabIndex", void 0);
__decorate([
    HostBinding('class.k-chip'),
    __metadata("design:type", Boolean)
], ChipComponent.prototype, "hostClass", void 0);
__decorate([
    HostBinding('class.k-chip-outline'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ChipComponent.prototype, "outlineClass", null);
__decorate([
    HostBinding('class.k-chip-filled'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ChipComponent.prototype, "filledClass", null);
__decorate([
    HostBinding('class.k-chip-has-icon'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ChipComponent.prototype, "hasIconClass", null);
__decorate([
    HostBinding('class.k-chip-disabled'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ChipComponent.prototype, "disabledClass", null);
__decorate([
    HostBinding('class.k-chip-selected'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ChipComponent.prototype, "selectedClass", null);
__decorate([
    HostBinding('class.k-chip-focused'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ChipComponent.prototype, "focusedClass", null);
__decorate([
    HostBinding('attr.dir'),
    __metadata("design:type", String)
], ChipComponent.prototype, "direction", void 0);
ChipComponent = __decorate([ __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        NgZone,
        LocalizationService])
], ChipComponent);

let ChipListComponent = class ChipListComponent {
    constructor(localizationService) {
        this.localizationService = localizationService;
        this.hostClass = true;
        /**
         * Sets the selection mode of the ChipList.
         *
         * The available values are:
         * * `none` (default)
         * * `single`
         * * `multiple`
         */
        this.selection = 'none';
        /**
         * Fires each time when the ChipList selection is changed.
         */
        this.selectedChange = new EventEmitter();
        /**
         * Fires each time the user clicks on the remove icon of the Chip.
         */
        this.remove = new EventEmitter();
        this.direction = localizationService.rtl ? 'rtl' : 'ltr';
    }
    get single() {
        return this.selection === 'single';
    }
    get multiple() {
        return this.selection === 'multiple';
    }
    /**
     * @hidden
     */
    onClick($event) {
        const target = $event.target;
        const isRemoveClicked = closest(target, '.k-remove-icon');
        const clickedChip = closest(target, '.k-chip');
        const chip = this.chips.find((chip) => clickedChip === chip.element.nativeElement);
        if (isRemoveClicked && clickedChip) {
            const removeEventArgs = { sender: this, originalEvent: $event, removedChip: chip };
            this.remove.emit(removeEventArgs);
        }
        if (this.selection !== 'none' && clickedChip && !isRemoveClicked) {
            this.setSelection(chip);
        }
    }
    ngOnInit() {
        this.dynamicRTLSubscription = this.localizationService.changes
            .subscribe(({ rtl }) => this.direction = rtl ? 'rtl' : 'ltr');
    }
    ngOnDestroy() {
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
    }
    selectedChips() {
        return this.chips.reduce((acc, cur, idx) => { return cur.selected ? acc.concat(idx) : acc; }, []);
    }
    /**
     * Updates the selection on click of a Chip. Emits events.
     */
    setSelection(chip) {
        if (this.selection === 'single') {
            this.clearSelection(chip);
        }
        chip.selected = !chip.selected;
        this.selectedChange.emit(this.selectedChips());
    }
    clearSelection(chip) {
        this.chips.forEach((c) => {
            if (chip !== c) {
                c.selected = false;
            }
        });
    }
};
ChipListComponent.ɵfac = function ChipListComponent_Factory(t) { return new (t || ChipListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService)); };
ChipListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ChipListComponent, selectors: [["kendo-chip-list"]], contentQueries: function ChipListComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ChipComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);
    } }, hostVars: 7, hostBindings: function ChipListComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ChipListComponent_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("dir", ctx.direction);
        ɵngcc0.ɵɵclassProp("k-chip-list", ctx.hostClass)("k-selection-single", ctx.single)("k-selection-multiple", ctx.multiple);
    } }, inputs: { selection: "selection" }, outputs: { selectedChange: "selectedChange", remove: "remove" }, features: [ɵngcc0.ɵɵProvidersFeature([
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.chip-list'
            }
        ])], ngContentSelectors: _c8, decls: 1, vars: 0, template: function ChipListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
__decorate([
    HostBinding('class.k-chip-list'),
    __metadata("design:type", Boolean)
], ChipListComponent.prototype, "hostClass", void 0);
__decorate([
    HostBinding('attr.dir'),
    __metadata("design:type", String)
], ChipListComponent.prototype, "direction", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ChipListComponent.prototype, "selection", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ChipListComponent.prototype, "selectedChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ChipListComponent.prototype, "remove", void 0);
__decorate([
    ContentChildren(ChipComponent),
    __metadata("design:type", QueryList)
], ChipListComponent.prototype, "chips", void 0);
__decorate([
    HostBinding('class.k-selection-single'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ChipListComponent.prototype, "single", null);
__decorate([
    HostBinding('class.k-selection-multiple'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], ChipListComponent.prototype, "multiple", null);
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ChipListComponent.prototype, "onClick", null);
ChipListComponent = __decorate([ __metadata("design:paramtypes", [LocalizationService])
], ChipListComponent);

const exportedModules = [
    ChipComponent,
    ChipListComponent
];
const declarations = [
    ...exportedModules
];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the Chip and ChipList components.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the Chip module
 * import { ChipModule } from '@progress/kendo-angular-buttons';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, ChipModule], // import Chip module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * ```
 */
let ChipModule = class ChipModule {
};
ChipModule.ɵfac = function ChipModule_Factory(t) { return new (t || ChipModule)(); };
ChipModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ChipModule });
ChipModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });

/**
 * @hidden
 */
function getAnchorAlign(fabAlign, rtl) {
    let align = { horizontal: (rtl ? 'right' : 'left'), vertical: 'bottom' };
    if (fabAlign.horizontal === 'end') {
        align.horizontal = rtl ? 'left' : 'right';
    }
    if (fabAlign.vertical === 'bottom') {
        align.vertical = 'top';
    }
    if (fabAlign.vertical === 'bottom' && fabAlign.horizontal === 'end') {
        align.horizontal = rtl ? 'left' : 'right';
        align.vertical = 'top';
    }
    return align;
}
/**
 * @hidden
 */
function getPopupAlign(fabAlign, rtl) {
    let align = { horizontal: (rtl ? 'right' : 'left'), vertical: 'top' };
    if (fabAlign.horizontal === 'end') {
        align.horizontal = rtl ? 'left' : 'right';
    }
    if (fabAlign.vertical === 'bottom') {
        align.vertical = 'bottom';
    }
    if (fabAlign.vertical === 'bottom' && fabAlign.horizontal === 'end') {
        align.horizontal = rtl ? 'left' : 'right';
        align.vertical = 'bottom';
    }
    return align;
}

/**
 * @hidden
 */
function openAnimation(animationSettings) {
    const isBottom = animationSettings.align.vertical === 'bottom';
    const duration = animationSettings.duration;
    const gap = animationSettings.gap;
    return sequence([
        query(`.k-fab-item`, [
            style({ opacity: 0, transform: `translateY(${isBottom ? '8px' : '-8px'})` }),
            stagger(gap, [animate(`${duration}ms ease-in`, style({ opacity: '*', transform: 'translateY(0)' }))])
        ], { optional: true })
    ]);
}
/**
 * @hidden
 */
function closeAnimation(animationSettings) {
    const isBottom = animationSettings.align.vertical === 'bottom';
    const duration = animationSettings.duration;
    const gap = animationSettings.gap;
    return sequence([
        query(`.k-fab-item`, [
            style({ opacity: '*', transform: 'translateY(0)' }),
            stagger(-gap, [animate(`${duration}ms ease-in`, style({ opacity: 0, transform: `translateY(${isBottom ? '8px' : '-8px'})` }))])
        ], { optional: true })
    ]);
}

/**
 * Represents a template that defines the content of the whole dial item.
 * To define the template, nest an `<ng-template>` tag
 * with the `kendoDialItemTemplate` directive inside the `<kendo-floatingactionbutton>` tag
 * ([see example]({% slug templates_floatingactionbutton %}#toc-dial-item-template)).
 */
let DialItemTemplateDirective = class DialItemTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
DialItemTemplateDirective.ɵfac = function DialItemTemplateDirective_Factory(t) { return new (t || DialItemTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef, 8)); };
DialItemTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DialItemTemplateDirective, selectors: [["", "kendoDialItemTemplate", ""]] });
DialItemTemplateDirective = __decorate([ __param(0, Optional()),
    __metadata("design:paramtypes", [TemplateRef])
], DialItemTemplateDirective);

/**
 * Represents a template that defines the content of the FloatingActionButton.
 * To define the template, nest an `<ng-template>` tag
 * with the `kendoFloatingActionButtonTemplate` directive inside the `<kendo-floatingactionbutton>` tag
 * ([see example]({% slug templates_floatingactionbutton %}#toc-floatingactionbutton-template)).
 */
let FloatingActionButtonTemplateDirective = class FloatingActionButtonTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
FloatingActionButtonTemplateDirective.ɵfac = function FloatingActionButtonTemplateDirective_Factory(t) { return new (t || FloatingActionButtonTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef, 8)); };
FloatingActionButtonTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FloatingActionButtonTemplateDirective, selectors: [["", "kendoFloatingActionButtonTemplate", ""]] });
FloatingActionButtonTemplateDirective = __decorate([ __param(0, Optional()),
    __metadata("design:paramtypes", [TemplateRef])
], FloatingActionButtonTemplateDirective);

const NAVIGATION_SETTINGS$2 = {
    useLeftRightArrows: false
};
const ɵ0$2 = NAVIGATION_SETTINGS$2;
const NAVIGATION_SETTINGS_PROVIDER$2 = {
    provide: NAVIGATION_CONFIG,
    useValue: ɵ0$2
};
const SIZE_CLASSES = {
    small: 'k-fab-sm',
    medium: 'k-fab-md',
    large: 'k-fab-lg'
};
const SHAPE_CLASSES = {
    pill: 'k-fab-pill',
    circle: 'k-fab-circle',
    rectangle: 'k-fab-rectangle',
    square: 'k-fab-square',
    rounded: 'k-fab-rounded'
};
const DEFAULT_DURATION = 180;
const DEFAULT_ITEM_GAP = 90;
const DEFAULT_OFFSET = '16px';
/**
 *
 * Represents the [Kendo UI FloatingActionButton component for Angular]({% slug overview_floatingactionbutton %}).
 * Used to specify the primary or the most common action in an application.
 *
 */
let FloatingActionButtonComponent = class FloatingActionButtonComponent {
    constructor(renderer, element, focusService, navigationService, ngZone, popupService, builder, localizationService) {
        this.renderer = renderer;
        this.element = element;
        this.focusService = focusService;
        this.navigationService = navigationService;
        this.ngZone = ngZone;
        this.popupService = popupService;
        this.builder = builder;
        this.localizationService = localizationService;
        /**
         * Specifies the positionMode of the FloatingActionButton
         * ([see example]({% slug positioning_floatingactionbutton %}#toc-positionMode)).
         *
         * * The possible values are:
         * * `absolute`&mdash;Positions the FloatingActionButton absolutely to its first positioned parent element.
         * * `fixed` (Default)&mdash;Positions the FloatingActionButton relative to the viewport. It always stays in the same place even if the page is scrolled.
         */
        this.positionMode = 'fixed';
        /**
         * Specifies the animation settings of the FloatingActionButton dial items.
         * ([see example]({% slug dialitems_floatingactionbutton %}#toc-animation)).
         *
         * The possible values are:
         * * Boolean
         *    * (Default) `true`&mdash;Applies the default [`DialItemAnimation`]({% slug api_buttons_dialitemanimation %}) settings.
         *    * `false`
         * * `DialItemAnimation`
         *    * `duration`&mdash;Specifies the animation duration in milliseconds for each dial item. Defaults to `180ms`.
         *    * `gap`&mdash;Specifies the animation duration gap in milliseconds after each dial item is animated. Defaults to `90ms`.
         */
        this.dialItemAnimation = true;
        /**
         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the FloatingActionButton.
         */
        this.tabIndex = 0;
        /**
         * Specifies the collection of the dial items that will be rendered in the FloatingActionButton popup.
         */
        this.dialItems = [];
        /**
         * Fires each time the FloatingActionButton gets blurred.
         */
        this.onBlur = new EventEmitter();
        /**
         * Fires each time the FloatingActionButton gets focused.
         */
        this.onFocus = new EventEmitter();
        /**
         * Fires each time a dial item is clicked.
         */
        this.dialItemClick = new EventEmitter();
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel the event, the popup will remain closed
         * ([more information and example]({% slug overview_floatingactionbutton %}#toc-events)).
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel the event, the popup will remain open
         * ([more information and example]({% slug overview_floatingactionbutton %}#toc-events)).
         */
        this.close = new EventEmitter();
        /**
         * @hidden
         */
        this.id = `k-${guid()}`;
        this._themeColor = 'primary';
        this._size = 'medium';
        this._shape = 'pill';
        this._disabled = false;
        this._align = { horizontal: 'end', vertical: 'bottom' };
        this._offset = { x: DEFAULT_OFFSET, y: DEFAULT_OFFSET };
        this.subscriptions = new Subscription();
        this.rtl = false;
        this.animationEnd = new EventEmitter();
        validatePackage(packageMetadata);
        this.subscribeNavigationEvents();
        this.subscriptions.add(this.localizationService.changes.subscribe(({ rtl }) => {
            this.rtl = rtl;
            this.direction = this.rtl ? 'rtl' : 'ltr';
        }));
    }
    get fixedClass() {
        return this.positionMode === 'fixed';
    }
    get absoluteClass() {
        return this.positionMode === 'absolute';
    }
    /**
     * Specifies the theme color of the FloatingActionButton
     * ([see example]({% slug appearance_floatingactionbutton %}#toc-themeColor)).
     * The theme color will be applied as background color of the component.
     *
     * The possible values are:
     * * `primary` (Default)&mdash;Applies coloring based on the `primary` theme color.
     * * `secondary`&mdash;Applies coloring based on the `secondary` theme color.
     * * `tertiary`&mdash; Applies coloring based on the `tertiary` theme color.
     * * `inherit`&mdash; Applies inherited coloring value.
     * * `info`&mdash;Applies coloring based on the `info` theme color.
     * * `success`&mdash; Applies coloring based on the `success` theme color.
     * * `warning`&mdash; Applies coloring based on the `warning` theme color.
     * * `error`&mdash; Applies coloring based on the `error` theme color.
     * * `dark`&mdash; Applies coloring based on the `dark` theme color.
     * * `light`&mdash; Applies coloring based on the `light` theme color.
     * * `inverse`&mdash; Applies coloring based on the `inverse` theme color.
     *
     */
    set themeColor(themeColor) {
        this.handleClasses(themeColor, 'themeColor');
        this._themeColor = themeColor;
    }
    get themeColor() {
        return this._themeColor;
    }
    /**
     * Specifies the size of the FloatingActionButton
     * ([see example]({% slug appearance_floatingactionbutton %}#toc-size)).
     *
     * The possible values are:
     * * `small`
     * * `medium` (Default)
     * * `large`
     *
     */
    set size(size) {
        this.handleClasses(size, 'size');
        this._size = size;
    }
    get size() {
        return this._size;
    }
    /**
     * Specifies the shape of the FloatingActionButton
     * ([see example]({% slug appearance_floatingactionbutton %}#toc-shape)).
     *
     * The possible values are:
     * * `pill` (Default)&mdash;Applies border radius equal to half of the height of the FloatingActionButton.
     * * `circle`&mdash;Applies circle shape on the FloatingActionButton.
     * * `rectangle`&mdash;Applies rectangular shape on the FloatingActionButton.
     * * `rounded`&mdash;Applies rounded shape on the FloatingActionButton.
     * * `square`&mdash;Applies square shape on the FloatingActionButton.
     *
     */
    set shape(shape) {
        this.handleClasses(shape, 'shape');
        this._shape = shape;
    }
    get shape() {
        return this._shape;
    }
    /**
     * Specifies whether the FloatingActionButton is disabled.
     */
    set disabled(disabled) {
        this._disabled = disabled;
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * Specifies the horizontal and vertical alignment of the FloatingActionButton
     * ([see example]({% slug positioning_floatingactionbutton %}#toc-align)).
     *
     * The possible values are:
     * * `{ horizontal: 'start'|'center'|'end', vertical: 'top'|'middle'|'bottom' }`
     *
     * The default value is:
     * * `{ horizontal: 'end', vertical: 'bottom' }`
     *
     */
    set align(align) {
        this._align = Object.assign(this._align, align);
    }
    get align() {
        return this._align;
    }
    /**
     * Specifies the horizontal and vertical offset position of the FloatingActionButton
     * ([see example]({% slug positioning_floatingactionbutton %}#toc-offset)).
     *
     * * The default value is:
     * * `{ x: '16px', y: '16px' }`
     */
    set offset(offset) {
        this._offset = Object.assign(this._offset, offset);
        this.offsetStyles();
    }
    get offset() {
        return this._offset;
    }
    /**
     * @hidden
     */
    get componentTabIndex() {
        return this.disabled ? (-1) : this.tabIndex;
    }
    ngAfterViewInit() {
        this.applyClasses();
        this.offsetStyles();
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    /**
     * Indicates whether the FloatingActionButton is currently open.
     */
    get isOpen() { return isPresent(this.popupRef); }
    /**
     * Focuses the FloatingActionButton.
     */
    focus() {
        if (isDocumentAvailable()) {
            this.button.nativeElement.focus();
        }
    }
    /**
     * Blurs the FloatingActionButton.
     */
    blur() {
        if (isDocumentAvailable()) {
            this.button.nativeElement.blur();
        }
    }
    /**
     * Toggles the visibility of the FloatingActionButton dial items popup.
     *
     * If you use the `toggleDial` method to open or close the dial items,
     * the `open` and `close` events do not fire ([more information and examples]({% slug openstate_floatingactionbutton %}#toc-events)).
     *
     * @param open - The state of dial items popup.
     */
    toggleDial(open) {
        if (this.disabled || !this.hasDialItems) {
            return;
        }
        const shouldOpen = isPresent(open) ? open : !this.isOpen;
        if (this.disabled || shouldOpen === this.isOpen) {
            return;
        }
        shouldOpen ? setTimeout(() => this.openDial()) : this.closeDial();
    }
    /**
     * @hidden
     */
    get role() {
        return (this.dialItems && this.dialItems.length) ? 'menubutton' : 'button';
    }
    /**
     * @hidden
     */
    get ariaExpanded() {
        return isPresent(this.isOpen);
    }
    /**
     * @hidden
     */
    get ariaHasPopup() {
        return isPresent(this.isOpen);
    }
    /**
     * @hidden
     */
    get iconClasses() {
        const classes = [];
        if (this.iconClass) {
            classes.push(`${this.iconClass}`);
        }
        if (this.icon) {
            classes.push(`k-fab-icon k-icon k-i-${this.icon}`);
        }
        return classes;
    }
    /**
     * @hidden
     */
    clickHandler() {
        if (this.disabled || !this.hasDialItems) {
            return;
        }
        this.ngZone.run(() => {
            const shouldOpen = !this.isOpen;
            this.toggleDialWithEvents(shouldOpen);
        });
    }
    /**
     * @hidden
     */
    keyDownHandler(event) {
        this.keyHandler(event);
    }
    /**
     * @hidden
     */
    keyHandler(event, keyEvent) {
        if (this.disabled) {
            return;
        }
        const focused = this.focusService.focused || 0;
        const keyCode = event.keyCode;
        const action = this.navigationService.process({
            altKey: event.altKey,
            current: focused,
            keyCode,
            keyEvent: keyEvent,
            max: this.dialItems ? this.dialItems.length - 1 : 0,
            min: 0,
            flipNavigation: this.align.vertical === 'bottom'
        });
        if (action !== NavigationAction.Undefined &&
            action !== NavigationAction.Tab) {
            event.preventDefault();
        }
    }
    /**
     * @hidden
     */
    onItemClick(event) {
        const item = closest(event.target, '.k-fab-item');
        if (!item) {
            return;
        }
        const index = item.getAttribute('data-fab-item-index');
        this.emitItemClick(index);
    }
    /**
     * @hidden
     */
    focusHandler() {
        if (!this.disabled) {
            this.onFocus.emit();
        }
    }
    /**
     * @hidden
     */
    blurHandler() {
        this.onBlur.emit();
        this.toggleDialWithEvents(false);
    }
    handleClasses(inputValue, input) {
        if (isPresent(this.button) && (this[input] !== inputValue)) {
            const button = this.button.nativeElement;
            const classesToRemove = {
                themeColor: `k-fab-${this.themeColor}`,
                size: SIZE_CLASSES[this.size],
                shape: SHAPE_CLASSES[this.shape]
            };
            const classesToAdd = {
                themeColor: `k-fab-${inputValue}`,
                size: SIZE_CLASSES[inputValue],
                shape: SHAPE_CLASSES[inputValue]
            };
            this.renderer.removeClass(button, classesToRemove[input]);
            this.renderer.addClass(button, classesToAdd[input]);
        }
    }
    onEnterPressed() {
        const index = this.focusService.focused;
        this.emitItemClick(index);
    }
    emitItemClick(index) {
        const item = this.dialItems[index];
        if (item && !item.disabled) {
            const clickEventArgs = { item: item, index: index };
            this.dialItemClick.emit(clickEventArgs);
            this.toggleDialWithEvents(false);
        }
    }
    subscribeNavigationEvents() {
        this.subscriptions.add(this.navigationService.navigate.subscribe(this.onArrowKeyNavigate.bind(this)));
        this.subscriptions.add(this.navigationService.enter.subscribe(this.onNavigationEnterPress.bind(this)));
        this.subscriptions.add(merge(this.navigationService.close, this.navigationService.esc).subscribe(this.onNavigationClose.bind(this)));
    }
    onArrowKeyNavigate(index) {
        this.focusService.focus(index);
    }
    onNavigationEnterPress() {
        this.ngZone.run(() => {
            if (this.isOpen) {
                let focusedIndex = this.focusService.focused;
                const focusedItem = this.dialItems[focusedIndex];
                if (focusedItem && focusedItem.disabled) {
                    return;
                }
                if (isPresent(focusedIndex) && focusedIndex !== -1) {
                    this.onEnterPressed();
                    return;
                }
            }
            if (!this.isOpen && isDocumentAvailable()) {
                this.toggleDialWithEvents(true);
                this.button.nativeElement.focus();
            }
        });
    }
    onNavigationClose() {
        if (this.isOpen) {
            this.ngZone.run(() => {
                this.toggleDialWithEvents(false);
                if (isDocumentAvailable()) {
                    this.button.nativeElement.focus();
                }
            });
        }
    }
    alignClass() {
        return `k-pos-${this.align.vertical}-${this.align.horizontal}`;
    }
    applyClasses() {
        const hostElement = this.element.nativeElement;
        const button = this.button.nativeElement;
        this.renderer.addClass(button, SHAPE_CLASSES[this.shape]);
        this.renderer.addClass(button, `k-fab-${this.themeColor}`);
        this.renderer.addClass(button, SIZE_CLASSES[this.size]);
        this.renderer.addClass(hostElement, this.alignClass());
    }
    toggleDialWithEvents(open) {
        if (open === this.isOpen) {
            return;
        }
        const event = new PreventableEvent();
        open ? this.open.emit(event) : this.close.emit(event);
        if (event.isDefaultPrevented()) {
            return;
        }
        open ? this.openDial() : this.closeDial();
    }
    openPopup() {
        if (this.isOpen) {
            return;
        }
        const isIconFab = this.icon && !this.text;
        const rtl = this.rtl;
        const align = this.align;
        this.popupRef = this.popupService.open({
            anchor: this.element.nativeElement,
            animate: false,
            content: this.popupTemplate,
            anchorAlign: getAnchorAlign(align, rtl),
            popupAlign: getPopupAlign(align, rtl),
            popupClass: 'k-fab-popup k-popup-transparent'
        });
        const popupElement = this.popupRef.popupElement;
        this.renderer.setStyle(popupElement, 'box-shadow', 'none');
        if (isIconFab) {
            this.subscriptions.add(this.popupRef.popupOpen.subscribe(() => this.positionPopup()));
        }
        this.ngZone.runOutsideAngular(() => {
            this.popupMouseDownListener = this.renderer.listen(popupElement, 'mousedown', (event) => {
                event.preventDefault();
            });
        });
        this.popupRef.popupAnchorViewportLeave.subscribe(() => this.toggleDialWithEvents(false));
    }
    closePopup() {
        if (this.isOpen) {
            if (this.popupMouseDownListener) {
                this.popupMouseDownListener();
            }
            this.popupRef.close();
            this.popupRef = null;
        }
    }
    openDial() {
        this.openPopup();
        this.focusService.focus(0);
        if (this.dialItemAnimation && this.isValidAnimation()) {
            this.playAnimation(true);
        }
    }
    closeDial() {
        if (this.dialItemAnimation && this.isValidAnimation()) {
            this.playAnimation(false);
            this.animationEnd.pipe(take(1)).subscribe(() => this.closePopup());
        }
        else {
            this.closePopup();
        }
    }
    isValidAnimation() {
        const animation = this.dialItemAnimation;
        if (typeof animation !== 'boolean') {
            return animation.duration !== 0;
        }
        return true;
    }
    positionPopup() {
        if (this.dialItemTemplate) {
            return;
        }
        const fab = this.element.nativeElement;
        const fabWidth = fab.getBoundingClientRect().width;
        const popupEl = this.popupRef.popupElement;
        const icon = popupEl.querySelector('.k-fab-item-icon');
        if (!icon) {
            return;
        }
        const iconWidth = icon.getBoundingClientRect().width;
        const left = (fabWidth / 2) - (iconWidth / 2);
        const popupLeft = popupEl.getBoundingClientRect().left;
        const isEndAlign = this.align.horizontal === 'end';
        const leftValue = isEndAlign ? (popupLeft - left) : (left + popupLeft);
        const rtlLeftValue = isEndAlign ? (left + popupLeft) : (popupLeft - left);
        popupEl.style.left = this.rtl ? `${rtlLeftValue}px` : `${leftValue}px`;
    }
    offsetStyles() {
        const hostElement = this.element.nativeElement;
        this.renderer.setStyle(hostElement, this.horizontalPosition, this.horizontalOffset);
        this.renderer.setStyle(hostElement, this.verticalPosition, this.verticalOffset);
    }
    get hasDialItems() {
        return isPresent(this.dialItems) && this.dialItems.length !== 0;
    }
    /**
     * Gets the CSS prop name of the selected vertical position (`top`/`bottom`);
     */
    get verticalPosition() {
        return {
            top: 'top',
            middle: 'top',
            bottom: 'bottom'
        }[this.align.vertical];
    }
    /**
     * Gets the offset according to the selected vertical position.
     */
    get verticalOffset() {
        if (this.align.vertical === 'middle') {
            return this.offset.y === DEFAULT_OFFSET ? '50%' : `calc(50% + ${this.offset.y})`;
        }
        return this.offset.y;
    }
    /**
     * Gets the CSS prop name of the selected horizontal position (`left`/`right`);
     */
    get horizontalPosition() {
        const { horizontal } = this.align;
        return {
            end: this.rtl ? 'left' : 'right',
            center: 'left',
            start: this.rtl ? 'right' : 'left'
        }[horizontal];
    }
    /**
     * Gets the offset according to the selected horizontal position.
     */
    get horizontalOffset() {
        if (this.align.horizontal === 'center') {
            return this.offset.x === DEFAULT_OFFSET ? '50%' : `calc(50% + ${this.offset.x})`;
        }
        return this.offset.x;
    }
    playerFor(element, animation) {
        const factory = this.builder.build(animation);
        return factory.create(element);
    }
    playAnimation(open) {
        const durationSettings = this.durationSettings();
        const animationSettings = {
            duration: durationSettings.duration,
            gap: durationSettings.gap,
            align: this.align
        };
        const animation = open ? openAnimation(animationSettings) : closeAnimation(animationSettings);
        let player = this.playerFor(this.popupRef.popupElement, animation);
        player.play();
        player.onDone(() => {
            if (player) {
                this.animationEnd.emit();
                player.destroy();
                player = null;
            }
        });
    }
    durationSettings() {
        return {
            duration: this.animationDuration(),
            gap: this.animationGap()
        };
    }
    animationGap() {
        const animation = this.dialItemAnimation;
        if (typeof animation !== 'boolean' && isPresent(animation.gap)) {
            return animation.gap;
        }
        return DEFAULT_ITEM_GAP;
    }
    animationDuration() {
        const animation = this.dialItemAnimation;
        if (typeof animation !== 'boolean' && isPresent(animation.duration)) {
            return animation.duration;
        }
        return DEFAULT_DURATION;
    }
};
FloatingActionButtonComponent.ɵfac = function FloatingActionButtonComponent_Factory(t) { return new (t || FloatingActionButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusService), ɵngcc0.ɵɵdirectiveInject(NavigationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.PopupService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AnimationBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService)); };
FloatingActionButtonComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FloatingActionButtonComponent, selectors: [["kendo-floatingactionbutton"]], contentQueries: function FloatingActionButtonComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DialItemTemplateDirective, 7);
        ɵngcc0.ɵɵcontentQuery(dirIndex, FloatingActionButtonTemplateDirective, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dialItemTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fabTemplate = _t.first);
    } }, viewQuery: function FloatingActionButtonComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c4, 7);
        ɵngcc0.ɵɵviewQuery(_c6, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.button = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.popupTemplate = _t.first);
    } }, hostVars: 5, hostBindings: function FloatingActionButtonComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("dir", ctx.direction);
        ɵngcc0.ɵɵclassProp("k-pos-fixed", ctx.fixedClass)("k-pos-absolute", ctx.absoluteClass);
    } }, inputs: { positionMode: "positionMode", dialItemAnimation: "dialItemAnimation", tabIndex: "tabIndex", dialItems: "dialItems", themeColor: "themeColor", size: "size", shape: "shape", disabled: "disabled", align: "align", offset: "offset", icon: "icon", iconClass: "iconClass", buttonClass: "buttonClass", dialClass: "dialClass", text: "text" }, outputs: { onBlur: "blur", onFocus: "focus", dialItemClick: "dialItemClick", open: "open", close: "close" }, features: [ɵngcc0.ɵɵProvidersFeature([
            FocusService,
            NavigationService,
            NAVIGATION_SETTINGS_PROVIDER$2,
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.floatingactionbutton'
            }
        ])], decls: 6, vars: 19, consts: [["type", "button", 3, "tabIndex", "ngClass", "disabled", "kendoEventsOutsideAngular", "scope", "focus", "blur"], ["button", ""], [4, "ngIf"], ["popupTemplate", ""], [3, "ngTemplateOutlet"], [3, "ngClass", 4, "ngIf"], ["class", "k-fab-text", 4, "ngIf"], [3, "ngClass"], [1, "k-fab-text"], ["kendoDialList", "", 3, "ngClass", "dialItems", "dialItemTemplate", "align", "click"]], template: function FloatingActionButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0, 1);
        ɵngcc0.ɵɵlistener("focus", function FloatingActionButtonComponent_Template_button_focus_0_listener() { return ctx.focusHandler(); })("blur", function FloatingActionButtonComponent_Template_button_blur_0_listener() { return ctx.blurHandler(); });
        ɵngcc0.ɵɵtemplate(2, FloatingActionButtonComponent_2_Template, 1, 1, undefined, 2);
        ɵngcc0.ɵɵtemplate(3, FloatingActionButtonComponent_ng_container_3_Template, 3, 2, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, FloatingActionButtonComponent_ng_template_4_Template, 1, 5, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-fab", true)("k-state-disabled", ctx.disabled);
        ɵngcc0.ɵɵproperty("tabIndex", ctx.componentTabIndex)("ngClass", ctx.buttonClass)("disabled", ctx.disabled)("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction2(16, _c10, ctx.keyDownHandler, ctx.clickHandler))("scope", ctx);
        ɵngcc0.ɵɵattribute("id", ctx.id)("role", ctx.role)("aria-disabled", ctx.disabled)("aria-expanded", ctx.ariaExpanded)("aria-haspopup", ctx.ariaHasPopup);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.fabTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.fabTemplate);
    } }, directives: function () { return [ɵngcc2.NgClass, ɵngcc5.EventsOutsideAngularDirective, ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet, DialListComponent]; }, encapsulation: 2 });
__decorate([
    HostBinding('class.k-pos-fixed'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], FloatingActionButtonComponent.prototype, "fixedClass", null);
__decorate([
    HostBinding('class.k-pos-absolute'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], FloatingActionButtonComponent.prototype, "absoluteClass", null);
__decorate([
    HostBinding('attr.dir'),
    __metadata("design:type", String)
], FloatingActionButtonComponent.prototype, "direction", void 0);
__decorate([
    ViewChild('button', { static: true }),
    __metadata("design:type", ElementRef)
], FloatingActionButtonComponent.prototype, "button", void 0);
__decorate([
    ViewChild('popupTemplate', { static: true }),
    __metadata("design:type", TemplateRef)
], FloatingActionButtonComponent.prototype, "popupTemplate", void 0);
__decorate([
    ContentChild(DialItemTemplateDirective, { static: true }),
    __metadata("design:type", DialItemTemplateDirective)
], FloatingActionButtonComponent.prototype, "dialItemTemplate", void 0);
__decorate([
    ContentChild(FloatingActionButtonTemplateDirective, { static: true }),
    __metadata("design:type", FloatingActionButtonTemplateDirective)
], FloatingActionButtonComponent.prototype, "fabTemplate", void 0);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], FloatingActionButtonComponent.prototype, "themeColor", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], FloatingActionButtonComponent.prototype, "size", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], FloatingActionButtonComponent.prototype, "shape", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], FloatingActionButtonComponent.prototype, "disabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], FloatingActionButtonComponent.prototype, "align", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], FloatingActionButtonComponent.prototype, "offset", null);
__decorate([
    Input(),
    __metadata("design:type", String)
], FloatingActionButtonComponent.prototype, "positionMode", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FloatingActionButtonComponent.prototype, "icon", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FloatingActionButtonComponent.prototype, "iconClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FloatingActionButtonComponent.prototype, "buttonClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FloatingActionButtonComponent.prototype, "dialClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FloatingActionButtonComponent.prototype, "text", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FloatingActionButtonComponent.prototype, "dialItemAnimation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], FloatingActionButtonComponent.prototype, "tabIndex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], FloatingActionButtonComponent.prototype, "dialItems", void 0);
__decorate([
    Output('blur'),
    __metadata("design:type", EventEmitter)
], FloatingActionButtonComponent.prototype, "onBlur", void 0);
__decorate([
    Output('focus'),
    __metadata("design:type", EventEmitter)
], FloatingActionButtonComponent.prototype, "onFocus", void 0);
__decorate([
    Output('dialItemClick'),
    __metadata("design:type", EventEmitter)
], FloatingActionButtonComponent.prototype, "dialItemClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], FloatingActionButtonComponent.prototype, "open", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], FloatingActionButtonComponent.prototype, "close", void 0);
FloatingActionButtonComponent = __decorate([ __metadata("design:paramtypes", [Renderer2,
        ElementRef,
        FocusService,
        NavigationService,
        NgZone,
        PopupService,
        AnimationBuilder,
        LocalizationService])
], FloatingActionButtonComponent);

/**
 * @hidden
 */
let DialListComponent = class DialListComponent {
    constructor(focusService, cdr) {
        this.focusService = focusService;
        this.cdr = cdr;
        this.hostClass = true;
        this.subscriptions = new Subscription();
        this.subscriptions.add(this.focusService.onFocus.subscribe(() => this.cdr.detectChanges()));
    }
    get bottomClass() {
        return this.align.vertical === 'top' || this.align.vertical === 'middle';
    }
    get topClass() {
        return this.align.vertical === 'bottom';
    }
    isFocused(index) {
        return this.focusService.isFocused(index);
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
};
DialListComponent.ɵfac = function DialListComponent_Factory(t) { return new (t || DialListComponent)(ɵngcc0.ɵɵdirectiveInject(FocusService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
DialListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DialListComponent, selectors: [["", "kendoDialList", ""]], hostVars: 6, hostBindings: function DialListComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-fab-items", ctx.hostClass)("k-fab-items-bottom", ctx.bottomClass)("k-fab-items-top", ctx.topClass);
    } }, inputs: { dialItems: "dialItems", dialItemTemplate: "dialItemTemplate", align: "align" }, attrs: _c11, decls: 1, vars: 1, consts: [[4, "ngFor", "ngForOf"], ["kendoButtonFocusable", "", "kendoDialItem", "", 3, "item", "index", "dialItemTemplate", "isFocused", "ngClass", "ngStyle", "align"]], template: function DialListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, DialListComponent_ng_container_0_Template, 2, 7, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.dialItems);
    } }, directives: function () { return [ɵngcc2.NgForOf, FocusableDirective, DialItemComponent, ɵngcc2.NgClass, ɵngcc2.NgStyle]; }, encapsulation: 2 });
__decorate([
    HostBinding('class.k-fab-items'),
    __metadata("design:type", Boolean)
], DialListComponent.prototype, "hostClass", void 0);
__decorate([
    HostBinding('class.k-fab-items-bottom'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], DialListComponent.prototype, "bottomClass", null);
__decorate([
    HostBinding('class.k-fab-items-top'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], DialListComponent.prototype, "topClass", null);
__decorate([
    Input(),
    __metadata("design:type", Array)
], DialListComponent.prototype, "dialItems", void 0);
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], DialListComponent.prototype, "dialItemTemplate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DialListComponent.prototype, "align", void 0);
DialListComponent = __decorate([ __metadata("design:paramtypes", [FocusService, ChangeDetectorRef])
], DialListComponent);

/**
 * @hidden
 */
let DialItemComponent = class DialItemComponent {
    constructor(element, renderer, localisationService) {
        this.element = element;
        this.renderer = renderer;
        this.localisationService = localisationService;
        this.hostClass = true;
        this.role = 'menuitem';
    }
    get disabledClass() {
        return this.item.disabled;
    }
    get title() {
        const label = this.item.label;
        return label ? label : this.itemTitle;
    }
    get indexAttr() {
        return this.index;
    }
    get iconClasses() {
        const classes = [];
        if (this.item.iconClass) {
            classes.push(`${this.item.iconClass}`);
        }
        if (this.item.icon) {
            classes.push(`k-fab-item-icon k-icon k-i-${this.item.icon}`);
        }
        return classes;
    }
    get itemTitle() {
        const icon = this.item.icon;
        const itemTitle = this.item.itemTitle;
        return (icon && itemTitle) ? itemTitle : icon;
    }
    ngAfterViewInit() {
        const element = this.element.nativeElement;
        const rtl = this.localisationService.rtl;
        const hAlign = this.align.horizontal;
        this.renderer.addClass(element, this.getTextDirectionClass(rtl, hAlign));
    }
    getTextDirectionClass(rtl, hAlign) {
        const dir = rtl ? 'rtl' : 'ltr';
        const align = hAlign === 'end' ? 'end' : 'start';
        const directions = {
            rtl: { end: 'k-text-left', start: 'k-text-right' },
            ltr: { start: 'k-text-left', end: 'k-text-right' }
        };
        return directions[dir][align];
    }
};
DialItemComponent.ɵfac = function DialItemComponent_Factory(t) { return new (t || DialItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService)); };
DialItemComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DialItemComponent, selectors: [["", "kendoDialItem", ""]], hostVars: 9, hostBindings: function DialItemComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role)("aria-disabled", ctx.disabledClass)("title", ctx.title)("aria-label", ctx.title)("data-fab-item-index", ctx.indexAttr);
        ɵngcc0.ɵɵclassProp("k-fab-item", ctx.hostClass)("k-state-disabled", ctx.disabledClass);
    } }, inputs: { cssClass: "cssClass", cssStyle: "cssStyle", isFocused: "isFocused", index: "index", item: "item", dialItemTemplate: "dialItemTemplate", align: "align" }, attrs: _c12, decls: 2, vars: 2, consts: [[4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "k-fab-item-text", 4, "ngIf"], [3, "ngClass", 4, "ngIf"], [1, "k-fab-item-text"], [3, "ngClass"]], template: function DialItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, DialItemComponent_0_Template, 1, 6, undefined, 0);
        ɵngcc0.ɵɵtemplate(1, DialItemComponent_ng_container_1_Template, 3, 2, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.dialItemTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.dialItemTemplate);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet, ɵngcc2.NgClass], encapsulation: 2 });
__decorate([
    HostBinding('class.k-fab-item'),
    __metadata("design:type", Boolean)
], DialItemComponent.prototype, "hostClass", void 0);
__decorate([
    HostBinding('attr.role'),
    __metadata("design:type", String)
], DialItemComponent.prototype, "role", void 0);
__decorate([
    HostBinding('attr.aria-disabled'),
    HostBinding('class.k-state-disabled'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], DialItemComponent.prototype, "disabledClass", null);
__decorate([
    HostBinding('attr.title'),
    HostBinding('attr.aria-label'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], DialItemComponent.prototype, "title", null);
__decorate([
    HostBinding('attr.data-fab-item-index'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], DialItemComponent.prototype, "indexAttr", null);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DialItemComponent.prototype, "cssClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DialItemComponent.prototype, "cssStyle", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DialItemComponent.prototype, "isFocused", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DialItemComponent.prototype, "index", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DialItemComponent.prototype, "item", void 0);
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], DialItemComponent.prototype, "dialItemTemplate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DialItemComponent.prototype, "align", void 0);
DialItemComponent = __decorate([ __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        LocalizationService])
], DialItemComponent);

const exportedModules$1 = [
    FloatingActionButtonComponent,
    DialItemTemplateDirective,
    FloatingActionButtonTemplateDirective
];
const declarations$1 = [
    ...exportedModules$1,
    DialListComponent,
    DialItemComponent
];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the FloatingActionButton component.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the FloatingActionButton module
 * import { FloatingActionButtonModule } from '@progress/kendo-angular-buttons';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, FloatingActionButtonModule], // import FloatingActionButton module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * ```
 */
let FloatingActionButtonModule = class FloatingActionButtonModule {
};
FloatingActionButtonModule.ɵfac = function FloatingActionButtonModule_Factory(t) { return new (t || FloatingActionButtonModule)(); };
FloatingActionButtonModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: FloatingActionButtonModule });
FloatingActionButtonModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, PopupModule, ListModule, EventsModule]] });

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmodules'] }})
 * definition for the Buttons components.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the Buttons module
 * import { ButtonsModule } from '@progress/kendo-angular-buttons';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, ButtonsModule], // import Buttons module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
let ButtonsModule = class ButtonsModule {
};
ButtonsModule.ɵfac = function ButtonsModule_Factory(t) { return new (t || ButtonsModule)(); };
ButtonsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ButtonsModule });
ButtonsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [ButtonGroupModule, ButtonModule, SplitButtonModule, DropDownButtonModule, ChipModule, FloatingActionButtonModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(KendoButtonService, [{
        type: Injectable
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ButtonDirective, [{
        type: Directive,
        args: [{
                exportAs: 'kendoButton',
                providers: [
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.button'
                    }
                ],
                selector: 'button[kendoButton], span[kendoButton]' // tslint:disable-line
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: KendoButtonService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc1.LocalizationService }, { type: ɵngcc0.NgZone }]; }, { toggleable: [{
            type: Input
        }], primary: [{
            type: Input
        }], look: [{
            type: Input
        }], role: [{
            type: Input
        }], selectedChange: [{
            type: Output
        }], click: [{
            type: Output
        }], togglable: [{
            type: Input
        }], selected: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }], icon: [{
            type: Input
        }], iconClass: [{
            type: Input
        }], imageUrl: [{
            type: Input
        }], disabled: [{
            type: Input
        }], classButton: [{
            type: HostBinding,
            args: ['class.k-button']
        }], classPrimary: [{
            type: HostBinding,
            args: ['class.k-primary']
        }], isToggleable: [{
            type: HostBinding,
            args: ['class.k-toggle-button']
        }], isFlat: [{
            type: HostBinding,
            args: ['class.k-flat']
        }], isBare: [{
            type: HostBinding,
            args: ['class.k-bare']
        }], isOutline: [{
            type: HostBinding,
            args: ['class.k-outline']
        }], isClear: [{
            type: HostBinding,
            args: ['class.k-button-clear']
        }], roleSetter: [{
            type: HostBinding,
            args: ['attr.role']
        }], classDisabled: [{
            type: HostBinding,
            args: ['attr.aria-disabled']
        }, {
            type: HostBinding,
            args: ['class.k-state-disabled']
        }], classActive: [{
            type: HostBinding,
            args: ['class.k-state-selected']
        }], getDirection: [{
            type: HostBinding,
            args: ['attr.dir']
        }], 
    /**
     * @hidden
     */
    onFocus: [{
            type: HostListener,
            args: ['focus']
        }], 
    /**
     * @hidden
     */
    onBlur: [{
            type: HostListener,
            args: ['blur']
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ButtonGroupComponent, [{
        type: Component,
        args: [{
                exportAs: 'kendoButtonGroup',
                providers: [
                    KendoButtonService,
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.buttongroup'
                    }
                ],
                selector: 'kendo-buttongroup',
                template: `
        <ng-content select="[kendoButton]"></ng-content>
    `
            }]
    }], function () { return [{ type: KendoButtonService }, { type: ɵngcc1.LocalizationService }, { type: ɵngcc0.ElementRef }]; }, { selection: [{
            type: Input,
            args: ['selection']
        }], look: [{
            type: Input
        }], navigate: [{
            type: Output
        }], tabIndex: [{
            type: Input
        }], wrapperClass: [{
            type: HostBinding,
            args: ['class.k-button-group']
        }], disabledClass: [{
            type: HostBinding,
            args: ['class.k-state-disabled']
        }], stretchedClass: [{
            type: HostBinding,
            args: ['class.k-button-group-stretched']
        }], isFlat: [{
            type: HostBinding,
            args: ['class.k-button-group-flat']
        }], isBare: [{
            type: HostBinding,
            args: ['class.k-button-group-bare']
        }], isOutline: [{
            type: HostBinding,
            args: ['class.k-button-group-outline']
        }], getRole: [{
            type: HostBinding,
            args: ['attr.role']
        }], dir: [{
            type: HostBinding,
            args: ['attr.dir']
        }], ariaDisabled: [{
            type: HostBinding,
            args: ['attr.aria-disabled']
        }], wrapperWidth: [{
            type: HostBinding,
            args: ['style.width']
        }], wrapperTabIndex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], 
    /**
     * @hidden
     */
    keydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], 
    /**
     * @hidden
     */
    onFocus: [{
            type: HostListener,
            args: ['focus']
        }], 
    /**
     * @hidden
     */
    focusout: [{
            type: HostListener,
            args: ['focusout', ['$event']]
        }], disabled: [{
            type: Input,
            args: ['disabled']
        }], width: [{
            type: Input,
            args: ['width']
        }], buttons: [{
            type: ContentChildren,
            args: [ButtonDirective]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ButtonModule, [{
        type: NgModule,
        args: [{
                declarations: [ButtonDirective],
                exports: [ButtonDirective]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ButtonModule, { declarations: [ButtonDirective], exports: [ButtonDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ButtonGroupModule, [{
        type: NgModule,
        args: [{
                declarations: [ButtonGroupComponent],
                exports: [ButtonGroupComponent],
                imports: [CommonModule, ButtonModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ButtonGroupModule, { declarations: function () { return [ButtonGroupComponent]; }, imports: function () { return [CommonModule, ButtonModule]; }, exports: function () { return [ButtonGroupComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ButtonItemTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoDropDownButtonItemTemplate],[kendoSplitButtonItemTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-button-list',
                template: `
        <ul class="k-list k-reset" unselectable="on">
            <li role="menuitem" unselectable="on" tabindex="-1"
                kendoButtonFocusable
                *ngFor="let dataItem of data; let index = index;"
                [index]="index"
                [ngClass]="{'k-item': true, 'k-state-disabled': dataItem.disabled}"
                (click)="onClick(index)"
                (blur)="onBlur()"
                [attr.aria-disabled]="dataItem.disabled ? true : false">
                <ng-template *ngIf="itemTemplate?.templateRef"
                    [templateContext]="{
                        templateRef: itemTemplate?.templateRef,
                        $implicit: dataItem
                    }">
                </ng-template>
                <ng-template [ngIf]="!itemTemplate?.templateRef">
                    <span
                        *ngIf="dataItem.icon || dataItem.iconClass"
                        [ngClass]="getIconClasses(dataItem)"
                    ></span>
                    <img
                        *ngIf="dataItem.imageUrl"
                        class="k-image"
                        [src]="dataItem.imageUrl"
                        alt=""
                    >
                    {{ getText(dataItem) }}
                </ng-template>
            </li>
        </ul>
      `
            }]
    }], function () { return []; }, { onItemClick: [{
            type: Output
        }], onItemBlur: [{
            type: Output
        }], data: [{
            type: Input
        }], textField: [{
            type: Input
        }], itemTemplate: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusService, [{
        type: Injectable
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusableDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoButtonFocusable]'
            }]
    }], function () { return [{ type: FocusService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { index: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TemplateContextDirective, [{
        type: Directive,
        args: [{
                selector: '[templateContext]' // tslint:disable-line:directive-selector
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, { templateContext: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListModule, [{
        type: NgModule,
        args: [{
                declarations: [EXPORTED_DIRECTIVES],
                exports: [EXPORTED_DIRECTIVES],
                imports: [CommonModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ListModule, { declarations: function () { return [ListComponent, FocusableDirective, ButtonItemTemplateDirective, TemplateContextDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ListComponent, FocusableDirective, ButtonItemTemplateDirective, TemplateContextDirective]; } }); })();

(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavigationService, [{
        type: Injectable
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [NAVIGATION_CONFIG]
            }] }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SplitButtonComponent, [{
        type: Component,
        args: [{
                exportAs: 'kendoSplitButton',
                providers: [
                    FocusService,
                    NavigationService,
                    NAVIGATION_SETTINGS_PROVIDER,
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.splitbutton'
                    }
                ],
                selector: 'kendo-splitbutton',
                template: `
        <button
            kendoButton
            #button
            role="listbox"
            [type]="type"
            [look]="look"
            [tabindex]="componentTabIndex"
            [disabled]="disabled"
            [icon]="icon"
            [class.k-state-active]="active"
            [iconClass]="iconClass"
            [imageUrl]="imageUrl"
            [ngClass]="buttonClass"
            (focus)="onButtonFocus()"
            (click)="onButtonClick()"
            (blur)="onButtonBlur()"
            (mousedown)="toggleButtonActiveState(true)"
            (mouseup)="toggleButtonActiveState(false)"
            [attr.aria-disabled]="disabled"
            [attr.aria-expanded]="openState"
            [attr.aria-haspopup]="true"
            [attr.aria-owns]="listId"
            [attr.aria-label]="ariaLabel"
        >
            {{ text }}<ng-content></ng-content>
        </button>
        <button
            kendoButton
            #arrowButton
            type="button"
            [class.k-state-active]="activeArrow"
            [disabled]="disabled"
            [icon]="arrowButtonIcon"
            [look]="look"
            [tabindex]="-1"
            [ngClass]="arrowButtonClass"
            (click)="onArrowButtonClick()"
            (mousedown)="toggleArrowButtonActiveState(true)"
            (mouseup)="toggleArrowButtonActiveState(false)"
        ></button>
        <ng-template #popupTemplate>
            <kendo-button-list
                [id]="listId"
                [data]="data"
                [textField]="textField"
                [itemTemplate]="itemTemplate"
                (onItemClick)="onItemClick($event)"
                (keydown)="keyDownHandler($event)"
                (keypress)="keyPressHandler($event)"
                (keyup)="keyUpHandler($event)"
                [attr.dir]="dir"
            >
            </kendo-button-list>
        </ng-template>
        <ng-container #container></ng-container>
    `
            }]
    }], function () { return [{ type: FocusService }, { type: NavigationService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.PopupService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.LocalizationService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { text: [{
            type: Input
        }], icon: [{
            type: Input
        }], iconClass: [{
            type: Input
        }], type: [{
            type: Input
        }], imageUrl: [{
            type: Input
        }], look: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }], arrowButtonIcon: [{
            type: Input
        }], buttonClick: [{
            type: Output
        }], itemClick: [{
            type: Output
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }], disabled: [{
            type: Input
        }], popupSettings: [{
            type: Input
        }], data: [{
            type: Input
        }], isFocused: [{
            type: HostBinding,
            args: ['class.k-state-focused']
        }], isFlat: [{
            type: HostBinding,
            args: ['class.k-flat']
        }], isOutline: [{
            type: HostBinding,
            args: ['class.k-outline']
        }], widgetClasses: [{
            type: HostBinding,
            args: ['class.k-split-button']
        }, {
            type: HostBinding,
            args: ['class.k-button-group']
        }], dir: [{
            type: HostBinding,
            args: ['attr.dir']
        }], 
    /**
     * @hidden
     */
    keydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], 
    /**
     * @hidden
     */
    keypress: [{
            type: HostListener,
            args: ['keypress', ['$event']]
        }], 
    /**
     * @hidden
     */
    keyup: [{
            type: HostListener,
            args: ['keyup', ['$event']]
        }], textField: [{
            type: Input
        }], buttonClass: [{
            type: Input
        }], arrowButtonClass: [{
            type: Input
        }], itemTemplate: [{
            type: ContentChild,
            args: [ButtonItemTemplateDirective, { static: false }]
        }], button: [{
            type: ViewChild,
            args: ['button', { static: true }]
        }], arrowButton: [{
            type: ViewChild,
            args: ['arrowButton', { static: true, read: ElementRef }]
        }], popupTemplate: [{
            type: ViewChild,
            args: ['popupTemplate', { static: true }]
        }], containerRef: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef, static: true }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SplitButtonModule, [{
        type: NgModule,
        args: [{
                declarations: [SplitButtonComponent],
                exports: [SplitButtonComponent, ListModule],
                imports: [CommonModule, PopupModule, ButtonModule, ListModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SplitButtonModule, { declarations: function () { return [SplitButtonComponent]; }, imports: function () { return [CommonModule, PopupModule, ButtonModule, ListModule]; }, exports: function () { return [SplitButtonComponent, ListModule]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropDownButtonComponent, [{
        type: Component,
        args: [{
                exportAs: 'kendoDropDownButton',
                providers: [
                    FocusService,
                    NavigationService,
                    NAVIGATION_SETTINGS_PROVIDER$1,
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.dropdownbutton'
                    }
                ],
                selector: 'kendo-dropdownbutton',
                template: `
        <button kendoButton #button
            role="menu"
            type="button"
            [tabindex]="componentTabIndex"
            [class.k-state-active]="active"
            [disabled]="disabled"
            [icon]="icon"
            [iconClass]="iconClass"
            [imageUrl]="imageUrl"
            [ngClass]="buttonClass"
            (click)="openPopup()"
            (focus)="handleFocus()"
            (blur)="onButtonBlur()"
            [attr.aria-disabled]="disabled"
            [attr.aria-expanded]="openState"
            [attr.aria-haspopup]="true"
            [attr.aria-owns]="listId"
            [look]="look"
            [primary]="primary"
            >
            <ng-content></ng-content>
        </button>
        <ng-template #popupTemplate>
            <kendo-button-list
                #buttonList
                [id]="listId"
                [data]="data"
                [textField]="textField"
                [itemTemplate]="itemTemplate"
                (onItemClick)="onItemClick($event)"
                (keydown)="keyDownHandler($event)"
                (keypress)="keyPressHandler($event)"
                (keyup)="keyUpHandler($event)"
                [attr.dir]="dir"
            >
            </kendo-button-list>
        </ng-template>
        <ng-container #container></ng-container>
    `
            }]
    }], function () { return [{ type: FocusService }, { type: NavigationService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.PopupService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.LocalizationService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { icon: [{
            type: Input
        }], iconClass: [{
            type: Input
        }], imageUrl: [{
            type: Input
        }], primary: [{
            type: Input
        }], look: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }], itemClick: [{
            type: Output
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], popupSettings: [{
            type: Input
        }], disabled: [{
            type: Input
        }], data: [{
            type: Input
        }], focused: [{
            type: HostBinding,
            args: ['class.k-state-focused']
        }], isFlat: [{
            type: HostBinding,
            args: ['class.k-flat']
        }], isOutline: [{
            type: HostBinding,
            args: ['class.k-outline']
        }], widgetClasses: [{
            type: HostBinding,
            args: ['class.k-dropdown-button']
        }], dir: [{
            type: HostBinding,
            args: ['attr.dir']
        }], 
    /**
     * @hidden
     */
    keydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], 
    /**
     * @hidden
     */
    keypress: [{
            type: HostListener,
            args: ['keypress', ['$event']]
        }], 
    /**
     * @hidden
     */
    keyup: [{
            type: HostListener,
            args: ['keyup', ['$event']]
        }], 
    /**
     * @hidden
     */
    mousedown: [{
            type: HostListener,
            args: ['mousedown', ['$event']]
        }], 
    /**
     * @hidden
     */
    mouseup: [{
            type: HostListener,
            args: ['mouseup', ['$event']]
        }], textField: [{
            type: Input
        }], buttonClass: [{
            type: Input
        }], itemTemplate: [{
            type: ContentChild,
            args: [ButtonItemTemplateDirective, { static: false }]
        }], button: [{
            type: ViewChild,
            args: ['button', { static: true }]
        }], buttonList: [{
            type: ViewChild,
            args: ['buttonList', { static: false }]
        }], popupTemplate: [{
            type: ViewChild,
            args: ['popupTemplate', { static: true }]
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef, static: true }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropDownButtonModule, [{
        type: NgModule,
        args: [{
                declarations: [DropDownButtonComponent],
                exports: [DropDownButtonComponent, ListModule],
                imports: [CommonModule, PopupModule, ListModule, ButtonModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DropDownButtonModule, { declarations: function () { return [DropDownButtonComponent]; }, imports: function () { return [CommonModule, PopupModule, ListModule, ButtonModule]; }, exports: function () { return [DropDownButtonComponent, ListModule]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChipComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-chip',
                template: `
        <span class="k-selected-icon-wrapper">
            <span *ngIf="selected"
                class="k-selected-icon"
                [ngClass]="selectedIconClasses"
            >
            </span>
        </span>

        <span *ngIf="icon || iconClass"
            class="k-chip-icon"
            [ngClass]="iconClasses"
        >
        </span>

        <span class="k-chip-content">
            <span class="k-chip-label" *ngIf="label">
                {{ label }}
            </span>
            <ng-content *ngIf="!label"></ng-content>
        </span>

        <span *ngIf="removable"
            class="k-remove-icon"
            (click)="onRemoveClick($event)"
        >
            <span [ngClass]="removeIconClasses"></span>
        </span>
    `,
                providers: [
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.chip'
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.LocalizationService }]; }, { look: [{
            type: Input
        }], selected: [{
            type: Input
        }], removable: [{
            type: Input
        }], type: [{
            type: Input
        }], disabled: [{
            type: Input
        }], remove: [{
            type: Output
        }], contentClick: [{
            type: Output
        }], tabIndex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], hostClass: [{
            type: HostBinding,
            args: ['class.k-chip']
        }], direction: [{
            type: HostBinding,
            args: ['attr.dir']
        }], outlineClass: [{
            type: HostBinding,
            args: ['class.k-chip-outline']
        }], filledClass: [{
            type: HostBinding,
            args: ['class.k-chip-filled']
        }], hasIconClass: [{
            type: HostBinding,
            args: ['class.k-chip-has-icon']
        }], disabledClass: [{
            type: HostBinding,
            args: ['class.k-chip-disabled']
        }], selectedClass: [{
            type: HostBinding,
            args: ['class.k-chip-selected']
        }], focusedClass: [{
            type: HostBinding,
            args: ['class.k-chip-focused']
        }], label: [{
            type: Input
        }], icon: [{
            type: Input
        }], iconClass: [{
            type: Input
        }], selectedIcon: [{
            type: Input
        }], removeIcon: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChipListComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-chip-list',
                template: `
        <ng-content></ng-content>
    `,
                providers: [
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.chip-list'
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc1.LocalizationService }]; }, { hostClass: [{
            type: HostBinding,
            args: ['class.k-chip-list']
        }], selection: [{
            type: Input
        }], selectedChange: [{
            type: Output
        }], remove: [{
            type: Output
        }], direction: [{
            type: HostBinding,
            args: ['attr.dir']
        }], single: [{
            type: HostBinding,
            args: ['class.k-selection-single']
        }], multiple: [{
            type: HostBinding,
            args: ['class.k-selection-multiple']
        }], 
    /**
     * @hidden
     */
    onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], chips: [{
            type: ContentChildren,
            args: [ChipComponent]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChipModule, [{
        type: NgModule,
        args: [{
                declarations: [declarations],
                exports: [exportedModules],
                imports: [CommonModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ChipModule, { declarations: function () { return [ChipComponent, ChipListComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ChipComponent, ChipListComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DialItemTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoDialItemTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef, decorators: [{
                type: Optional
            }] }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FloatingActionButtonTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoFloatingActionButtonTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef, decorators: [{
                type: Optional
            }] }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FloatingActionButtonComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-floatingactionbutton',
                providers: [
                    FocusService,
                    NavigationService,
                    NAVIGATION_SETTINGS_PROVIDER$2,
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.floatingactionbutton'
                    }
                ],
                template: `
        <button
            #button
            [attr.id]="id"
            [attr.role]="role"
            [tabIndex]="componentTabIndex"
            type="button"
            [class.k-fab]="true"
            [class.k-state-disabled]="disabled"
            [ngClass]="buttonClass"
            [disabled]="disabled"
            [attr.aria-disabled]="disabled"
            [attr.aria-expanded]="ariaExpanded"
            [attr.aria-haspopup]="ariaHasPopup"
            (focus)="focusHandler()"
            (blur)="blurHandler()"
            [kendoEventsOutsideAngular]="{
                keydown: keyDownHandler,
                click: clickHandler
            }"
            [scope]="this"
        >
            <ng-template *ngIf="fabTemplate"
                [ngTemplateOutlet]="fabTemplate?.templateRef"
            >
            </ng-template>

            <ng-container *ngIf="!fabTemplate">
                <span *ngIf="icon || iconClass" [ngClass]="iconClasses"></span>
                <span *ngIf="text" class="k-fab-text">{{ text }}</span>
            </ng-container>
        </button>

        <ng-template #popupTemplate>
            <ul
                kendoDialList
                [ngClass]="dialClass"
                [dialItems]="dialItems"
                [dialItemTemplate]='dialItemTemplate?.templateRef'
                [align]="align"
                [attr.aria-labelledby]="id"
                (click)="onItemClick($event)"
            >
            </ul>
        </ng-template>
    `
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: FocusService }, { type: NavigationService }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.PopupService }, { type: ɵngcc4.AnimationBuilder }, { type: ɵngcc1.LocalizationService }]; }, { positionMode: [{
            type: Input
        }], dialItemAnimation: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }], dialItems: [{
            type: Input
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], dialItemClick: [{
            type: Output,
            args: ['dialItemClick']
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }], direction: [{
            type: HostBinding,
            args: ['attr.dir']
        }], fixedClass: [{
            type: HostBinding,
            args: ['class.k-pos-fixed']
        }], absoluteClass: [{
            type: HostBinding,
            args: ['class.k-pos-absolute']
        }], themeColor: [{
            type: Input
        }], size: [{
            type: Input
        }], shape: [{
            type: Input
        }], disabled: [{
            type: Input
        }], align: [{
            type: Input
        }], offset: [{
            type: Input
        }], button: [{
            type: ViewChild,
            args: ['button', { static: true }]
        }], popupTemplate: [{
            type: ViewChild,
            args: ['popupTemplate', { static: true }]
        }], dialItemTemplate: [{
            type: ContentChild,
            args: [DialItemTemplateDirective, { static: true }]
        }], fabTemplate: [{
            type: ContentChild,
            args: [FloatingActionButtonTemplateDirective, { static: true }]
        }], icon: [{
            type: Input
        }], iconClass: [{
            type: Input
        }], buttonClass: [{
            type: Input
        }], dialClass: [{
            type: Input
        }], text: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DialListComponent, [{
        type: Component,
        args: [{
                selector: '[kendoDialList]',
                template: `
        <ng-container *ngFor='let item of dialItems; let idx = index'>
            <li
                kendoButtonFocusable
                kendoDialItem
                [item]="dialItems[idx]"
                [index]="idx"
                [dialItemTemplate]="dialItemTemplate"
                [isFocused]="isFocused(idx)"
                [ngClass]='item.cssClass'
                [ngStyle]='item.cssStyle'
                [align]="align"
            >
            </li>
        </ng-container>
    `
            }]
    }], function () { return [{ type: FocusService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { hostClass: [{
            type: HostBinding,
            args: ['class.k-fab-items']
        }], bottomClass: [{
            type: HostBinding,
            args: ['class.k-fab-items-bottom']
        }], topClass: [{
            type: HostBinding,
            args: ['class.k-fab-items-top']
        }], dialItems: [{
            type: Input
        }], dialItemTemplate: [{
            type: Input
        }], align: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DialItemComponent, [{
        type: Component,
        args: [{
                selector: '[kendoDialItem]',
                template: `
        <ng-template *ngIf="dialItemTemplate"
            [ngTemplateOutlet]="dialItemTemplate"
            [ngTemplateOutletContext]="{ $implicit: item, index: index, isFocused: isFocused }"
        >
        </ng-template>

        <ng-container *ngIf="!dialItemTemplate">
            <span *ngIf="item.label" class="k-fab-item-text">{{ item.label }}</span>
            <span *ngIf="item.icon || item.iconClass" [ngClass]="iconClasses"></span>
        </ng-container>
    `
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.LocalizationService }]; }, { hostClass: [{
            type: HostBinding,
            args: ['class.k-fab-item']
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }], disabledClass: [{
            type: HostBinding,
            args: ['attr.aria-disabled']
        }, {
            type: HostBinding,
            args: ['class.k-state-disabled']
        }], title: [{
            type: HostBinding,
            args: ['attr.title']
        }, {
            type: HostBinding,
            args: ['attr.aria-label']
        }], indexAttr: [{
            type: HostBinding,
            args: ['attr.data-fab-item-index']
        }], cssClass: [{
            type: Input
        }], cssStyle: [{
            type: Input
        }], isFocused: [{
            type: Input
        }], index: [{
            type: Input
        }], item: [{
            type: Input
        }], dialItemTemplate: [{
            type: Input
        }], align: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FloatingActionButtonModule, [{
        type: NgModule,
        args: [{
                declarations: [declarations$1],
                exports: [exportedModules$1],
                imports: [CommonModule, PopupModule, ListModule, EventsModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FloatingActionButtonModule, { declarations: function () { return [FloatingActionButtonComponent, DialItemTemplateDirective, FloatingActionButtonTemplateDirective, DialListComponent, DialItemComponent]; }, imports: function () { return [CommonModule, PopupModule, ListModule, EventsModule]; }, exports: function () { return [FloatingActionButtonComponent, DialItemTemplateDirective, FloatingActionButtonTemplateDirective]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ButtonsModule, [{
        type: NgModule,
        args: [{
                exports: [ButtonGroupModule, ButtonModule, SplitButtonModule, DropDownButtonModule, ChipModule, FloatingActionButtonModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ButtonsModule, { exports: [ButtonGroupModule, ButtonModule, SplitButtonModule, DropDownButtonModule, ChipModule, FloatingActionButtonModule] }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { KendoButtonService, DialItemComponent, DialListComponent, FocusService, FocusableDirective, ButtonItemTemplateDirective, ListButton, ListComponent, ListModule, TemplateContextDirective, NAVIGATION_CONFIG, NavigationService, ButtonDirective, ButtonDirective as Button, ButtonGroupComponent, ButtonGroupComponent as ButtonGroup, ButtonGroupModule, ButtonModule, ButtonsModule, SplitButtonComponent, SplitButtonComponent as SplitButton, SplitButtonModule, DropDownButtonComponent, DropDownButtonComponent as DropDownButton, DropDownButtonModule, ChipComponent, ChipListComponent, ChipModule, FloatingActionButtonModule, FloatingActionButtonComponent, FloatingActionButtonTemplateDirective, DialItemTemplateDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,