/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { ContentChild, Component, ElementRef, HostBinding, Input, Renderer2, ViewChild } from '@angular/core';
import { Subscription } from 'rxjs';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { KendoInput, guid } from '@progress/kendo-angular-common';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from '../package-metadata';
import { LabelDirective } from './../label.directive';
import { getWrappedNativeInput } from './../util';
/**
 * Represents the [Kendo UI Label component for Angular]({% slug label_basic %}).
 *
 * Associates a label with input elements or components.
 *
 * @example
 * ```ts
 *
 * _@Component({
 *   selector: 'my-app',
 *   template: `
 *     <kendo-label [for]="input" text="First name">
 *       <input [(ngModel)]="name" kendoTextBox #input />
 *     </kendo-label>
 *   `
 * })
 * class AppComponent {
 *     public name = 'John';
 * }
 *
 * ```
 */
var LabelComponent = /** @class */ (function () {
    function LabelComponent(elementRef, renderer, localization) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.localization = localization;
        this.subscriptions = new Subscription();
        validatePackage(packageMetadata);
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        this.renderer.removeAttribute(this.elementRef.nativeElement, 'id');
    }
    /**
     * @hidden
     */
    LabelComponent.prototype.ngAfterContentInit = function () {
        if (this.for) {
            this.control = this.for;
            return;
        }
        var wrappedNativeInput = getWrappedNativeInput(this.elementRef.nativeElement);
        if (wrappedNativeInput) {
            if (!wrappedNativeInput.hasAttribute('id')) {
                this.renderer.setAttribute(wrappedNativeInput, 'id', "k-" + guid());
            }
            this.control = wrappedNativeInput;
            return;
        }
        this.control = this.kendoInput;
    };
    /**
     * @hidden
     */
    LabelComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriptions.add(this.localization.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        }));
    };
    /**
     * @hidden
     */
    LabelComponent.prototype.ngAfterViewInit = function () {
        this.labelDirective.setAriaLabelledby();
    };
    /**
     * @hidden
     */
    LabelComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    };
    /**
     * @hidden
     */
    LabelComponent.prototype.textFor = function (key) {
        return this.localization.get(key);
    };
    tslib_1.__decorate([
        HostBinding('attr.dir'),
        tslib_1.__metadata("design:type", String)
    ], LabelComponent.prototype, "direction", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LabelComponent.prototype, "text", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], LabelComponent.prototype, "for", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], LabelComponent.prototype, "optional", void 0);
    tslib_1.__decorate([
        ViewChild(LabelDirective, { static: true }),
        tslib_1.__metadata("design:type", LabelDirective)
    ], LabelComponent.prototype, "labelDirective", void 0);
    tslib_1.__decorate([
        ContentChild(KendoInput, { static: true }),
        tslib_1.__metadata("design:type", Object)
    ], LabelComponent.prototype, "kendoInput", void 0);
    LabelComponent = tslib_1.__decorate([
        Component({
            selector: 'kendo-label',
            exportAs: 'kendoLabel',
            providers: [
                LocalizationService,
                {
                    provide: L10N_PREFIX,
                    useValue: 'kendo.label'
                }
            ],
            template: "\n        <ng-container kendoLabelLocalizedMessages\n            i18n-optional=\"kendo.label.optional|The text for the optional segment of a Label component\"\n            optional=\"Optional\"\n         >\n        </ng-container>\n        <label\n            [for]=\"control\"\n            [class.k-label-empty]=\"!text\">\n            {{ text }}<span *ngIf=\"optional\" class=\"k-label-optional\">({{textFor('optional')}})</span>\n        </label>\n        <ng-content></ng-content>\n    "
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef,
            Renderer2,
            LocalizationService])
    ], LabelComponent);
    return LabelComponent;
}());
export { LabelComponent };
