{"version":3,"file":"floating-label.component.d.ts","sources":["floating-label.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { AfterContentInit, ElementRef, EventEmitter, OnDestroy, Renderer2, ChangeDetectorRef } from '@angular/core';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { NgControl } from '@angular/forms';\nimport { FloatingLabelPosition } from './models/label-position';\n/**\n * Represents the [Kendo UI FloatingLabel component for Angular]({% slug overview_floatinglabel %}).\n * Provides floating labels to `input` elements.\n *\n * The FloatingLabel supports both Template and Reactive Forms and\n * [can contain Kendo UI for Angular Input components such as `kendo-combobox` and `kendo-numerictextbox`,\n * or HTML Input elements with the `kendoTextBox` directive applied]({% slug overview_floatinglabel %}#toc-implementing-floating-labels).\n *\n * @example\n * ```ts\n *\n * _@Component({\n *   selector: 'my-app',\n *   template: `\n *     <kendo-floatinglabel text=\"First name\">\n *       <input [(ngModel)]=\"name\" kendoTextBox />\n *     </kendo-floatinglabel>\n *   `\n * })\n * class AppComponent {\n *     public name = 'John';\n * }\n *\n * ```\n */\nexport declare class FloatingLabelComponent implements AfterContentInit, OnDestroy {\n    private elementRef;\n    private renderer;\n    private changeDetectorRef;\n    private localization;\n    /**\n     * Represents the current floating label position.\n     */\n    readonly labelPosition: FloatingLabelPosition;\n    hostClasses: boolean;\n    readonly focusedClass: boolean;\n    readonly invalidClass: boolean;\n    /**\n     * @hidden\n     */\n    direction: string;\n    /**\n     * Sets the CSS Styles that will be rendered on the actual label element.\n     * Supports the type of values that are supported by [ngStyle]({{ site.data.urls.angular['ngstyleapi'] }}) directive.\n     */\n    labelCssStyle: any;\n    /**\n     * Sets the CSS Classes that will be rendered on the actual label element.\n     * Supports the type of values that are supported by [ngClass]({{ site.data.urls.angular['ngclassapi'] }}) directive.\n     */\n    labelCssClass: any;\n    /**\n     * Sets the `id` attribute of the input inside the floating label.\n     */\n    id: string;\n    /**\n     * Specifies the text content of the floating label which describes the input.\n     */\n    text: string;\n    /**\n     * Allows marking a form field as optional. By default renders the `Optional` text when enabled.\n     * The text can be customized by providing a custom message ([see example]({% slug label_globalization %}#toc-custom-messages)).\n     *\n     * The default value is `false`\n     */\n    optional: boolean;\n    /**\n     * Fires after the floating label position is changed.\n     */\n    positionChange: EventEmitter<FloatingLabelPosition>;\n    kendoInput: any;\n    formControl: NgControl;\n    /**\n     * @hidden\n     */\n    focused: boolean;\n    /**\n     * @hidden\n     */\n    empty: boolean;\n    /**\n     * @hidden\n     */\n    invalid: boolean;\n    /**\n     * @hidden\n     */\n    labelId: string;\n    private subscription;\n    private autoFillStarted;\n    constructor(elementRef: ElementRef, renderer: Renderer2, changeDetectorRef: ChangeDetectorRef, localization: LocalizationService);\n    /**\n     * @hidden\n     */\n    ngAfterContentInit(): void;\n    ngAfterViewInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    textFor(key: string): string;\n    private subscribe;\n    private updateState;\n    private setAriaLabelledby;\n    private setLabelFor;\n    private handleAutofill;\n    private addHandlers;\n    private validateSetup;\n}\n"]}